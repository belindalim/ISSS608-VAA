---
title: "Hands-on Exercise 1"
author: "Belinda Lim"
---

# Getting Started

## Install and launching R packages

The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.

```{r}
pacman::p_load(tidyverse)
```

## Importing the data

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

# Plotting a simple bar chart

```{r}
ggplot(data = exam_data,
      aes(x = RACE)) +
  geom_bar()
```
# Plotting histograms
```{r}
ggplot(data=exam_data, aes(x = MATHS)) +
  geom_histogram(bins=10, 
                 boundary = 100,
                 color="black", 
                 fill="grey") +
  ggtitle("Distribution of Maths scores")
```
```{r}
ggplot(data=exam_data, aes(x = ENGLISH)) +
  geom_histogram(bins=10, 
                 boundary = 100,
                 color="black", 
                 fill="lightblue") +
  ggtitle("Distribution of English scores")
```
```{r}
ggplot(data = exam_data, aes(x = SCIENCE)) +
  geom_histogram(bins = 10, 
                 boundary = 100,
                 color = "black", 
                 fill = "lightyellow") +
  stat_bin(
    bins = 10,
    geom = "text",
    aes(y = ..count.., label = ..count..),
    vjust = -0.3,              
    position = "identity",     
    size = 3                   
  ) +
  ggtitle("Distribution of Science scores") +
  xlab("Science Score") +
  ylab("Number of Students")
```
# Call ggplot() function
```{r}
ggplot(data=exam_data)
```

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS))
```
# Plotting dotplot

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(dotsize = 0.5)
```
However the y-scale is not very useful. The plot is revised below.

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(binwidth=2.5,         
               dotsize = 0.5) +      
  scale_y_continuous(NULL,           
                     breaks = NULL)
```
Colour by gender
```{r}
ggplot(data = exam_data, 
       aes(x = MATHS, fill = GENDER)) +   # add fill = GENDER here
  geom_dotplot(
    binwidth = 2.5, 
    dotsize = 0.5, 
    stackgroups = TRUE,                  # stack by group
    binpositions = "all"                 # allow overlap
  ) +
  scale_y_continuous(NULL, breaks = NULL) +
  ggtitle("Dotplot of Maths Scores Colored by Gender") +
  xlab("Maths Score")
```



```{r}
ggplot(data = exam_data, 
       aes(x = MATHS, fill = GENDER)) +
  geom_dotplot(
    binwidth = 2.5, 
    dotsize = 0.5, 
    stackgroups = TRUE,
    binpositions = "all"
  ) +
  scale_y_continuous(NULL, breaks = NULL) +
  facet_wrap(~GENDER) +  # ← This creates two plots, one per gender
  ggtitle("Dotplot of Maths Scores by Gender") +
  xlab("Maths Score")
```
# Plotting histograms (more modifications)

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_histogram()
```
```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20,            
                 color="black",      
                 fill="light blue")
```
```{r}
  ggplot(data=exam_data, 
       aes(x= MATHS, 
           fill = GENDER)) +
  geom_histogram(bins=20, 
                 color="grey30")
```
# Plotting Kernel Density Plot

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_density()
```
```{r}
  ggplot(data=exam_data, 
       aes(x = MATHS, 
           colour = GENDER)) +
  geom_density()
```
# Plotting Box Plot
  
```{r}
  ggplot(data=exam_data, 
       aes(y = MATHS,       
           x= GENDER)) +    
  geom_boxplot()
```
```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot(notch=TRUE)
```
# Plotting Violin Plot

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_violin()
```
# Plotting Scatterplot

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point()  
```
# Plotting Combination Plot

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot() +                    
  geom_point(position="jitter", 
             size = 0.5)
```
Boxplot + Mean Points (Red) + Jitter
```{r}
ggplot(exam_data, aes(x = CLASS, y = MATHS)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = 0.2, size = 0.5, alpha = 0.5) +
  stat_summary(fun = mean, geom = "point", 
               shape = 18, size = 3, color = "red") +
  ggtitle("Maths Scores by Gender: Boxplot + Mean + Jitter")
```


# Working with stat()

Include mean into boxplot
```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot() +
  stat_summary(geom = "point",       
               fun = "mean",         
               colour ="red",        
               size=4)
```
Override default stat
```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot() +
  geom_point(stat="summary",        
             fun="mean",           
             colour="red",          
             size=4) 
```

Include best fit line into scatterplot
```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(size=0.5)
```
Override default smoothening method
```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              linewidth=0.5)
```

# Working with facet_wrap()

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20) +
    facet_wrap(~ CLASS)
```

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS, fill = CLASS)) +  
  geom_histogram(bins = 20, color = "black") + 
  facet_wrap(~ CLASS) +
  ggtitle("Maths Score Distribution by Class") +
  xlab("Maths Score") +
  ylab("Count") +
  theme_minimal()
```

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20) +
    facet_grid(~ CLASS)
```
```{r}
ggplot(data = exam_data, 
       aes(x = MATHS, fill = CLASS)) +   
  geom_histogram(bins = 20, color = "black") +  
  facet_grid(~ CLASS) +                         
  ggtitle("Distribution of Maths Scores by Class") +
  xlab("Maths Score") +
  ylab("Count") +
  theme_minimal()
```

# Working with Coordinates

Flipping the chart

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar()
```

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip()
```

Changing x and y-axis range

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, size=0.5)
```
```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
```

# Working with Themes

theme_gray()
```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_gray()
```

theme_classic()
```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_classic()
```

theme_minimal()
```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal()
```

