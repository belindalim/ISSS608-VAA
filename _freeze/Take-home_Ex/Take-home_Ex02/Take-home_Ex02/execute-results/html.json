{
  "hash": "1a0c1a372bc5a1de4b7e8df1c59630d1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-Home Exercise 2\"\nauthor: \"Belinda Lim\"\ndate: May 19, 2025\ndate-modified: \"last-modified\"\nformat:\n  html:\n    theme: flatly\n    toc: true\neditor: source\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n\n# **1  Mini-Challenge 1**\n\nThe case was extracted from [VAST Challenge 2025](https://vast-challenge.github.io/2025/MC1.html).\n\n## 1.1 Background\n\nOne of music’s biggest superstars is Oceanus native Sailor Shift. From humble beginnings, Sailor has grown in popularity and now enjoys fans around the world. Sailor started her career on the island nation of Oceanus which can be clearly seen in her early work, she started in the genre of “Oceanus Folk”. While Sailor has moved away from the traditional Oceanus style, the Oceanus Folk has made a name for itself in the musical world. The popularity of this music is one of the factors driving an increase in tourism to a quiet island nation that used to be known for fishing.\n\nIn 2023, Sailor Shift joined the Ivy Echoes – an all-female Oceanus Folk band consisting of Sailor (vocalist), Maya Jensen (vocalist), Lila “Lilly” Hartman (guitarist), Jade Thompson (drummer), and Sophie Ramirez (bassist). They played together at venues throughout Oceanus but had broken up to pursue their individual careers by 2026. Sailor’s breakthrough came in 2028 when one of her singles went viral, launched to the top of the global charts (something no other Oceanus Folk song had ever done). Since then, she has only continued to grow in popularity worldwide.\n\nSailor has released a new album almost every year since her big break, and each has done better than the last. Although she has remained primarily a solo artist, she has also frequently collaborated with other established artists, especially in the Indie Pop and Indie Folk genres. She herself has branched out musically over the years but regularly returns to the Oceanus Folk genre — even as the genre’s influence on the rest of the music world has spread even more.\n\nSailor has always been passionate about two things: (1) spreading Oceanus Folk, and (2) helping lesser-known artists break into music. Because of those goals, she’s particularly famous for her frequent collaborations.\n\nAdditionally, because of Sailor’s success, more attention began to be paid over the years to her previous bandmates. All 4 have continued in the music industry—Maya as an independent vocalist, Lilly and Jade as instrumentalists in other bands, and Sophie as a music producer for a major record label. In various ways, all of them have contributed to the increased influence of Oceanus folk, resulting in a new generation of up-and-coming Oceanus Folk artists seeking to make a name for themselves in the music industry.\n\nNow, as Sailor returns to Oceanus in 2040, a local journalist – Silas Reed – is writing a piece titled Oceanus Folk: Then-and-Now that aims to trace the rise of Sailor and the influence of Oceanus Folk on the rest of the music world. He has collected a large dataset of musical artists, producers, albums, songs, and influences and organized it into a knowledge graph. Your task is to help Silas create beautiful and informative visualizations of this data and uncover new and interesting information about Sailor’s past, her rise to stardom, and her influence.\n\n## 1.2 Tasks and Questions:\n\n1.  Design and develop visualizations and visual analytic tools that will allow Silas to explore and understand the profile of Sailor Shift’s career\n\n    1.  Who has she been most influenced by over time?\n\n    2.  Who has she collaborated with and directly or indirectly influenced?\n\n    3.  How has she influenced collaborators of the broader Oceanus Folk community?\n\n2.  Develop visualizations that illustrate how the influence of Oceanus Folk has spread through the musical world.\n\n    1.  Was this influence intermittent or did it have a gradual rise?\n\n    2.  What genres and top artists have been most influenced by Oceanus Folk?\n\n    3.  On the converse, how has Oceanus Folk changed with the rise of Sailor Shift? From which genres does it draw most of its contemporary inspiration?\n\n3.  Use your visualizations to develop a profile of what it means to be a rising star in the music industry.\n\n    1.  Visualize the careers of three artists. Compare and contrast their rise in popularity and influence.\n\n    2.  Using this characterization, give three predictions of who the next Oceanus Folk stars with be over the next five years.\n\n# **2  Data Pre-processing**\n\n## **2.1 Load packages**\n\nIn the code chunk below, p_load() of pacman packages is used to load the R packages into R environment:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph)\n```\n:::\n\n\n\n## **2.2 Importing Data**\n\nIn the code chunk below, `fromJSON()` of **jsonlite** package is used to import *MC1_graph.json* file into R and save the output object\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkg <- fromJSON(\"MC1data/MC1_graph.json\")\n```\n:::\n\n\n\n## **2.3 Inspect Structure**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(kg, max.level = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame':\t17412 obs. of  10 variables:\n $ links     :'data.frame':\t37857 obs. of  4 variables:\n```\n\n\n:::\n:::\n\n\n\n## **2.4 Extract and Inspect**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes_tbl <-as_tibble(kg$nodes)\nedges_tbl <-as_tibble(kg$links)\n```\n:::\n\n\n\n# **3  Initiate EDA**# \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = edges_tbl,\n       aes(y = `Edge Type`)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\nOn the other hands, code chunk below uses ggplot2 functions to reveal the frequency distribution of *Node Type* field of *nodes_tbl*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = nodes_tbl,\n       aes(y = `Node Type`)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n## **3.1 Create Knowledge Graph**\n\nBefore we can go ahead to build the tidygraph object, it is important for us to ensures each id from the node list is mapped to the correct row number. This requirement can be achive by using the code chunk below.\n\n### Step 1: Mapping from node id to row index\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nid_map <- tibble(id = nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n```\n:::\n\n\n\nThis ensures each id from your node list is mapped to the correct row number.\n\n### Step 2: Map source and target IDs to row indices\n\nNext, we will map the source and the target IDs to row indices by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedges_tbl <- edges_tbl %>%\n  left_join(id_map, by = c(\"source\" = \"id\")) %>%\n  rename(from = index) %>%\n  left_join(id_map, by = c(\"target\" = \"id\")) %>%\n  rename(to = index)\n```\n:::\n\n\n\nNote: To better understand the changes before and after the process, it is to take a screenshot of *edges_tbl* before and after this process and examine the differences.\n\n### Step 3: Filter out any unmatched (invalid) edges\n\nLastly, the code chunk below will be used to exclude the unmatch edges.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedges_tbl <- edges_tbl %>%\n  filter(!is.na(from), !is.na(to))\n```\n:::\n\n\n\n### Step 4: Creating the graph\n\nLastly, `tbl_graph()` is used to create tidygraph’s graph object by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph <- tbl_graph(nodes = nodes_tbl, edges = edges_tbl, directed = kg$directed)\n```\n:::\n\n\n\nYou might want to confirm the output object is indeed in tidygraph format by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_graph\" \"igraph\"   \n```\n\n\n:::\n:::\n\n\n\n## **3.2 Visualising the Knowledge graph**\n\nIn this section, we will use ggraph’s functions to visualise and analyse the graph object.\n\nWarning: The two examples below are not model answers, they are examples to show you how to use the mantra of **Overview first, details on demand** of visual investigation.\n\nSeveral of the ggraph layouts involve randomisation. In order to ensure reproducibility, it is necessary to set the seed value before plotting by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n```\n:::\n\n\n\n## **3.3 Visualising the whole graph**\n\nIn the code chunk below, ggraph functions are used to visualise the whole graph.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3, colour = \"gray\") + \n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 2.5) +    #repel will force word to be apart\n  theme_void()\n```\n:::\n\n\n\nNotice that the whole graph is very messy and we can hardy discover any useful patterns. This is always the case in graph visualisation and analysis. In order to gain meaningful visual discovery, it is always useful for us to looking into the details, for example by plotting sub-graphs.\n\n## **3.4 Visualising the sub-graph**\n\nIn this section, we are interested to create a sub-graph base on *MemberOf* value in *Edge Type* column of the *edges* data frame.\n\n#### Step 1: Filter edges to only \"MemberOf\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph_memberof <-graph %>%\n  activate(edges) %>%\n  filter(`Edge Type` == \"MemberOf\")  #filter away the edge, nodes are still there \n```\n:::\n\n\n\n#### Step 2: Extract **only connected nodes (i.e., used in these edges)**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nused_node_indices <- graph_memberof %>%  #eliminate away orphan nodes\n  activate(edges) %>%\n  as_tibble() %>%\n  select(from, to) %>%\n  unlist() %>%\n  unique()\n```\n:::\n\n\n\n#### Step 3: **Keeping only those nodes**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph_memberof <- graph_memberof %>%\n  activate(nodes) %>%\n  mutate(row_id = row_number()) %>%\n  filter(row_id %in% used_node_indices) %>%\n  select(-row_id) # optional clean up\n```\n:::\n\n\n\n#### Step 4: Plot the sub-graph\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(graph_memberof, layout = \"fr\") +\n  geom_edge_link(alpha = 0.5, colour = \"gray\") + \n  geom_node_point(aes(color= `Node Type`),\n                  size = 1) + \n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) + \n  theme_void()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# they stay with their group for quite long\n# change to interactive so that can hover and see all labels\n```\n:::\n",
    "supporting": [
      "Take-home_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}