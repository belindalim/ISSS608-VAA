---
title: "MC1_DataPreparationCodes"
format: html
---
# **1  Mini-Challenge 1**

The case was extracted from [VAST Challenge 2025](https://vast-challenge.github.io/2025/MC1.html).

## 1.1 Background

One of music’s biggest superstars is Oceanus native Sailor Shift. From humble beginnings, Sailor has grown in popularity and now enjoys fans around the world. Sailor started her career on the island nation of Oceanus which can be clearly seen in her early work, she started in the genre of “Oceanus Folk”. While Sailor has moved away from the traditional Oceanus style, the Oceanus Folk has made a name for itself in the musical world. The popularity of this music is one of the factors driving an increase in tourism to a quiet island nation that used to be known for fishing.

In 2023, Sailor Shift joined the Ivy Echoes – an all-female Oceanus Folk band consisting of Sailor (vocalist), Maya Jensen (vocalist), Lila “Lilly” Hartman (guitarist), Jade Thompson (drummer), and Sophie Ramirez (bassist). They played together at venues throughout Oceanus but had broken up to pursue their individual careers by 2026. Sailor’s breakthrough came in 2028 when one of her singles went viral, launched to the top of the global charts (something no other Oceanus Folk song had ever done). Since then, she has only continued to grow in popularity worldwide.

Sailor has released a new album almost every year since her big break, and each has done better than the last. Although she has remained primarily a solo artist, she has also frequently collaborated with other established artists, especially in the Indie Pop and Indie Folk genres. She herself has branched out musically over the years but regularly returns to the Oceanus Folk genre — even as the genre’s influence on the rest of the music world has spread even more.

Sailor has always been passionate about two things: (1) spreading Oceanus Folk, and (2) helping lesser-known artists break into music. Because of those goals, she’s particularly famous for her frequent collaborations.

Additionally, because of Sailor’s success, more attention began to be paid over the years to her previous bandmates. All 4 have continued in the music industry—Maya as an independent vocalist, Lilly and Jade as instrumentalists in other bands, and Sophie as a music producer for a major record label. In various ways, all of them have contributed to the increased influence of Oceanus folk, resulting in a new generation of up-and-coming Oceanus Folk artists seeking to make a name for themselves in the music industry.

Now, as Sailor returns to Oceanus in 2040, a local journalist – Silas Reed – is writing a piece titled Oceanus Folk: Then-and-Now that aims to trace the rise of Sailor and the influence of Oceanus Folk on the rest of the music world. He has collected a large dataset of musical artists, producers, albums, songs, and influences and organized it into a knowledge graph. Your task is to help Silas create beautiful and informative visualizations of this data and uncover new and interesting information about Sailor’s past, her rise to stardom, and her influence.

## 1.2 Tasks and Questions:

1.  Design and develop visualizations and visual analytic tools that will allow Silas to explore and understand the profile of Sailor Shift’s career

    1.  Who has she been most influenced by over time?

    2.  Who has she collaborated with and directly or indirectly influenced?

    3.  How has she influenced collaborators of the broader Oceanus Folk community?

2.  Develop visualizations that illustrate how the influence of Oceanus Folk has spread through the musical world.

    1.  Was this influence intermittent or did it have a gradual rise?

    2.  What genres and top artists have been most influenced by Oceanus Folk?

    3.  On the converse, how has Oceanus Folk changed with the rise of Sailor Shift? From which genres does it draw most of its contemporary inspiration?

3.  Use your visualizations to develop a profile of what it means to be a rising star in the music industry.

    1.  Visualize the careers of three artists. Compare and contrast their rise in popularity and influence.

    2.  Using this characterization, give three predictions of who the next Oceanus Folk stars with be over the next five years.

# **2  Data Pre-processing**

## **2.1 Load packages**

In the code chunk below, p_load() of pacman packages is used to load the R packages into R environment:

Utility Tools

-   jsonlite: To parse JSON
-   tidyverse - Data science tools
-   ggtext - Tools for text formatting
-   knitr - For better table displays
-   lubridate - For processing date and time

Graphing Tools

-   patchwork - For combining ggplot plots
-   ggraph - For plotting network data
-   tidygraph - For graph manipulations
-   igraph - Contains functions for network analysis
-   ggiraph - Interactive plots


::: {.callout-note appearance="minimal" collapse="true"}
## Code

```{r}
#| code-fold: true
#| code-summary: "Show code"
pacman::p_load(jsonlite, tidyverse, ggtext,
                knitr, lubridate, patchwork,
                ggraph, tidygraph, igraph,
                ggiraph)
```
:::

## **2.2 Import Data and Inspect Structure**

In the code chunk below, `fromJSON()` of **jsonlite** package is used to import *MC1_graph.json* file into R and save the output object and the data structure is inspected

::: {.callout-note appearance="minimal" collapse="true"}
## Code

```{r}
#| code-fold: true
#| code-summary: "Show code"
mc1_data <- fromJSON("MC1data/MC1_graph.json")
glimpse(mc1_data)
```
:::

## **2.3 Inspect Data Structure of Nodes and Edges**

### Separating into node and edge data

```{r}
mc1_nodes_raw <- as_tibble(mc1_data$nodes)

glimpse(mc1_nodes_raw)

kable(head(mc1_nodes_raw, 5))
```

```{r}
mc1_edges_raw <- as_tibble(mc1_data$links)

glimpse(mc1_edges_raw)

kable(head(mc1_edges_raw, 10))
```

## **2.3 Data Pre-processing**

### **2.3.1 New columns created to identify "Sailor" and "Oceanus_folk" related works**

Aids identification and filtering of "Sailor" and "Oceanus_folk" related works for analysis

```{r}
mc1_nodes_raw <- mc1_nodes_raw %>%
  mutate(
    is_sailor = (
      str_detect(name, regex("sailor shift", ignore_case = TRUE))
    ) %>% replace_na(FALSE),
    
    is_oceanus_folk = str_detect(genre, regex("oceanus folk", ignore_case = TRUE)) %>% 
      replace_na(FALSE)
  )
```

### **2.3.2 Convert date fields**

Convert date fields from "chr" to "int"

Note: Dates only appears in Songs and Albums.

```{r}
mc1_nodes_raw <- mc1_nodes_raw %>%
  mutate(across(c(release_date, notoriety_date, written_date),
                ~as.integer(if_else(`Node Type` %in% c("Song", "Album"), ., NA_character_))))
```

### **2.3.3 Check and remove duplicates**

3)  Check and remove duplicates

For Nodes, there are no duplicates:

```{r}
mc1_nodes_raw %>%
  count(id) %>%
  filter(n > 1)
```

For Edges, there are duplicates as seen below. Only their Keys are different. However, Keys are not used for subsequent data analysis. Hence, these duplicated edges are removed.

```{r}
# Step 1: Identify duplicate combinations
duplicate_summary <- mc1_edges_raw %>%
  count(source, target, `Edge Type`) %>%
  filter(n > 1)

# Step 2: Join back to get all original duplicate rows
mc1_edges_raw %>%
  inner_join(duplicate_summary, by = c("source", "target", "Edge Type"))
```

All duplicates were removed:

```{r}
mc1_edges_raw <- mc1_edges_raw %>%
  distinct(source, target, `Edge Type`, .keep_all = TRUE)

mc1_edges_raw %>%
  count(source, target, `Edge Type`) %>%
  filter(n > 1)
```

# **3  Exploratory Data Analysis**

## **3.1 Explore and Inspect Nodes**

```{r}
mc1_nodes_raw$release_date %>% unique()

mc1_nodes_raw %>%
  filter(grepl("Sailor Shift", name)) #Sailor Shift is in name column and not in stage_name column
```

```{r}
mc1_nodes_clean <- mc1_nodes_raw %>%
  mutate(
    name = gsub("'", "", name)
  ) %>%
  select(`Node Type`, name, release_date, genre, notable, id, single, written_date, stage_name, notoriety_date, is_sailor, is_oceanus_folk)
  
# Belinda: a lot of nodes were missing - single, written_date, stage_name, notoriety_date, is_sailor, is_oceanus_folk. added them upfront so that we can reuse these variables later on. 

kable(head(mc1_nodes_clean))
```

## **3.2 Explore and Inspect Edges**

Confirm that the IDs used in edges match the range of IDs in nodes

```{r}
range(mc1_edges_raw$source)

range(mc1_edges_raw$target) 
```

## **3.3 Mapping from node name to edges indexes**

```{r}
id_map <- mc1_nodes_clean %>%
  select(name, id)

id_map
```

## ** 3.4 Map source and target to node name**

```{r}
mc1_edges_clean <- mc1_edges_raw %>%
  left_join(id_map, by = c("source" = "id")) %>%
  rename(from = name) %>%
  left_join(id_map, by = c("target" = "id")) %>%
  rename(to = name)

mc1_edges_clean
```

```{r}
mc1_edges_clean <- mc1_edges_clean %>%  #Drops source and target columns
  select(from, to, `Edge Type`)

mc1_edges_clean
```

## ** 3.5 Filter out any unmatched (invalid) edges**

```{r}
mc1_edges_clean <- mc1_edges_clean %>%
  filter(!is.na(from), !is.na(to))
```

## ** 3.6 Checking for any missing nodes**

```{r}
missing_nodes <- setdiff(
  unique(c(mc1_edges_clean$from, mc1_edges_clean$to)),
  mc1_nodes_clean$name
)

missing_nodes
```

## ** 3.7 Check Edges Schema**

Define valid source and destination types for each edge type as per the data description file:

```{r}
# Define valid source and destination types for each edge type
edge_rules <- list(
  PerformerOf = list(source = c("Person", "MusicalGroup"), target = c("Song", "Album")),
  
  ComposerOf = list(source = c("Person"), target = c("Song", "Album")),
  
  ProducerOf = list(source = c("Person", "RecordLabel"), target = c("Song", "Album", "Person", "MusicalGroup")),
  
  LyricistOf = list(source = c("Person"), target = c("Song", "Album")),
  
  RecordedBy = list(source = c("Song", "Album"), target = c("RecordLabel")),
  
  DistributedBy = list(source = c("Song", "Album"), target = c("RecordLabel")),
  
  InStyleOf = list(source = c("Song", "Album"), target = c("Song", "Album", "Person", "MusicalGroup")),
  
  InterpolatesFrom = list(source = c("Song", "Album"), target = c("Song", "Album")),
  
  CoverOf = list(source = c("Song", "Album"), target = c("Song", "Album")),
  
  LyricalReferenceTo = list(source = c("Song", "Album"), target = c("Song", "Album")),
 
   DirectlySamples = list(source = c("Song", "Album"), target = c("Song", "Album")),
  
  MemberOf = list(source = c("Person"), target = c("MusicalGroup"))
)
```

Check if there were erroreous edge and node relationships:

```{r}
# Create a lookup for node types
node_type_lookup <- mc1_nodes_clean %>%
  select(name, `Node Type`) %>%
  deframe()

# Add source and target node types to the edge table
mc1_edges_checked <- mc1_edges_clean %>%
  mutate(
    source_type = node_type_lookup[from],
    target_type = node_type_lookup[to]
  )

mc1_edges_tagged <- mc1_edges_checked %>%
  rowwise() %>%
  mutate(
    valid = {
      rule <- edge_rules[[`Edge Type`]]
      if (is.null(rule)) TRUE
      else {
        source_type %in% rule$source && target_type %in% rule$target
      }
    }
  ) %>%
  ungroup()

# Count and display invalid edge combinations
invalid_edge_summary <- mc1_edges_tagged %>%
  filter(!valid) %>%
  count(`Edge Type`, source_type, target_type, sort = TRUE)

print(invalid_edge_summary)

# Check total invalid edge count
cat("Total invalid edges:", sum(!mc1_edges_tagged$valid), "\n")
```
There were 570 invalid edges. 

Belinda: I updated the codes to keep the valid edges as the previous version was too chunky. 
```{r}
# Keep only valid edges
mc1_edges_clean <- mc1_edges_tagged %>%
  filter(valid)
```


## **3.8 Visualising Edge Types**

```{r}
ggplot(data = mc1_edges_clean,
       aes(y = `Edge Type`)) +
  geom_bar()
```

## **3.9 Visualising Node Types**

```{r}
ggplot(data = mc1_nodes_clean,
       aes(y = `Node Type`)) +
  geom_bar()
```

## **3.10 Creating the global knowledge graph**

`tbl_graph()` is used to create tidygraph's graph object by using the code chunk below

```{r}
music = tbl_graph(edges = mc1_edges_clean,
                             nodes = mc1_nodes_clean,
                             directed = TRUE)
```

```{r}
set.seed(1234)
```

## Question 1a Who has Sailor been most influenced by over time?


-----------------------------------------