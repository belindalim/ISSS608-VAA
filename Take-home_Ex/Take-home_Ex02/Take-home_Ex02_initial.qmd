---
title: "Take-Home Exercise 2"
author: "Belinda Lim"
date: May 19, 2025
date-modified: "last-modified"
format:
  html:
    theme: flatly
    toc: true
editor: source
execute:
  eval: true
  echo: true
  warning: false
  freeze: true
---

# **1  Mini-Challenge 1**

The case was extracted from [VAST Challenge 2025](https://vast-challenge.github.io/2025/MC1.html).

## 1.1 Background

One of music’s biggest superstars is Oceanus native Sailor Shift. From humble beginnings, Sailor has grown in popularity and now enjoys fans around the world. Sailor started her career on the island nation of Oceanus which can be clearly seen in her early work, she started in the genre of “Oceanus Folk”. While Sailor has moved away from the traditional Oceanus style, the Oceanus Folk has made a name for itself in the musical world. The popularity of this music is one of the factors driving an increase in tourism to a quiet island nation that used to be known for fishing.

In 2023, Sailor Shift joined the Ivy Echoes – an all-female Oceanus Folk band consisting of Sailor (vocalist), Maya Jensen (vocalist), Lila “Lilly” Hartman (guitarist), Jade Thompson (drummer), and Sophie Ramirez (bassist). They played together at venues throughout Oceanus but had broken up to pursue their individual careers by 2026. Sailor’s breakthrough came in 2028 when one of her singles went viral, launched to the top of the global charts (something no other Oceanus Folk song had ever done). Since then, she has only continued to grow in popularity worldwide.

Sailor has released a new album almost every year since her big break, and each has done better than the last. Although she has remained primarily a solo artist, she has also frequently collaborated with other established artists, especially in the Indie Pop and Indie Folk genres. She herself has branched out musically over the years but regularly returns to the Oceanus Folk genre — even as the genre’s influence on the rest of the music world has spread even more.

Sailor has always been passionate about two things: (1) spreading Oceanus Folk, and (2) helping lesser-known artists break into music. Because of those goals, she’s particularly famous for her frequent collaborations.

Additionally, because of Sailor’s success, more attention began to be paid over the years to her previous bandmates. All 4 have continued in the music industry—Maya as an independent vocalist, Lilly and Jade as instrumentalists in other bands, and Sophie as a music producer for a major record label. In various ways, all of them have contributed to the increased influence of Oceanus folk, resulting in a new generation of up-and-coming Oceanus Folk artists seeking to make a name for themselves in the music industry.

Now, as Sailor returns to Oceanus in 2040, a local journalist – Silas Reed – is writing a piece titled Oceanus Folk: Then-and-Now that aims to trace the rise of Sailor and the influence of Oceanus Folk on the rest of the music world. He has collected a large dataset of musical artists, producers, albums, songs, and influences and organized it into a knowledge graph. Your task is to help Silas create beautiful and informative visualizations of this data and uncover new and interesting information about Sailor’s past, her rise to stardom, and her influence.

## 1.2 Tasks and Questions:

1.  Design and develop visualizations and visual analytic tools that will allow Silas to explore and understand the profile of Sailor Shift’s career

    1.  Who has she been most influenced by over time?

    2.  Who has she collaborated with and directly or indirectly influenced?

    3.  How has she influenced collaborators of the broader Oceanus Folk community?

2.  Develop visualizations that illustrate how the influence of Oceanus Folk has spread through the musical world.

    1.  Was this influence intermittent or did it have a gradual rise?

    2.  What genres and top artists have been most influenced by Oceanus Folk?

    3.  On the converse, how has Oceanus Folk changed with the rise of Sailor Shift? From which genres does it draw most of its contemporary inspiration?

3.  Use your visualizations to develop a profile of what it means to be a rising star in the music industry.

    1.  Visualize the careers of three artists. Compare and contrast their rise in popularity and influence.

    2.  Using this characterization, give three predictions of who the next Oceanus Folk stars with be over the next five years.

# **2  Data Pre-processing**

## **2.1 Load packages**

In the code chunk below, p_load() of pacman packages is used to load the R packages into R environment:

```{r}
pacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph, igraph, visNetwork,gganimate, shiny)
```

## **2.2 Importing Data**

In the code chunk below, `fromJSON()` of **jsonlite** package is used to import *MC1_graph.json* file into R and save the output object

```{r}
kg <- fromJSON("MC1data/MC1_graph.json")
```

## **2.3 Inspect Structure**

```{r}
str(kg, max.level = 1)
```

## **2.4 Extract and Inspect**

```{r}
nodes_tbl <-as_tibble(kg$nodes)
edges_tbl <-as_tibble(kg$links)
```

## **2.5 Rename Column Names**

Rename Node Type and Edge Type to Node_Type and Edge_Type to facilitate coding.

```{r}
nodes_tbl <- nodes_tbl %>%
  rename(Node_Type = `Node Type`)
```

```{r}
edges_tbl <- edges_tbl %>%
  rename(Edge_Type = `Edge Type`)
```

## **2.6 Add additional columns for Sailor and Oceanus_folk**

The two columns will help in identification and filtering of "Sailor" and "Oceanus Folk".

```{r}
nodes_tbl %>%
  filter(
    str_detect(name, regex("sailor shift", ignore_case = TRUE))
  )
```

```{r}
nodes_tbl <- nodes_tbl %>%
  mutate(
    is_sailor = (
      str_detect(name, regex("sailor shift", ignore_case = TRUE))
    ) %>% replace_na(FALSE),
    
    is_oceanus_folk = str_detect(genre, regex("oceanus folk", ignore_case = TRUE)) %>% #na/not oceanus folk = false
      replace_na(FALSE)
  )
```

## **2.7 Convert data types**

Convert date fields from characters to integer

```{r}
nodes_tbl <- nodes_tbl %>%
  mutate(across(c(release_date, notoriety_date, written_date),
                ~as.integer(if_else(Node_Type %in% c("Song", "Album"), ., NA_character_))))
```

## **2.8 Check and remove duplicates**

For Nodes, there are no duplicates:

```{r}
nodes_tbl %>%
  count(id) %>%
  filter(n > 1)
```

For Edges, there are duplicates as seen below which will be removed:

```{r}
edges_tbl %>%
  count(source, target, Edge_Type) %>%
  filter(n > 1)
```

Inspect one example:

```{r}
edges_tbl %>%
  filter(source == 17057, target == 17058, Edge_Type == "PerformerOf")
```

```{r}
edges_tbl <- edges_tbl %>%
  distinct(source, target, Edge_Type, .keep_all = TRUE)
```

All duplicated were removed:

```{r}
edges_tbl %>%
  count(source, target, Edge_Type) %>%
  filter(n > 1)
```

# **3  Exploratory Data Analysis**

```{r}
ggplot(data = edges_tbl,
       aes(y = Edge_Type)) +
  geom_bar()
```

On the other hands, code chunk below uses ggplot2 functions to reveal the frequency distribution of *Node_Type* field of *nodes_tbl*.

```{r}
ggplot(data = nodes_tbl,
       aes(y = Node_Type)) +
  geom_bar()
```

## **3.1 Create Knowledge Graph**

Before we can go ahead to build the tidygraph object, it is important for us to ensures each id from the node list is mapped to the correct row number. This requirement can be achive by using the code chunk below.

### Step 1: Mapping from node id to row index

```{r}
id_map <- tibble(id = nodes_tbl$id,
                 index = seq_len(
                   nrow(nodes_tbl)))
```

This ensures each id from your node list is mapped to the correct row number.

### Step 2: Map source and target IDs to row indices

Next, we will map the source and the target IDs to row indices by using the code chunk below.

```{r}
edges_tbl <- edges_tbl %>%
  left_join(id_map, by = c("source" = "id")) %>%
  rename(from = index) %>%
  left_join(id_map, by = c("target" = "id")) %>%
  rename(to = index)
```

Note: To better understand the changes before and after the process, it is to take a screenshot of *edges_tbl* before and after this process and examine the differences.

### Step 3: Filter out any unmatched (invalid) edges

Lastly, the code chunk below will be used to exclude the unmatch edges.

```{r}
edges_tbl <- edges_tbl %>%
  filter(!is.na(from), !is.na(to))
```

### Step 4: Creating the graph

Lastly, `tbl_graph()` is used to create tidygraph’s graph object by using the code chunk below.

```{r}
graph <- tbl_graph(nodes = nodes_tbl, edges = edges_tbl, directed = kg$directed)
                  
```

You might want to confirm the output object is indeed in tidygraph format by using the code chunk below.

```{r}
class(graph)
```

## **3.2 Visualising the Knowledge graph**

In this section, we will use ggraph’s functions to visualise and analyse the graph object.

Warning: The two examples below are not model answers, they are examples to show you how to use the mantra of **Overview first, details on demand** of visual investigation.

Several of the ggraph layouts involve randomisation. In order to ensure reproducibility, it is necessary to set the seed value before plotting by using the code chunk below.

```{r}
set.seed(1234)
                  
```

## **3.3 Visualising the whole graph**

In the code chunk below, ggraph functions are used to visualise the whole graph.

```{r, eval = FALSE}
ggraph(graph, layout = "fr") +
  geom_edge_link(alpha = 0.3, colour = "gray") + 
  geom_node_point(aes(color = Node_Type),
                  size = 4) +
  geom_node_text(aes(label = name), repel = TRUE, size = 2.5) +    #repel will force word to be apart
  theme_void()
```

Notice that the whole graph is very messy and we can hardy discover any useful patterns. This is always the case in graph visualisation and analysis. In order to gain meaningful visual discovery, it is always useful for us to looking into the details, for example by plotting sub-graphs.

## **3.4 Visualising the sub-graph**

In this section, we are interested to create a sub-graph base on *MemberOf* value in *Edge_Type* column of the *edges* data frame.

#### Step 1: Filter edges to only "MemberOf"

```{r}
graph_memberof <-graph %>%
  activate(edges) %>%
  filter(Edge_Type == "MemberOf")  #filter away the edge, nodes are still there 
```

#### Step 2: Extract **only connected nodes (i.e., used in these edges)**

```{r}
used_node_indices <- graph_memberof %>%  #eliminate away orphan nodes
  activate(edges) %>%
  as_tibble() %>%
  select(from, to) %>%
  unlist() %>%
  unique()
```

#### Step 3: **Keeping only those nodes**

```{r}
graph_memberof <- graph_memberof %>%
  activate(nodes) %>%
  mutate(row_id = row_number()) %>%
  filter(row_id %in% used_node_indices) %>%
  select(-row_id) # optional clean up
```

#### Step 4: Plot the sub-graph

```{r}
ggraph(graph_memberof, layout = "fr") +
  geom_edge_link(alpha = 0.5, colour = "gray") + 
  geom_node_point(aes(color= Node_Type),
                  size = 1) + 
  geom_node_text(aes(label = name),
                 repel = TRUE,
                 size = 2.5) + 
  theme_void()
```

# **4  Part 1: Explore and understand the profile of Sailor Shift’s career**

Step 1: Find Sailor's ID and Works

```{r}
sailor_ids <- nodes_tbl %>% #find Sailor's ID 
  filter(is_sailor) %>%
  pull(id)

sailor_works <- edges_tbl %>% #find Sailor's work
  filter(
    source %in% sailor_ids,
    Edge_Type %in% c("PerformerOf", "ComposerOf", "ProducerOf", "LyricistOf")
  ) %>%
  pull(target)

sailor_works_influenced <- edges_tbl %>% #find Sailor's work if its linked to an edge. 
  filter(
    source %in% sailor_works,
    Edge_Type %in% c("InStyleOf", "InterpolatesFrom", "CoverOf", "LyricalReferenceTo", "DirectlySamples")
  ) %>%
  pull(source) %>%
  unique()
```

Check the counts of "PerformerOf", "ComposerOf", "ProducerOf", "LyricistOf" under Sailor:

```{r}
edges_tbl %>%
  filter(
    source %in% sailor_ids,
    Edge_Type %in% c("PerformerOf", "ComposerOf", "ProducerOf", "LyricistOf")
  ) %>%
  count(Edge_Type, sort = TRUE)
```

Sailor is a performer and lyricist.

Step 2: Find Works that influenced Sailor's works based what was cited by in her works (InStyleOf", "InterpolatesFrom", "CoverOf", "DirectlySamples", "LyricalReferenceTo") #calvin

```{r}
influences <- edges_tbl %>%
  filter(
    source %in% sailor_works_influenced,  # Only use works that are influenced
    Edge_Type %in% c("InStyleOf", "InterpolatesFrom", "CoverOf", "LyricalReferenceTo", "DirectlySamples")
  ) %>%
  left_join(nodes_tbl, by = c("target" = "id"))

influences %>%
  count(Node_Type, sort = TRUE)
```

There were 26 works that were cited by Sailor's works.

```{r}
influencer_ids <- influences %>% #extract IDs of the influencer
  pull(target) %>%
  unique()

influencer_people <- edges_tbl %>%  #find names of influences by Person and Musical Grp only (i.e. "who")
  filter(
    target %in% influencer_ids,
    Edge_Type %in% c("PerformerOf", "ComposerOf", "ProducerOf", "LyricistOf")
  ) %>%
  left_join(
    nodes_tbl %>% select(id, name, genre, Node_Type, release_date), 
    by = c("source" = "id")
  ) %>%
  filter(Node_Type %in% c("Person", "MusicalGroup"))  #didnt include recordlabel
```

```{r}
influencer_people %>% #these are the top influencers of Sailor.
  count(Node_Type, name, sort = TRUE) %>%
  rename(`Type` = Node_Type, `Influencer` = name, `Mentions` = n)
```

There were 91 persons and 2 musical groups influencing Sailor.

```{r}
# Step 1: Get Urszula Stochmal's ID
urszula_id <- nodes_tbl %>%
  filter(name == "Urszula Stochmal") %>%
  pull(id)

# Step 2: Get works Urszula contributed to
urszula_works <- edges_tbl %>%
  filter(
    source == urszula_id,
    Edge_Type %in% c("PerformerOf", "ComposerOf", "LyricistOf", "ProducerOf")
  ) %>%
  pull(target)

# Step 3: Find which of those works were later referenced by Sailor's works
sailor_influenced_works <- edges_tbl %>%
  filter(
    source %in% sailor_works,
    Edge_Type %in% c("InStyleOf", "InterpolatesFrom", "CoverOf", "LyricalReferenceTo", "DirectlySamples"),
    target %in% urszula_works
  )

# Step 4: Join to get work names influenced by Urszula and cited by Sailor
sailor_influenced_works %>%
  left_join(nodes_tbl, by = c("target" = "id")) %>%
  select(Edge_Type, work_title = name, genre, release_date)
```

```{r}
heartache_id <- nodes_tbl %>%
  filter(name == "Addicted to Your Heartache") %>%
  pull(id)

nodes_tbl %>%
  filter(id == heartache_id) %>%
  select(name, Node_Type, genre, release_date)

edges_tbl %>%
  filter(source == heartache_id | target == heartache_id)

edges_tbl %>%
  filter(source == heartache_id | target == heartache_id) %>%
  left_join(nodes_tbl %>% select(id, name), by = c("source" = "id")) %>%
  rename(source_name = name) %>%
  left_join(nodes_tbl %>% select(id, name), by = c("target" = "id")) %>%
  rename(target_name = name) %>%
  select(Edge_Type, source_name, target_name)
```

```{r}

# Filter and define all relevant IDs for the graph
influencer_people_ids <- influencer_people$source
referenced_work_ids <- influences$target  # the works Sailor referenced

all_ids <- unique(c(
  sailor_ids,
  sailor_works_influenced,
  referenced_work_ids,       #  Include the works Sailor cited
  influencer_people_ids
))
```

```{r}
# Filter nodes and edges to this subgraph that influenced Sailor
mini_nodes <- nodes_tbl %>% filter(id %in% all_ids)

mini_edges <- edges_tbl %>%  #keep the edges where source and target are in the subgraph
  filter(source %in% all_ids & target %in% all_ids)

# Map node ID to row index for plotting
id_map <- tibble(id = mini_nodes$id, index = seq_len(nrow(mini_nodes)))

mini_edges <- mini_edges %>%
  select(source, target, Edge_Type, key) %>%
  left_join(id_map %>% rename(from = index), by = c("source" = "id")) %>%
  left_join(id_map %>% rename(to = index), by = c("target" = "id"))

# Clean edges with missing mappings to any index 
mini_edges_clean <- mini_edges %>%
  filter(!is.na(from) & !is.na(to))

# Count how many times each influencer appears to compute influence strength 
influence_scores <- as.data.frame(table(influencer_people$source)) %>%
  rename(id = Var1, influence_score = Freq) %>%
  mutate(id = as.character(id))  

# Join into mini_nodes
mini_nodes <- mini_nodes %>%
  mutate(id = as.character(id)) %>%  # ensure same type before join
  left_join(influence_scores, by = "id") %>%
  mutate(influence_score = replace_na(influence_score, 1))

# Tag Sailor 
mini_nodes <- mini_nodes %>%
  mutate(
    is_sailor_node = name == "Sailor Shift"
  )

mini_nodes <- mini_nodes %>%  
  mutate(
    node_category = case_when(
      is_sailor_node ~ "Sailor Shift",
      id %in% sailor_works_influenced ~ "Sailor's Work",
      TRUE ~ "Influencer"
    )
  )

# Add year from release_date (for timeline grouping)
mini_nodes <- mini_nodes %>%
  mutate(
    year = release_date  
  )

mini_edges_scored <- mini_edges_clean %>%
  filter(
    Edge_Type %in% c(
      "InStyleOf", "InterpolatesFrom", "CoverOf", 
      "LyricalReferenceTo", "DirectlySamples",
      "PerformerOf", "ComposerOf", "LyricistOf", "ProducerOf"  #  add back authorship edges
    )
  )

mini_nodes <- mini_nodes %>%  #flag out sailor's work 
  mutate(
    is_sailor_work = id %in% sailor_works_influenced,
    node_color_group = case_when(
      is_sailor_node ~ "Sailor Shift",
      is_sailor_work ~ "Sailor's Work",
      TRUE ~ "Influencer"
    )
  )
```

```{r}
edges_tbl %>%
  filter(
    source == urszula_id,
    target == heartache_id
  )
```

##**4.1 Who has Sailor Shift been most influenced by over time?**

```{r, warning=FALSE}
# Build the graph and plot   
mini_edges_scored <- mini_edges_scored %>%
  mutate(edge_id = row_number())  #  unique row per relationship

graph_tbl <- tbl_graph(nodes = mini_nodes, edges = mini_edges_scored, directed = TRUE)

ggraph(graph_tbl, layout = "fr") +
  
geom_edge_link0(
  aes(color = Edge_Type),
  alpha = 0.8,
  arrow = arrow(length = unit(1.5, 'mm'), type = "closed"),
  end_cap = circle(1.5, 'mm'),
  lineend = "round"
) +

# Node visuals
geom_node_point(aes(
    color = node_category,
    shape = Node_Type
  ), size = 2) +

geom_node_text(
    aes(label = ifelse(id %in% influencer_people_ids, name, NA)),
    size = 3,
    repel = TRUE,
    color = "black" 
  ) +

geom_node_text(
    aes(label = ifelse(is_sailor_node, name, NA)),
    size = 5,
    fontface = "bold",
    color = "black", repel = TRUE
  ) +

geom_node_text(
  aes(label = ifelse(node_category == "Sailor's Work", name, NA)),
  size = 2,
  fontface = "italic",
  color = "blue",
  repel = TRUE
) +
  
scale_color_manual(
    values = c(
      "Influencer" = "grey50",
      "Sailor Shift" = "red",
      "Sailor's Work" = "blue"
    ),
    name = "Node Category"
  ) +

scale_shape_manual(
    values = c("Person" = 15, "MusicalGroup" = 17, "Album" = 16, "Song" = 3),
    name = "Node Type"
  ) +

theme_void() +
theme(
    plot.margin = margin(30, 30, 30, 30), 
  legend.title = element_text(size = 8),     # Title of each legend group
  legend.text = element_text(size = 8)
)
```

Included a printscreen for future reference

![](images/clipboard-3302890628.png)

```{r} 
mini_nodes %>%
  count(name) %>%
  filter(n > 1)
```
```{r}
mini_nodes %>%
  filter(name == "Wei Zhao") %>%
  select(id, name, Node_Type, genre, release_date, everything())
```



Convert to igraph to show multiple edges between nodes. 

```{r}
mini_edges_clean2 <- mini_edges_scored %>%
  mutate(
    source = as.character(source),
    target = as.character(target)
  )

mini_nodes_clean2 <- mini_nodes %>%
  select(-name) %>%       #  Remove name column
  mutate(id = as.character(id)) %>%
  rename(name = id)       #  Rename only ID to `name` for igraph
```

```{r}
ig <- graph_from_data_frame(
  d = mini_edges_clean2 %>% select(source, target, Edge_Type),
  vertices = mini_nodes_clean2,
  directed = TRUE
)

graph_tbl <- as_tbl_graph(ig)
```

```{r}
# igraph conversion using `from` and `to` mapped by `id`
ig <- graph_from_data_frame(
  d = mini_edges_clean2 %>% select(source, target, Edge_Type),
  vertices = mini_nodes_clean2 %>% rename(name = id),
  directed = TRUE
)

graph_tbl <- as_tbl_graph(ig)
```

```{r}
# Build ggraph object
ggraph(graph_tbl, layout = "fr") +
  
  # Show multiple edges using fan layout
  geom_edge_fan(
    aes(color = Edge_Type),
    arrow = arrow(length = unit(1.5, 'mm'), type = "closed"),
    end_cap = circle(1.5, 'mm'),
    alpha = 0.8,
    lineend = "round"
  ) +

  # Node points: color and shape by type/category
  geom_node_point(aes(
    color = node_category,
    shape = Node_Type
  ), size = 2) +

  # Node labels: Influencers
  geom_node_text(
    aes(label = ifelse(node_id %in% influencer_people_ids, name, NA)),
    size = 3,
    repel = TRUE,
    color = "black"
  ) +

  # Node label: Sailor
  geom_node_text(
    aes(label = ifelse(is_sailor_node, name, NA)),
    size = 5,
    fontface = "bold",
    color = "black",
    repel = TRUE
  ) +

  # Node labels: Sailor's Works
  geom_node_text(
    aes(label = ifelse(node_category == "Sailor's Work", name, NA)),
    size = 2,
    fontface = "italic",
    color = "blue",
    repel = TRUE
  ) +

  # Color legend for node category
  scale_color_manual(
    values = c(
      "Influencer" = "grey50",
      "Sailor Shift" = "red",
      "Sailor's Work" = "blue"
    ),
    name = "Node Category"
  ) +

  # Shape legend for node type
  scale_shape_manual(
    values = c("Person" = 15, "MusicalGroup" = 17, "Album" = 16, "Song" = 3),
    name = "Node Type"
  ) +

  theme_void() +
  theme(
    plot.margin = margin(30, 30, 30, 30),
    legend.title = element_text(size = 8),
    legend.text = element_text(size = 8)
  )
```

Ignore all charts below


```{r}
influencer_years <- edges_tbl %>%
  filter(
    Edge_Type %in% c("PerformerOf", "ComposerOf", "ProducerOf", "LyricistOf")
  ) %>%
  left_join(nodes_tbl %>% select(id, release_date), by = c("source" = "id")) %>%
  filter(!is.na(release_date)) %>%
  mutate(
    year = as.integer(format(as.Date(release_date), "%Y")),
    year_block_start = floor(year / 5) * 5,
    year_block = paste0(year_block_start, "-", year_block_start + 4)
  ) %>%
  select(id = target, year_block_start) %>%  # 🟢 ID is now the work (target)
  distinct()
```

```{r}
mini_nodes <- mini_nodes %>%
  left_join(
    influencer_years %>%
      mutate(id = as.character(id)) %>%   # Ensure same type as mini_nodes$id
      select(id, year_block_start) %>%
      distinct(),
    by = "id"
  )
```

```{r}
ui <- fluidPage(
  titlePanel("Sailor Shift's Influence Network by 5-Year Period"),
  
  sidebarLayout(
    sidebarPanel(
      sliderInput(
        "year_block_start",
        label = "Select 5-Year Block:",
        min = min(mini_nodes$year_block_start, na.rm = TRUE),
        max = max(mini_nodes$year_block_start, na.rm = TRUE),
        value = min(mini_nodes$year_block_start, na.rm = TRUE),
        step = 5,
        sep = "",
        animate = animationOptions(interval = 2000, loop = TRUE)
      )
    ),
    
    mainPanel(
      plotOutput("network_plot", height = "800px")
    )
  )
)

server <- function(input, output) {
  output$network_plot <- renderPlot({
    # Filter nodes and edges based on selected time block
    filtered_nodes <- mini_nodes %>%
      filter(year_block_start == input$year_block_start | is.na(year_block_start))
    
    filtered_edges <- mini_edges_scored %>%
      filter(source %in% filtered_nodes$id & target %in% filtered_nodes$id)
    
    # Build tbl_graph
    graph <- tbl_graph(nodes = filtered_nodes, edges = filtered_edges, directed = TRUE)
    
    ggraph(graph, layout = "fr") +
      geom_edge_link(aes(color = Edge_Type, width = influence_level), alpha = 0.4) +
      scale_edge_width_manual(values = c("Low" = 0.5, "Medium" = 2, "High" = 3.5)) +
      geom_node_point(aes(color = node_category, shape = Node_Type), size = 3) +
      geom_node_text(
        aes(label = ifelse(id %in% influencer_people_ids, name, NA)),
        size = 3, color = "black", repel = TRUE
      ) +
      geom_node_text(
        aes(label = ifelse(is_sailor_node, name, NA)),
        size = 5, fontface = "bold", color = "black", repel = TRUE
      ) +
      geom_node_text(
        aes(label = ifelse(node_category == "Sailor's Work", name, NA)),
        size = 2, fontface = "italic", color = "blue", repel = TRUE
      ) +
      scale_color_manual(values = c(
        "Influencer" = "grey50", "Sailor Shift" = "red", "Sailor's Work" = "blue"
      )) +
      scale_shape_manual(values = c("Person" = 15, "MusicalGroup" = 17, "Album" = 16, "Song" = 3)) +
      theme_void()
  })
}

shinyApp(ui, server)
```

```{r}
graph_tbl <- tbl_graph(nodes = mini_nodes, edges = mini_edges_clean, directed = TRUE)

ggraph(graph_tbl, layout = "fr") +
  # Edge links with type coloring
  geom_edge_link(aes(color = Edge_Type), alpha = 0.4) +
  
  # Node points: color by year, size by influence
  geom_node_point(aes(color = as.factor(year), size = influence_score)) +
  scale_size(range = c(0.5, 3), name = "Influence Score") +
  
  # Discrete color scale for year (viridis palette)
  scale_color_viridis_d(name = "Year of Influence") +

  # Text labels for influencers
  geom_node_text(
    aes(label = ifelse(id %in% influencer_people_ids, name, NA)),
    size = 3,
    repel = TRUE,
    color = "black"
  ) +

  # Bold label for Sailor Shift
  geom_node_text(
    aes(label = ifelse(is_sailor_node, name, NA)),
    size = 5,
    fontface = "bold",
    color = "black"
  ) +
  
  theme_void()
```

```{r}
mini_nodes <- mini_nodes %>%
  mutate(
    year_group = paste0(floor(year / 5) * 5, "-", floor(year / 5) * 5 + 4)
  )
```

```{r}
graph_tbl <- tbl_graph(nodes = mini_nodes, edges = mini_edges_clean, directed = TRUE)

ggraph(graph_tbl, layout = "fr") +
  geom_edge_link(aes(color = Edge_Type), alpha = 0.3) +

  geom_node_point(aes(color = year_group, size = influence_score)) +
  scale_size(range = c(0.5, 3), name = "Influence Score") +
  scale_color_viridis_d(name = "5-Year Group") +

  geom_node_text(
    aes(label = ifelse(Node_Type == "Person" & !is.na(name), name, NA)),
    size = 3,
    repel = TRUE,
    color = "black"
  ) +

  theme_void() +
  labs(title = 'Influence Network - Period: {closest_state}') +

  transition_states(year_group, transition_length = 2, state_length = 1) +
  ease_aes('cubic-in-out')
```

```{r}
ggraph(graph_tbl, layout = "fr") +
  
  # Draw edges
  geom_edge_link(aes(color = Edge_Type), alpha = 0.4) +

  # Draw nodes with shape and transparency
  geom_node_point(
    aes(
      color = is_sailor_node,
      size = influence_score,
      shape = Node_Type,
      alpha = ifelse(Node_Type == "Person", 1, 0.2)
    )
  ) +

  # Add node labels for people only
  geom_node_text(
    aes(label = ifelse(Node_Type == "Person" & (is_sailor_node | id %in% influencer_people_ids), name, NA)),
    size = 3,
    repel = TRUE,
    color = "black"
  ) +

  # Size scale for influence score
  scale_size(range = c(1, 4), name = "Influence Score") +

  # Color scale: Sailor Shift (red), Others (grey)
  scale_color_manual(
    values = c("TRUE" = "red", "FALSE" = "grey50"),
    name = NULL,
    labels = c("FALSE" = "Others", "TRUE" = "Sailor Shift")
  ) +

  # Shape legend for node types
  scale_shape_manual(
    values = c("Person" = 16, "Song" = 17, "Album" = 15),
    name = "Node Type"
  ) +

  # Hide alpha from legend
  scale_alpha_continuous(guide = "none") +

  theme_void()
```

\##**4.2 Who has Sailor Shift been most influenced by over time?**

Finding the collaborators:

```{r}
# Step 1: Works which Sailor Shift contributed to
sailor_works <- edges_tbl %>%
  filter(source %in% sailor_ids,
         Edge_Type %in% c("PerformerOf", "ComposerOf", "LyricistOf", "ProducerOf", "MemberOf")) %>%
  pull(target)

# Step 2: Find people who also contributed to the same works
collaborators <- edges_tbl %>%
  filter(target %in% sailor_works,
         Edge_Type %in% c("PerformerOf", "ComposerOf", "LyricistOf", "ProducerOf", "MemberOf"),
         !source %in% sailor_ids) %>%
  left_join(nodes_tbl, by = c("source" = "id")) %>%
  select(source, name, stage_name, genre) %>%
  distinct()
```

Finding people who were directly influenced by Sailor:

```{r}
# Step 1: Works which referenced Sailor's works
influenced_by_sailor <- edges_tbl %>%
  filter(target %in% sailor_works,
         Edge_Type %in% c("InStyleOf", "InterpolatesFrom", "CoverOf",  "LyricalReferenceTo","DirectlySamples")) %>%
  pull(source) %>%
  unique()

# Step 2: Find the people who created the referencing works
influenced_people <- edges_tbl %>%
  filter(source %in% influenced_by_sailor,
         Edge_Type %in% c("PerformerOf", "ComposerOf", "LyricistOf", "ProducerOf", "MemberOf")) %>%
  left_join(nodes_tbl, by = c("source" = "id")) %>%
  select(source, name, stage_name, genre) %>%
  distinct()
```

Finding people who were indirectly influenced by Sailor (i.e. People who created works \> Referencing another work \> Influenced by Sailor's work)

```{r}
# Step 1: Sailor Shift's works
sailor_works <- edges_tbl %>%
  filter(source %in% sailor_ids,
         Edge_Type %in% c("PerformerOf", "ComposerOf", "LyricistOf", "ProducerOf", "MemberOf")) %>%
  pull(target)

# Step 2: Directly influenced works
directly_influenced_works <- edges_tbl %>%
  filter(target %in% sailor_works,
         Edge_Type %in% c("InStyleOf", "CoverOf", "DirectlySamples", "InterpolatesFrom", "LyricalReferenceTo")) %>%
  pull(source)

# Step 3: People who made the directly influenced works
influenced_people_ids <- edges_tbl %>%
  filter(source %in% directly_influenced_works,
         Edge_Type %in% c("PerformerOf", "ComposerOf", "LyricistOf", "ProducerOf", "MemberOf")) %>%
  pull(source) %>%
  unique()

# Step 5: Indirectly influenced works 
indirectly_influenced_works <- edges_tbl %>%
  filter(target %in% directly_influenced_works,
         Edge_Type %in% c("InStyleOf", "CoverOf", "DirectlySamples", "InterpolatesFrom", "LyricalReferenceTo")) %>%
  pull(source)

# Step 6: People behind those indirectly influenced works
indirectly_influenced_people_ids <- edges_tbl %>%
  filter(source %in% indirectly_influenced_works,
         Edge_Type %in% c("PerformerOf", "ComposerOf", "LyricistOf", "ProducerOf", "MemberOf")) %>%
  pull(source) %>%
  unique()
```

```{r}
impact_ids <- unique(c(
  sailor_ids,
  sailor_works,
  collaborator_ids,
  influenced_people_ids,
  indirectly_influenced_people_ids
))

impact_nodes <- nodes_tbl %>%
  filter(id %in% impact_ids) %>%
  mutate(
    role = case_when(
      id %in% sailor_ids ~ "Sailor",
      id %in% collaborator_ids ~ "Collaborator",
      id %in% influenced_people_ids ~ "Influenced (Direct)",
      id %in% indirectly_influenced_people_ids ~ "Influenced (Indirect)",
      TRUE ~ Node_Type  # fallback to actual node type (e.g., "Song" or "Work")
    )
  )
```

```{r}
# Filter to relevant edges
impact_edges <- edges_tbl %>%
  filter(source %in% impact_ids, target %in% impact_ids)

# Map IDs to row indices
id_map <- tibble(id = impact_nodes$id, index = seq_len(nrow(impact_nodes)))

# Join index and clean
impact_edges_clean <- impact_edges %>%
  select(source, target, Edge_Type, key) %>%
  left_join(id_map %>% rename(from = index), by = c("source" = "id")) %>%
  left_join(id_map %>% rename(to = index), by = c("target" = "id")) %>%
  filter(!is.na(from) & !is.na(to))
```

```{r}
# Create graph
impact_graph <- tbl_graph(nodes = impact_nodes, edges = impact_edges_clean, directed = TRUE)

# Plot
impact_graph_filtered <- impact_graph %>%
  filter(role != "Work")

ggraph(impact_graph_filtered, layout = "fr") +  # or "kk"
  geom_edge_link(
    aes(color = Edge_Type),
    alpha = 0.4,
    arrow = arrow(length = unit(3, 'mm')),
    end_cap = circle(2, 'mm')
  ) +
  geom_node_point(aes(color = role), size = 3) +
  geom_node_text(
    aes(label = name),
    size = 3, repel = TRUE, color = "black"
  ) +
  scale_color_manual(
    values = c(
      "Sailor" = "red",
      "Collaborator" = "steelblue",
      "Influenced (Direct)" = "darkgreen",
      "Influenced (Indirect)" = "orange"
    ),
    name = "Node Role"
  ) +
  guides(edge_color = guide_legend(title = "Edge Type")) +
  theme_void() +
  labs(title = "Sailor Shift: Collaborations and Influence Network (People Only)")
```

##\*\*4.3 How has she influenced collaborators of the broader Oceanus Folk community? Find People who have collaborated with Oceanus Folk artists:

```{r}
# Step 1: Get Sailor Shift's works
sailor_works <- edges_tbl %>%
  filter(source %in% sailor_ids,
         Edge_Type %in% c("PerformerOf", "ComposerOf", "LyricistOf", "ProducerOf", "MemberOf")) %>%
  pull(target)

# Step 2: Get works influenced by Sailor’s works
directly_influenced_works <- edges_tbl %>%
  filter(target %in% sailor_works,
         Edge_Type %in% c("InStyleOf", "CoverOf", "DirectlySamples", "InterpolatesFrom", "LyricalReferenceTo")) %>%
  pull(source)

# Step 3: People behind those influenced works
influenced_artists <- edges_tbl %>%
  filter(source %in% directly_influenced_works,
         Edge_Type %in% c("PerformerOf", "ComposerOf", "LyricistOf", "ProducerOf", "MemberOf")) %>%
  pull(source) %>%
  unique()

# Step 4: Collaborators of those influenced artists
influenced_collaborators <- edges_tbl %>%
  filter(source %in% influenced_artists,
         Edge_Type %in% c("PerformerOf", "ComposerOf", "LyricistOf", "ProducerOf", "MemberOf")) %>%
  pull(target) %>%
  unique()

# Step 5: People who contributed to those collaborations
collaborator_people <- edges_tbl %>%
  filter(target %in% influenced_collaborators,
         Edge_Type %in% c("PerformerOf", "ComposerOf", "LyricistOf", "ProducerOf", "MemberOf")) %>%
  pull(source) %>%
  unique()
```

```{r}
# Step 6: Identify Oceanus Folk artists in that group
oceanus_works <- nodes_tbl %>%
  filter(
    is_oceanus_folk,
    Node_Type %in% c("Song", "Album")
  ) %>%
  pull(id)

oceanus_contributors <- edges_tbl %>%
  filter(
    target %in% oceanus_works,
    Edge_Type %in% c("PerformerOf", "ComposerOf", "LyricistOf", "ProducerOf", "MemberOf")
  ) %>%
  pull(source) %>%
  unique()

oceanus_influenced <- nodes_tbl %>%
  filter(
    id %in% oceanus_contributors,
    Node_Type %in% c("Person", "MusicalGroup", "RecordLabel")
  )
```

```{r}
# Step 7: Final list of relevant node IDs
oceanus_ids <- oceanus_influenced$id

influence_chain_ids <- unique(c(
  sailor_ids,
  influenced_artists,
  collaborator_people,
  oceanus_ids
))
```

```{r}
# Step 8: Build node table with roles

sailor_ids <- if (is.null(sailor_ids)) character(0) else sailor_ids
oceanus_ids <- if (is.null(oceanus_ids)) character(0) else oceanus_ids
influenced_artists <- if (is.null(influenced_artists)) character(0) else influenced_artists

influence_chain_nodes <- nodes_tbl %>%
  filter(id %in% influence_chain_ids) %>%
  mutate(role = case_when(
    id %in% sailor_ids ~ "Sailor",
    id %in% oceanus_ids & Node_Type == "Person" ~ "Oceanus Folk - Artist",
    id %in% oceanus_ids & Node_Type == "MusicalGroup" ~ "Oceanus Folk - Group",
    id %in% oceanus_ids & Node_Type == "RecordLabel" ~ "Oceanus Folk - Label",
    id %in% influenced_artists ~ "Influenced",
    TRUE ~ "Collaborator"
  ))

# Step 9: Build edge table
influence_chain_edges <- edges_tbl %>%
  filter(source %in% influence_chain_ids,
         target %in% influence_chain_ids) %>%
  select(source, target, Edge_Type)

# Step 10: Map IDs to indices
id_map <- influence_chain_nodes %>%
  mutate(index = row_number()) %>%
  select(id, index)

influence_chain_edges_clean <- influence_chain_edges %>%
  left_join(id_map %>% rename(from = index), by = c("source" = "id")) %>%
  left_join(id_map %>% rename(to = index), by = c("target" = "id")) %>%
  filter(!is.na(from), !is.na(to))

```

```{r}
# Step 11: Create graph object
influence_graph <- tbl_graph(
  nodes = influence_chain_nodes,
  edges = influence_chain_edges_clean,
  directed = TRUE
)

# Step 12: Remove standalone nodes
influence_graph_cleaned <- influence_graph %>%
  activate(nodes) %>%
  filter(centrality_degree() > 0)

```

```{r}
# Step 13: Plot
ggraph(influence_graph_cleaned, layout = "kk") +
  geom_edge_link(
    aes(color = Edge_Type),
    arrow = arrow(length = unit(3, 'mm')),
    end_cap = circle(2, 'mm'),
    alpha = 0.5
  ) +
  geom_node_point(aes(color = role), size = 3.5) +
  geom_node_text(
    aes(label = name),
    repel = TRUE, size = 3, color = "black"
  ) +
  scale_color_manual(
  values = c(
    "Sailor" = "red",
    "Influenced" = "darkgreen",
    "Collaborator" = "steelblue",
    "Oceanus Folk - Artist" = "purple",
    "Oceanus Folk - Group" = "orchid",
    "Oceanus Folk - Label" = "plum4"
  ),
  name = "Role"
) +
  guides(edge_color = guide_legend(title = "Edge Type")) +
  theme_void() +
  labs(title = "How Sailor Shift influenced collaborators of the broader Oceanus Folk community")
```

```{r}
sailor_node <- influence_graph %>%
  activate(nodes) %>%
  filter(role == "Sailor") %>%
  pull(name)  
```

```{r}
# Convert to igraph object
igraph_obj <- as.igraph(influence_graph)

# Get vertex ID of Sailor
sailor_vid <- which(V(igraph_obj)$name == sailor_node)

# Get all nodes in the same weakly connected component (can go upstream or downstream)
connected_vids <- subcomponent(igraph_obj, sailor_vid, mode = "all")

connected_to_sailor <- influence_graph %>%
  activate(nodes) %>%
  mutate(vertex_id = as.integer(as.factor(name))) %>%
  filter(name %in% V(igraph_obj)[connected_vids]$name)
```

```{r}
ggraph(connected_to_sailor, layout = "kk") +
  geom_edge_link(aes(color = Edge_Type),
                 arrow = arrow(length = unit(3, 'mm')),
                 end_cap = circle(2, 'mm'),
                 alpha = 0.5) +
  geom_node_point(aes(color = role), size = 3.5) +
  geom_node_text(aes(label = name), repel = TRUE, size = 3, color = "black") +
  scale_color_manual(
    values = c(
      "Sailor" = "red",
      "Influenced" = "darkgreen",
      "Collaborator" = "steelblue",
      "Oceanus Folk - Artist" = "purple",
      "Oceanus Folk - Group" = "orchid",
      "Oceanus Folk - Label" = "plum4"
    ),
    name = "Role"
  ) +
  guides(edge_color = guide_legend(title = "Edge Type")) +
  theme_void() +
  labs(title = "Sailor Shift's Influence on the Oceanus Folk Network (Connected Only)")
```
