---
title: "Take-Home Exercise 3"
author: "Belinda Lim"
date: June 11, 2025
date-modified: "last-modified"
format:
  html:
    theme: flatly
    toc: true
editor: source
execute:
  eval: true
  echo: true
  warning: false
  freeze: true
---

# 1 Overview

This exercise will target to answer one of the three challenges from [VAST 2025](https://vast-challenge.github.io/2025/index.html) which features a fictitious island nation, Oceanus, famous for fishing and quiet seaside communities.

The chosen challenge is [Mini-Challenge 1](https://vast-challenge.github.io/2025/MC1.html).

Our team (comprising Calvin Tan and Goh Yi Fang) embarked on a collaborative approach where each of us will attempt all questions and compare our findings. The best approach to each question will be chosen. For Take Home Exercise 3, Yi Fang will take Question 1, I will take Question 2 and Calvin will take Question 3 to further develop the storyboard and prototype for our Shiny App.

## 1.1 Background

One of music’s biggest superstars is Oceanus native Sailor Shift. From humble beginnings, Sailor has grown in popularity and now enjoys fans around the world. Sailor started her career on the island nation of Oceanus which can be clearly seen in her early work, she started in the genre of “Oceanus Folk”. While Sailor has moved away from the traditional Oceanus style, the Oceanus Folk has made a name for itself in the musical world. The popularity of this music is one of the factors driving an increase in tourism to a quiet island nation that used to be known for fishing.

In 2023, Sailor Shift joined the Ivy Echoes – an all-female Oceanus Folk band consisting of Sailor (vocalist), Maya Jensen (vocalist), Lila “Lilly” Hartman (guitarist), Jade Thompson (drummer), and Sophie Ramirez (bassist). They played together at venues throughout Oceanus but had broken up to pursue their individual careers by 2026. Sailor’s breakthrough came in 2028 when one of her singles went viral, launched to the top of the global charts (something no other Oceanus Folk song had ever done). Since then, she has only continued to grow in popularity worldwide.

Sailor has released a new album almost every year since her big break, and each has done better than the last. Although she has remained primarily a solo artist, she has also frequently collaborated with other established artists, especially in the Indie Pop and Indie Folk genres. She herself has branched out musically over the years but regularly returns to the Oceanus Folk genre — even as the genre’s influence on the rest of the music world has spread even more.

Sailor has always been passionate about two things: (1) spreading Oceanus Folk, and (2) helping lesser-known artists break into music. Because of those goals, she’s particularly famous for her frequent collaborations.

Additionally, because of Sailor’s success, more attention began to be paid over the years to her previous bandmates. All 4 have continued in the music industry—Maya as an independent vocalist, Lilly and Jade as instrumentalists in other bands, and Sophie as a music producer for a major record label. In various ways, all of them have contributed to the increased influence of Oceanus folk, resulting in a new generation of up-and-coming Oceanus Folk artists seeking to make a name for themselves in the music industry.

Now, as Sailor returns to Oceanus in 2040, a local journalist – Silas Reed – is writing a piece titled Oceanus Folk: Then-and-Now that aims to trace the rise of Sailor and the influence of Oceanus Folk on the rest of the music world. He has collected a large dataset of musical artists, producers, albums, songs, and influences and organized it into a knowledge graph. Your task is to help Silas create beautiful and informative visualizations of this data and uncover new and interesting information about Sailor’s past, her rise to stardom, and her influence.

## 1.2 Tasks and Questions

2.  Develop visualizations that illustrate how the influence of Oceanus Folk has spread through the musical world.

    -   Was this influence intermittent or did it have a gradual rise?
    -   What genres and top artists have been most influenced by Oceanus Folk?
    -   On the converse, how has Oceanus Folk changed with the rise of Sailor Shift? From which genres does it draw most of its contemporary inspiration?

## 1.3 Data Source

The data for this exercise is from [VAST 2025 MC1](https://github.com/vast-challenge/2025-data/blob/main/MC1_release.zip).

## 1.4 Data Description

**Graph Description**

-   Directed Multigraph
-   Number of nodes: 17,412
-   Number of edges: 37,857
-   18 connected components
-   Possible node types are: {Person, Song, RecordLabel, Album, MusicalGroup}
-   Possible edge types are: {MemberOf, PerformerOf, ComposerOf, ProducerOf, LyricistOf, InStyleOf, InterpolatesFrom, CoverOf, LyricalReferenceTo, DirectlySamples, RecordedBy, DistributedBy}
-   The graph format is a JSON file. The root-level JSON object consists of graph-level properties specifying that it is directed and a multigraph, a “nodes” key which holds the list of nodes, and a “links” key which holds the list of edges.

The data for this challenge comes from two different sources:

-   an online, crowdsourced repository of musical influence, where contributors have manually notated instances in which songs or albums have sampled, covered, or otherwise drawn inspiration from previous work.
-   aggregate-level descriptions of song popularity, as labeled by our journalist, Silas Reed. These notations (notable and notoriety_date) are directly based on both the number of sales and streams that the song/album has achieved as well as the whether or not the work landed on a top record chart.

## 1.5 Install and Load the Required Libraries

The following libraries are used in this exercise and the code below loads them into the working environment.

Utility Tools

-   jsonlite: To parse JSON
-   tidyverse - Data science tools
-   ggtext - Tools for text formatting
-   knitr - For better table displays
-   lubridate - For processing date and time
-   kableExtra - For tabular properties

Graphing Tools

-   patchwork - For combining ggplot plots
-   ggraph - For plotting network data
-   tidygraph - For graph manipulations
-   igraph - Contains functions for network analysis
-   ggiraph - Interactive plots
-   plotly - Professional visualisations

```{r}
#| code-fold: true
#| code-summary: "Show Code"
pacman::p_load(jsonlite, tidyverse, ggtext,
                knitr, lubridate, patchwork,
                ggraph, tidygraph, igraph,
                ggiraph, kableExtra, plotly)
```

## 1.6 Importing Data

For the purpose of this exercise, a data file called *MC1_graph* will be used. The code below imports *MC1_graph.json* into R environment by using *fromJSON()* function of *jsonlite* package.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_data <- fromJSON("data/MC1_graph.json")
glimpse(mc1_data)
```

# 2 Data Pre-Processing

## 2.1 Split into Nodes and Edges

The *mc1_data.json* data file provided by VAST 2025 for Mini-Challenge 1 consists of both nodes and links. The following codes will be used to split them into individual files for easier data matriculation.

### 2.1.1 Get Nodes

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_nodes_raw <- as_tibble(mc1_data$nodes)

glimpse(mc1_nodes_raw)
```

The first 5 rows of *mc1_nodes_raw* are shown below.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
kable(head(mc1_nodes_raw, 5))
```

### 2.1.2 Get Edges

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_edges_raw <- as_tibble(mc1_data$links)

glimpse(mc1_edges_raw)
```

The first 5 rows of *mc1_edges_raw* are shown below.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
kable(head(mc1_edges_raw, 5))
```

## 2.2 Adding Identifying Columns

There are 2 columns that provides information on names, the *name* and *stage_name* column. The code below shows that the *name* column is the one that contains information on our target of interest Sailor Shift.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
kable(mc1_nodes_raw %>%
  filter(grepl("Sailor Shift", name))) #Sailor Shift is in name column and not in stage_name column

kable(mc1_nodes_raw %>%
  filter(grepl("Ivy Echos", name))) #Ivy Echos is also in name column and not in stage_name column
```

Identifying columns for Sailor Shift, Ivy Echos and Oceanus Folk are added to aid in the identification and filtering of these key variables for further analysis.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_nodes_raw <- mc1_nodes_raw %>%
  mutate(
    is_sailor = (
      str_detect(name, regex("sailor shift", ignore_case = TRUE))
    ) %>% replace_na(FALSE),
    is_ivy = (
      str_detect(name, regex("ivy echos", ignore_case = TRUE))
    ) %>% replace_na(FALSE),
    is_oceanus_folk = str_detect(genre, regex("oceanus folk", ignore_case = TRUE)) %>% #na/not oceanus folk = false
      replace_na(FALSE)
  )

kable(head(mc1_nodes_raw,5))
```

## 2.3 Convert Date Fields

The columns related to date are in *char* format and will be converted to *int* using the code below.

Note: Dates only appears in Songs and Albums.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_nodes_raw <- mc1_nodes_raw %>%
  mutate(across(c(release_date, notoriety_date, written_date),
                ~as.integer(if_else(`Node Type` %in% c("Song", "Album"), ., NA_character_))))
```

## 2.4 Check for Duplicates

### 2.4.1 Duplicates in Nodes

For Nodes, there are no duplicated *id*.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_nodes_raw %>%
  count(id) %>%
  filter(n > 1)
```

But, there are many duplicated records in the *name* column.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
duplicated_name <- mc1_nodes_raw %>%
  count(name) %>%
  filter(n > 1)

kable(head(duplicated_name,5))

cat("Total number of duplicated name:", sum(duplicated_name$n), "\n")
```

The table below shows some of the duplicated *name*.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_nodes_raw %>%
  filter(name %in% duplicated_name$name) %>%
  arrange(name) %>%
  kable() %>%
  kable_styling("striped", full_width = F) %>% 
  scroll_box(height = "200px")
```

#### 2.4.1 Fixing Duplicates in Nodes

The code below marks all node rows with a hash key for grouping.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_nodes_tagged <- mc1_nodes_raw %>%
  mutate(group_key = paste(`Node Type`, name, single, release_date, genre,
                           notable, written_date, notoriety_date, is_sailor,
                           is_oceanus_folk, sep = "|"))

kable(head(mc1_nodes_tagged,5))
```

The following code removes duplicates in *name* and checks for remaining duplicates. This step reduced the number of duplicated *name* from 4,953 to 14 records.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Step 2: De-duplicate and keep the preferred (with stage_name if available)
mc1_nodes_dedup <- mc1_nodes_tagged %>%
  group_by(group_key) %>%
  arrange(desc(!is.na(stage_name))) %>%
  slice(1) %>%
  ungroup()

duplicated_name <- mc1_nodes_dedup %>%
  count(name) %>%
  filter(n > 1)

cat("Remaining number of duplicated name:", sum(duplicated_name$n), "\n")
```

The table displays remaining nodes that appear duplicated but are actually unique, differentiated by specific columns. This affects Song, Album, and Record Label node types.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_nodes_dedup %>%
  filter(name %in% duplicated_name$name) %>%
  arrange(name) %>%
  kable() %>%
  kable_styling("striped", full_width = F) %>% 
  scroll_box(height = "200px")
```

### 2.4.2 Duplicates in Edges

For Edges, there are duplicates but only their *key* are different. Since, information on *key* is not provided by [VAST 2025 MC1](https://github.com/vast-challenge/2025-data/blob/main/MC1_release.zip), its purpose cannot be determined. Therefore, the *key* column will be redundant and duplicated edges differing only by their *key* will be removed.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Step 1: Identify duplicate combinations
duplicate_summary <- mc1_edges_raw %>%
  count(source, target, `Edge Type`) %>%
  filter(n > 1)

# Step 2: Join back to get all original duplicate rows
mc1_edges_raw %>%
  inner_join(duplicate_summary, by = c("source", "target", "Edge Type")) %>%
  kable()
```

All duplicates are removed using the code below and a check was performed to show that no duplicated edges remains.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_edges_raw <- mc1_edges_raw %>%
  distinct(source, target, `Edge Type`, .keep_all = TRUE) %>%
  select(!key)

mc1_edges_raw %>%
  count(source, target, `Edge Type`) %>%
  filter(n > 1)
```

# 3 Exploratory Data Analysis (EDA)

## 3.1 Explore Nodes and Edges range

The *source* and *target* columns seems to refer to the *id* column in nodes. The code below is used to confirm this assumption since they have the same range.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
range(mc1_nodes_dedup$id)

range(mc1_edges_raw$source)

range(mc1_edges_raw$target)
```

## 3.2 Mapping Node name to Edges id

tidygraph uses the *from* and *to* columns in the edges and matches them with the *name* column in nodes. Currently, the *source* and *target* columns in edges contains the *id* matches to the *id* column in nodes. This is the wrong syntax for tidygraph because edges need to match the *name* column in nodes.

Therefore, the *name* column in nodes needs to contain the *id* values in the *id* column. This can be done by renaming the *name* column to *node_name* and then rename *id* column to *name* to match the *source* and *target* columns in the edges. And then rename the *source* and *target* columns to *from* and *to* respectively.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_nodes_clean <- mc1_nodes_dedup %>%
  rename(node_name = name, name = id) %>%
  mutate(name = as.character(name)) %>%
  select(`Node Type`, node_name, release_date, genre, notable, name, single, written_date, stage_name, notoriety_date, is_sailor, is_ivy, is_oceanus_folk)

kable(head(mc1_nodes_clean,5))
```

### 3.2.1 Create Edge Mapping from original id to Kept id

However, this is not enough because in [Section 2.4](https://isss608-ay2024-25t3.netlify.app/take-home_ex/take-home_ex02/take-home_ex02_mc1_main_v5#check-for-duplicates), duplicated Nodes and their respective *id* (now called *name*) were removed. Therefore, without treating edges, there will be edges that do not have a match to nodes since they are matching the removed *id*.

The code below maps the *original_id* to the *kept_id* in preparation for the next step.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Step 1: Create mapping of all group_key → kept id
key_to_id_map <- mc1_nodes_dedup %>%
  select(group_key, kept_id = id)

# Step 2: Map all original rows to the retained ID
id_remap <- mc1_nodes_tagged %>%
  left_join(key_to_id_map, by = "group_key") %>%
  select(original_id = id, kept_id)

kable(head(id_remap,5))
```

This step adds the *kept_id* column to the edge data.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Step 3: Replace edges' source and target with mapped kept_id
mc1_edges_mapped <- mc1_edges_raw %>%
  left_join(id_remap, by = c("source" = "original_id"))

kable(head(mc1_edges_mapped,5))
```

Next, the *source* is replaced by the *kept_id*. This is also repeated for *target*.

Lastly, the *source* and *target* columns are then renamed *from* and *to* respectively to follow tidygraph syntax.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_edges_mapped <- mc1_edges_mapped %>%
  mutate(source = kept_id) %>%
  select(-kept_id) %>%
  left_join(id_remap, by = c("target" = "original_id")) %>%
  mutate(target = kept_id) %>%
  select(-kept_id) %>%
  rename(from = source, to = target) %>%
  mutate(from = as.character(from), to = as.character(to))

kable(head(mc1_edges_mapped,5))
```

## 3.3 Filter out any unmatched (invalid) edges

This step removes any null values in edges.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_edges_clean <- mc1_edges_mapped %>%
  filter(!is.na(from), !is.na(to))
```

## 3.4 Check for any missing nodes

This steps looks for any unmatched nodes and edges and the result shows that all nodes have matching edges and vice versa.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
setdiff(
  unique(c(mc1_edges_clean$from, mc1_edges_clean$to)),
  mc1_nodes_clean$name
)
```

## 3.5 Checking Edges Schema

The code below defines valid source and destination types for each edge type as per the [VAST 2025 MC1](https://github.com/vast-challenge/2025-data/blob/main/MC1_release.zip) Data Description file provided.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Define valid source and destination types for each edge type
edge_rules <- list(
  PerformerOf = list(source = c("Person", "MusicalGroup"), target = c("Song", "Album")),
  ComposerOf = list(source = c("Person"), target = c("Song", "Album")),
  ProducerOf = list(source = c("Person", "RecordLabel"), target = c("Song", "Album", "Person", "MusicalGroup")),
  LyricistOf = list(source = c("Person"), target = c("Song", "Album")),
  RecordedBy = list(source = c("Song", "Album"), target = c("RecordLabel")),
  DistributedBy = list(source = c("Song", "Album"), target = c("RecordLabel")),
  InStyleOf = list(source = c("Song", "Album"), target = c("Song", "Album", "Person", "MusicalGroup")),
  InterpolatesFrom = list(source = c("Song", "Album"), target = c("Song", "Album")),
  CoverOf = list(source = c("Song", "Album"), target = c("Song", "Album")),
  LyricalReferenceTo = list(source = c("Song", "Album"), target = c("Song", "Album")),
  DirectlySamples = list(source = c("Song", "Album"), target = c("Song", "Album")),
  MemberOf = list(source = c("Person"), target = c("MusicalGroup"))
)
```

Using the rules defined above, the code below checks for erroneous edge and node relationships and shows that there are multiple invalid edges.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Create a lookup for node types
node_type_lookup <- mc1_nodes_clean %>%
  select(name, `Node Type`) %>%
  deframe()

# Add source and target node types to the edge table
mc1_edges_checked <- mc1_edges_clean %>%
  mutate(
    source_type = node_type_lookup[from],
    target_type = node_type_lookup[to]
  )

mc1_edges_tagged <- mc1_edges_checked %>%
  rowwise() %>%
  mutate(
    valid = {
      rule <- edge_rules[[`Edge Type`]]
      if (is.null(rule)) TRUE
      else {
        source_type %in% rule$source && target_type %in% rule$target
      }
    }
  ) %>%
  ungroup()

# Count and display invalid edge combinations
invalid_edge_summary <- mc1_edges_tagged %>%
  filter(!valid) %>%
  count(`Edge Type`, source_type, target_type, sort = TRUE)

kable(head(invalid_edge_summary,5))
```

In total, there are 550 invalid edges.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Check total invalid edge count
cat("Total invalid edges:", sum(!mc1_edges_tagged$valid), "\n")
```

Finally, the invalid edges are removed.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Keep only valid edges
mc1_edges_clean <- mc1_edges_tagged %>%
  filter(valid) 

cat("Total invalid edges:", sum(!mc1_edges_clean$valid), "\n")

mc1_edges_clean <- mc1_edges_clean %>%
  select(from, to, `Edge Type`)  # drop helper columns
```

## 3.6 Visualising Edge Types

The most common edge type is PerformerOf.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
ggplot(data = mc1_edges_clean,
       aes(y = `Edge Type`)) +
  geom_bar()
```

## 3.7 Visualising Node Types

The most common node type is Person.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
ggplot(data = mc1_nodes_clean,
       aes(y = `Node Type`)) +
  geom_bar()
```

## 3.8 Creating Infomative Columns

The code below groups different types of edges and nodes into broader categories for consistent visualisation colouring.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_edges_clean <- mc1_edges_clean %>%
  mutate(`Edge Colour` = case_when(
    `Edge Type` %in% c("PerformerOf", "ComposerOf", "ProducerOf", "LyricistOf", "RecordedBy", "DistributedBy") ~ "Creator Of",
    `Edge Type` %in% c("InStyleOf", "InterpolatesFrom", "CoverOf", "LyricalReferenceTo", "DirectlySamples") ~ "Influenced By",
    `Edge Type` == "MemberOf" ~ "Member Of",
    TRUE ~ "Other"
  ))

mc1_nodes_clean <- mc1_nodes_clean %>%
  mutate(
    `Node Colour` = case_when(
      `Node Type` %in% c("Person", "MusicalGroup", "RecordLabel") ~ "Musician",
      genre == "Oceanus Folk" ~ "Oceanus Folk",
      TRUE ~ "Other Genre"
    )
  )
```

## 3.9 Creating the Global Knowledge Graph

The code below uses `tbl_graph()` to create a tidygraph's graph object.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
graph = tbl_graph(edges = mc1_edges_clean,
                             nodes = mc1_nodes_clean,
                             directed = TRUE)
```

Since several of the ggraph layouts involve randomisation, this code sets the seed value to ensure reproducibility of all the plots.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
set.seed(1234)
```

# 4 VAST 2025 MC1 Question 1

Design and develop visualizations and visual analytic tools that will allow Silas to explore and understand the profile of Sailor Shift’s career.

::: callout-warning
# Note

This analysis examines Sailor Shift's work during her solo artist career, excluding her initial collaborative period with Ivy Echos.

Future work: What if we make everything into a function and find members that the person is part of and use a while loop to get everything so it includes all groups that the person is a part of?
:::

## 4.1 Visualising Sailor Shift's Music

The analysis begins by extracting Sailor Shift's *name* from the node dataset. Following this, all outgoing edges originating from her node are identified. The resulting nodes from those edges are filtered to isolate only those classified as Songs and Albums, thereby displaying her musical career.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Step 0: Get name of 'Sailor Shift'
sailor_vertex_name <- mc1_nodes_clean %>%
  filter(is_sailor == TRUE) %>%
  pull(name)

# Step 1: Find outgoing edges from Sailor Shift
sailor_out_edges <- mc1_edges_clean %>%
  filter(from == sailor_vertex_name)

# Step 2: Identify neighbour node names
sailor_out_node_names <- sailor_out_edges$to

# Step 4: Identify songs/albums
sailor_music_all <- mc1_nodes_clean %>%
  filter(name %in% sailor_out_node_names, `Node Type` %in% c("Song", "Album")) %>%
  pull(name)

# Step 5: Build subgraph using names
sub_nodes <- unique(c(sailor_vertex_name, sailor_music_all))

sub_graph <- graph %>%
  activate(nodes) %>%
  filter(name %in% sub_nodes)



# Visualisation

g <- sub_graph %>%
  ggraph(layout = "fr") + 
  geom_edge_fan(
    aes(
      edge_colour = `Edge Colour`,
      start_cap = circle(1, 'mm'),
      end_cap = circle(1, 'mm')
      ),
    arrow = arrow(length = unit(1, 'mm')),
    alpha = 0.3
  ) +
  geom_point_interactive(
    aes(
      x = x,
      y = y,
      data_id = name,
      colour = `Node Colour`,
      shape = `Node Type`,
      size = ifelse(node_name %in% c("Sailor Shift", "Ivy Echos", "Wei Zhao"), 3, 1),
      tooltip = case_when(
        `Node Type` == "Album" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)", node_name, genre, notable, release_date
        ),
        `Node Type` == "Song" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)<br/>Single: %s", node_name, genre, notable, release_date, single
        ),
        TRUE ~ sprintf("%s", node_name)
      )
    ),
    show.legend = c(size = FALSE)
  )+ 
  geom_node_text(
    aes(
      label = ifelse(node_name == "Sailor Shift", "Sailor Shift",
              ifelse(node_name == "Ivy Echos", "Ivy Echos",
              ifelse(node_name == "Wei Zhao", "Wei Zhao", NA)))
    ),
    fontface = "bold",
    size = 2.5,
    colour = 'red',
    show.legend = FALSE
  ) +
  scale_shape_manual(
    name = "Node Type",
    values = c(
      "Album" = 16,
      "MusicalGroup" = 15,
      "Person" = 17,
      "Song" = 10
    )
  ) +
  scale_edge_colour_manual(
    name = "Edge Colour",
    values = c(
      `Creator Of` = "#47D45A",
      `Influenced By` = "#FF5757",
      `Member Of` = "#CF57FF"
    )
  ) +
  scale_colour_manual(
    name = "Node Colour",
    values = c(
      "Musician" = "grey50",
      "Oceanus Folk" = "#0027EA",
      "Other Genre" = "#A45200"
    )
  ) +
  theme_graph() +
  theme(legend.text = element_text(size = 6),
        legend.title = element_text(size = 9)) +
  scale_size_identity()

girafe(ggobj = g, width_svg = 7, height_svg = 6)
```

::: callout-tip
## Sailor Shift's Music Insights

-   In total, Sailor Shift released 38 Songs and Albums from 2024 to 2040
-   Details on the Songs and Albums can be found in the table below
-   Sailor Shift released 4 Songs in 2028
    -   Among those, only 1 is a Single
    -   Therefore, the viral Song that spark her breakthrough is **High Tide Heartbeat**
-   Among her Songs and Albums, 36 belong to the Oceanus Folk genre, while there is 1 Americana and 1 Synthwave Album each.
:::

```{r}
#| code-fold: true
#| code-summary: "Show Code"

mc1_nodes_clean %>%
  filter(name %in% sailor_music_all) %>%
  arrange(release_date) %>%
  select(`Node Type`, node_name, release_date, genre, notable, single, notoriety_date) %>%
  kable() %>%
  kable_styling("striped", full_width = F) %>% 
  scroll_box(height = "300px")
```
