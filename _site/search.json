[
  {
    "objectID": "Take-home_Ex/Take-home_Ex01b/Take-home_Ex01b.html",
    "href": "Take-home_Ex/Take-home_Ex01b/Take-home_Ex01b.html",
    "title": "Take-home Exercise 1b: Data Visualisation Makeover",
    "section": "",
    "text": "Under Take-home Exercise 1b, we are required to select one submission from our classmate for Take-home Exercise 1 to critic 3 good design principles and 3 areas for further improvements. With reference to the comments, we will provide a makeover of the data visualisation.\n\n\n\nUnder the article published by Ben Jones, he shared the following framework to gauge the objective and subjective merits of a data visualisation. It will be used to review my classmate’s submission (see link to original page).The submission was selected as the charts can be classified into the Quadrant II, III and IV:\n\nQuadrant I = [clear, beautiful]\nQuadrant II = [clear, ugly]\nQuadrant III = [confusing, ugly]\nQuadrant IV = [confusing, beautiful]"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01b/Take-home_Ex01b.html#overview",
    "href": "Take-home_Ex/Take-home_Ex01b/Take-home_Ex01b.html#overview",
    "title": "Take-home Exercise 1b: Data Visualisation Makeover",
    "section": "",
    "text": "Under Take-home Exercise 1b, we are required to select one submission from our classmate for Take-home Exercise 1 to critic 3 good design principles and 3 areas for further improvements. With reference to the comments, we will provide a makeover of the data visualisation."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01b/Take-home_Ex01b.html#framework-for-gauging-data-visualisation",
    "href": "Take-home_Ex/Take-home_Ex01b/Take-home_Ex01b.html#framework-for-gauging-data-visualisation",
    "title": "Take-home Exercise 1b: Data Visualisation Makeover",
    "section": "",
    "text": "Under the article published by Ben Jones, he shared the following framework to gauge the objective and subjective merits of a data visualisation. It will be used to review my classmate’s submission (see link to original page).The submission was selected as the charts can be classified into the Quadrant II, III and IV:\n\nQuadrant I = [clear, beautiful]\nQuadrant II = [clear, ugly]\nQuadrant III = [confusing, ugly]\nQuadrant IV = [confusing, beautiful]"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01b/Take-home_Ex01b.html#loading-of-libraries-and-data-pre-processing-based-on-classmates-codes",
    "href": "Take-home_Ex/Take-home_Ex01b/Take-home_Ex01b.html#loading-of-libraries-and-data-pre-processing-based-on-classmates-codes",
    "title": "Take-home Exercise 1b: Data Visualisation Makeover",
    "section": "2.1 Loading of libraries and data pre-processing based on classmate’s codes",
    "text": "2.1 Loading of libraries and data pre-processing based on classmate’s codes\n\nlibrary(\"pacman\")\nsuppressWarnings(library(\"lubridate\"))\nlibrary(readr)\n\n\npacman::p_load(tidyverse, readxl, \n               janitor, lubridate, \n               ggplot2, ggthemes, \n               scales, ggridges, \n               ggdist, patchwork)\n\n\nResident_Data &lt;- read.csv(\"data/Resident_Data.csv\")\n\n\nglimpse(Resident_Data)\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;int&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;int&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n\n\n\nResident_Data[duplicated(Resident_Data),]\n\n[1] PA   SZ   Age  Sex  Pop  Time\n&lt;0 rows&gt; (or 0-length row.names)\n\n\nNote that my classmate has renamed SZ to Subzone and created two additional columns AG (Age Group) and FA (Functional Age) as shown in my classmate’s website (see extract in the Figure below). To ensure that the charts are reproducible, the data pre-processing steps and codes should be spelt out.\nFigure 1: Extracts from classmate’s website"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01b/Take-home_Ex01b.html#bar-chart-based-on-population-area",
    "href": "Take-home_Ex/Take-home_Ex01b/Take-home_Ex01b.html#bar-chart-based-on-population-area",
    "title": "Take-home Exercise 1b: Data Visualisation Makeover",
    "section": "2.2 Bar chart based on Population Area",
    "text": "2.2 Bar chart based on Population Area\n\n2.2.1 Original Chart\nThe original chart is reproduced below using the codes provided by my classmate.\n\nfiltered_data &lt;- Resident_Data[!is.na(Resident_Data$Pop) & Resident_Data$Pop &gt; 0, ]\n\nggplot(data = filtered_data, aes(x = reorder(`PA`, Pop), y = Pop)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +\n  labs(\n    title = \"Population by Planning Area (Singapore, 2024)\",\n    x = \"Planning Area\",\n    y = \"Population\"\n  ) +\n  scale_y_continuous(labels = comma) +\n  theme_minimal(base_size = 20) +  # Increase base font size\n  \n  theme(\n    plot.title = element_text(size = 18, face = \"bold\"),\n    axis.text.y = element_text(size = 15),\n    axis.text.x = element_text(size = 10),\n    plot.margin = margin(1, 1, 1, 1, \"cm\")  # Add breathing space\n  )\n\n\n\n\n\n\n\n\nHowever, the chart produced did not look like the one published on my classmate’s website:\nFigure 2: Extracts from classmate’s website \nThe chart can be classified under Quadrant II = [clear, ugly]. The bar chart summarised the population numbers for all PA in Singapore clearly with a well-labelled x-axis scale.\nTo improve the chart, it is recommended to:\n\nSort bar chart by population numbers\nRemove x-axis and y-axis label since the information is found in the chart title.\nAdjust size of the x-axis numbers and add more intervals for the ticks\nAdjust size of the title\nRemove plot margins to allow chart to be bigger\n\n\n\n2.2.2 Makeover of Original Chart\n\nfiltered_data &lt;- Resident_Data %&gt;%\n  filter(!is.na(Pop) & Pop &gt; 0) %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\")\n\nggplot(data = filtered_data, aes(x = reorder(PA, Pop), y = Pop)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +\n  labs(\n    title = \"Population Numbers by Planning Areas (Singapore, 2024)\",\n    x = NULL,  \n    y = NULL   \n  ) +\n  scale_y_continuous(breaks = c(0, 50000, 100000, 150000, 200000, 250000, 300000), labels = comma) +\n  theme_minimal(base_size = 16) +\n  theme(\n    plot.title = element_text(size = 12, face = \"bold\"),\n    axis.text.y = element_text(size = 8),   \n    axis.text.x = element_text(size = 8)\n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01b/Take-home_Ex01b.html#pyramid-bar-chart-based-on-population-area",
    "href": "Take-home_Ex/Take-home_Ex01b/Take-home_Ex01b.html#pyramid-bar-chart-based-on-population-area",
    "title": "Take-home Exercise 1b: Data Visualisation Makeover",
    "section": "2.3 Pyramid Bar chart based on Population Area",
    "text": "2.3 Pyramid Bar chart based on Population Area\n\n2.3.1 Original Chart\nThe attempt to reproduce the original chart using the code below has failed:\n\npyramid_data \\&lt;- aggregate(Pop \\~ `AG` + Sex, data = Resident_Data, sum)\n\nage_order \\&lt;- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\")\n\npyramid_data$AG &lt;- factor(pyramid_data$AG, levels = age_order)\n\npyramid_data$Pop[pyramid_data$Sex == \"Males\"\\] \\&lt;- -pyramid_data$Pop[pyramid_data$Sex == \"Males\"\\]\n\nggplot(data = pyramid_data, aes(x = AG, y = Pop, fill = Sex)) + geom_bar(stat = \"identity\") + coord_flip() + labs(title = \"Population Pyramid (2024)\", x = \"Age Group\", y = \"Population\") + scale_y_continuous(labels = comma) + scale_fill_manual(values = c(\"skyblue\", \"salmon\")) + theme_minimal() + theme(axis.text.y = element_text(size = 10))\n\nA check was done on the column names.\n\ncolnames(Resident_Data)\n\n[1] \"PA\"   \"SZ\"   \"Age\"  \"Sex\"  \"Pop\"  \"Time\"\n\n\nThere was an error as the original data does not have AG (or Age Group) but AG was cited in the codes above.\nTo rectify, the following codes for AG column were inserted\n\nResident_Data &lt;- Resident_Data %&gt;%\n  mutate(\n    Age = recode(Age, \"90_and_Over\" = \"90\"),  \n    Age = as.numeric(Age),                    \n    Pop = as.numeric(Pop)                     \n  )\n\n\n  Resident_Data &lt;- Resident_Data %&gt;%\n  mutate(\n    AG = case_when(\n      Age &gt;= 0 & Age &lt;= 4 ~ \"0_to_4\",\n      Age &gt;= 5 & Age &lt;= 9 ~ \"5_to_9\",\n      Age &gt;= 10 & Age &lt;= 14 ~ \"10_to_14\",\n      Age &gt;= 15 & Age &lt;= 19 ~ \"15_to_19\",\n      Age &gt;= 20 & Age &lt;= 24 ~ \"20_to_24\",\n      Age &gt;= 25 & Age &lt;= 29 ~ \"25_to_29\",\n      Age &gt;= 30 & Age &lt;= 34 ~ \"30_to_34\",\n      Age &gt;= 35 & Age &lt;= 39 ~ \"35_to_39\",\n      Age &gt;= 40 & Age &lt;= 44 ~ \"40_to_44\",\n      Age &gt;= 45 & Age &lt;= 49 ~ \"45_to_49\",\n      Age &gt;= 50 & Age &lt;= 54 ~ \"50_to_54\",\n      Age &gt;= 55 & Age &lt;= 59 ~ \"55_to_59\",\n      Age &gt;= 60 & Age &lt;= 64 ~ \"60_to_64\",\n      Age &gt;= 65 & Age &lt;= 69 ~ \"65_to_69\",\n      Age &gt;= 70 & Age &lt;= 74 ~ \"70_to_74\",\n      Age &gt;= 75 & Age &lt;= 79 ~ \"75_to_79\",\n      Age &gt;= 80 & Age &lt;= 84 ~ \"80_to_84\",\n      Age &gt;= 85 & Age &lt;= 89 ~ \"85_to_89\",\n      Age &gt;= 90 ~ \"90_and_over\",\n      TRUE ~ NA_character_\n    )\n  )\n\nThe orignal code can now be reproduced:\n\npyramid_data &lt;- aggregate(Pop ~ `AG` + Sex, data = Resident_Data, sum)\n\nage_order &lt;- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\", \n               \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\", \n               \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \n               \"90_and_over\")\n\npyramid_data$AG &lt;- factor(pyramid_data$AG, levels = age_order)\n\npyramid_data$Pop[pyramid_data$Sex == \"Males\"] &lt;- -pyramid_data$Pop[pyramid_data$Sex == \"Males\"]\n\nggplot(data = pyramid_data, aes(x = AG, y = Pop, fill = Sex)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Population Pyramid (2024)\", x = \"Age Group\", y = \"Population\") +\n  scale_y_continuous(labels = comma) +\n  scale_fill_manual(values = c(\"skyblue\", \"salmon\")) + \n  theme_minimal() +\n  theme(axis.text.y = element_text(size = 10))\n\n\n\n\n\n\n\n\nThe chart is an age pyramid which illustrated the age structure of Singapore’s population well and it is in sync with my classmate’s data storytelling insights.\nHowever, the age pyramid can be classified under Quadrant IV = [confusing, beautiful]. This is because males are coded as red and females are coded as blue. There is also a negative number in the x-axis for population.\nTo improve the chart, it is recommended to:\n\nSwop the colour code for gender\nUpdate the scale to be positive number\nCompress the chart.\n\n\n\n2.3.2 Makeover of Original Chart\n\nggplot(data = pyramid_data, aes(x = AG, y = Pop, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.9) +\n  coord_flip() +\n  labs(title = \"Population Pyramid (2024)\", x = \"Age Group\", y = \"Population\") +\n  scale_y_continuous(labels = function(x) comma(abs(x))) +\n  scale_fill_manual(values = c(\"Males\" = \"skyblue\", \"Females\" = \"salmon\")) +\n  theme_minimal() +\n  theme(\n    axis.text.y = element_text(size = 9),\n    axis.text.x = element_text(size = 9),\n    plot.title = element_text(size = 14, face = \"bold\"),\n    plot.margin = margin(10, 10, 10, 10)\n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01b/Take-home_Ex01b.html#box-plot-based-on-age-range",
    "href": "Take-home_Ex/Take-home_Ex01b/Take-home_Ex01b.html#box-plot-based-on-age-range",
    "title": "Take-home Exercise 1b: Data Visualisation Makeover",
    "section": "2.4 Box Plot based on Age Range",
    "text": "2.4 Box Plot based on Age Range\n\n2.4.1 Original Chart\nThe attempt to reproduce the original chart using the code below has failed too as there was no FA column created.\n\nFA_order &lt;- c(\"&lt;= 60\", \"&gt;60 to 80\", \"&gt;80 to 100\", \"&gt;100 to 120\", \"&gt;120\", \"Not Available\")\nResident_Data$FA &lt;- factor(Resident_Data$FA, levels = FA_order)\n\nggplot(Resident_Data, aes(x = FA, y = Pop)) +\n  geom_boxplot(fill = \"lightgreen\") +\n  labs(title = \"Population by Functional Age Range (FA)\", x = \"FA Band\", y = \"Population\") +\n  theme_minimal()\n\nTo rectify, it is assumed that FA refers to Functional Age binned based on Age &lt;= 60, &gt;60 to 80, &gt;80 to 100, &gt;100 to 120, &gt;120, Not Available.\nThe following codes for FA column were inserted\n\nResident_Data &lt;- Resident_Data %&gt;%\n  mutate(\n    FA = case_when(\n      Age &lt;= 60 ~ \"&lt;= 60\",\n      Age &gt; 60 & Age &lt;= 80 ~ \"&gt;60 to 80\",\n      Age &gt; 80 & Age &lt;= 100 ~ \"&gt;80 to 100\",\n      Age &gt; 100 & Age &lt;= 120 ~ \"&gt;100 to 120\",\n      Age &gt; 120 ~ \"&gt;120\",\n      TRUE ~ \"Not Available\"\n    )\n  )\n\nI have attempted to reproduce the original chart using the codes provided but was unable to do so as it is not possible to distinguish population aged “&gt;100 to 120”, “&gt;120” and “Not Available” since all population aged 90 and above will be classified under “&gt;80 to 100”.\n\nFA_order &lt;- c(\"&lt;= 60\", \"&gt;60 to 80\", \"&gt;80 to 100\", \"&gt;100 to 120\", \"&gt;120\", \"Not Available\")\nResident_Data$FA &lt;- factor(Resident_Data$FA, levels = FA_order)\n\nggplot(Resident_Data, aes(x = FA, y = Pop)) +\n  geom_boxplot(fill = \"lightgreen\") +\n  labs(title = \"Population by Functional Age Range (FA)\", x = \"FA Band\", y = \"Population\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nThe chart is a box plot based on age range. Box plots are used to show distributions of numeric continuous data values along y-axis, and compare them between multiple groups. As mentioned earlier, the data grouping seems to be erroneous. Given that the population numbers are by subzones, the box plot shows large number of outliers which is not useful for storytelling.\nHence, the chart can be classified under Quadrant III = [confusing, ugly].\n\n\n2.4.2 Makeover of Original Chart\nIf the intent is to show the total population number in the 3 age groups as per the writeup, it is recommended to use a bar graph instead as shown below. The total population numbers in each age group are added together first, followed by the plotting.\n\nResident_FA_summary &lt;- Resident_Data %&gt;%\n  group_by(FA) %&gt;%\n  summarise(TotalPop = sum(Pop, na.rm = TRUE))\n\nggplot(Resident_FA_summary, aes(x = FA, y = TotalPop)) +\n  geom_col(fill = \"lightgreen\") +\n  labs(title = \"Total Population by Functional Age (FA) Band\", x = \"FA Band\", y = \"Total Population\") +\n  scale_y_continuous(labels = comma) +\n  theme_minimal()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Belinda’s ISSS608-VAA Journey",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications.\nIn this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "index.html#recent-projects",
    "href": "index.html#recent-projects",
    "title": "Belinda’s ISSS608-VAA Journey",
    "section": "Recent Projects",
    "text": "Recent Projects\n\n\n\n\n\nHands-on Exercise 3\nExplore advanced ggplot2 techniques, including enhanced annotations with ggrepel, professional theming using ggthemes and hrbrthemes, and creating composite figures with the patchwork package.\nView Hands-on Exercises\n\n\n\n\n\n\n\nHands-on Exercise 2\nExplore advanced ggplot2 techniques, including enhanced annotations with ggrepel, professional theming using ggthemes and hrbrthemes, and creating composite figures with the patchwork package.\nView Hands-on Exercises\n\n\n\n\n\n\n\nHands-on Exercise 1\nIntroduce the concepts and components of ggplot2, focusing on the Layered Grammar of Graphics to create effective and elegant statistical visualizations in R.\nView Hands-on Exercises\n\n\n\n\n\n\n\nTake-home Exercises\nDemographic structures and distribution of Singapore in 2024.\nView Take-home Exercises\n\n\n\n\n\n\n\nIn-class Exercises\nVisual analytics done collaboratively during class sessions.\nView In-class Exercises\n\n\n\n\n\n\n\nGroup Project\nGroup project involving data storytelling.\nView Project"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.\n\n\n\nFirst, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)  \n\n\n\n\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\nggiraph  is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.\n\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\n\n\n\n\n\n\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:white; \nfont-weight:bold; color:black;\"\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\nNotice that the background colour of the tooltip is white and the font colour is black and bold.\n\n\n\n\n\n\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\n\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS, tooltip = exam_data$tooltip),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)       \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n\n\n\nIn the code chunk below, css codes are used to change the highlighting effect.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS, tooltip = exam_data$tooltip),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below. This is another way of doing it as compared to the code chunk above.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n\n\n\n\n\n\n\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions.\n\n\n\n\n\nCoordinated multiple views methods has been implemented in the data visualisation below.\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID, tooltip = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID, tooltip = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\nAlternative chart where the scale is manually adjusted for better visibility.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n# Stack manually for Maths\nexam_data_math &lt;- exam_data %&gt;%\n  group_by(MATHS) %&gt;%\n  mutate(stack_y = row_number())\n\n# Stack manually for English\nexam_data_eng &lt;- exam_data %&gt;%\n  group_by(ENGLISH) %&gt;%\n  mutate(stack_y = row_number())\n\n# Plot Maths\np1 &lt;- ggplot(exam_data_math, aes(x = MATHS, y = stack_y)) +\n  geom_point_interactive(aes(data_id = ID, tooltip = ID), size = 1.5) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  coord_cartesian(xlim = c(0, 100)) +\n  theme_minimal()\n\n# Plot English\np2 &lt;- ggplot(exam_data_eng, aes(x = ENGLISH, y = stack_y)) +\n  geom_point_interactive(aes(data_id = ID, tooltip = ID), size = 1.5) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  coord_cartesian(xlim = c(0, 100)) +\n  theme_minimal()\n\n# Combine interactive\ngirafe(\n  code = print(p1 + p2),\n  width_svg = 6,\n  height_svg = 3,\n  options = list(\n    opts_hover(css = \"fill: #202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)\n\n\n\n\n\n\n\n\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\nHowever, the chart did not include the title and axis. The chart is adjusted as follows below:\n\nThe plotThe code\n\n\n\n\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\n\nd &lt;- highlight_key(exam_data)\n\np1 &lt;- ggplot(data = d, \n             aes(x = MATHS, y = ENGLISH)) +\n  geom_point(size = 1) +\n  labs(\n    x = \"Maths Score\",\n    y = \"English Score\"\n  ) +\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) +\n  theme_minimal()+\n  theme(\n    axis.title = element_text(size = 10))\n\np2 &lt;- ggplot(data = d, \n             aes(x = MATHS, y = SCIENCE)) +\n  geom_point(size = 1) +\n  labs(\n    x = \"Maths Score\",\n    y = \"Science Score\"\n  ) +\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) +\n  theme_minimal()+\n  theme(\n    axis.title = element_text(size = 10))\n\n# Combine plots\nsubplot(ggplotly(p1), ggplotly(p2), titleX = TRUE, titleY = TRUE,\n  margin = 0.07 ) %&gt;%\n  layout(\n    annotations = list(\n      list(\n        text = \"Maths vs English Scores\",   # Title for 1st plot\n        x = 0.225, y = 1.05, showarrow = FALSE,\n        xref = \"paper\", yref = \"paper\",\n        font = list(size = 14), xanchor = \"center\"\n      ),\n      list(\n        text = \"Maths vs Science Scores\",   # Title for 2nd plot\n        x = 0.775, y = 1.05, showarrow = FALSE,\n        xref = \"paper\", yref = \"paper\",\n        font = list(size = 14), xanchor = \"center\"\n      )\n    )\n  )\n\n\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk,\n\n\n\n\n\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\nThe plotThe code\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below is used to implement the coordinated brushing shown in the plot.\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk:\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.\n\n\n\n\n\n\n\n\n\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels\n\n\n\n\n\nThese are the additional plots which are beyond the scope of the hand-on exercises for my learning purposes.\n\n\nThe Singapore’s map shapefile is downloaded from URA’s Master Plan 2014 Planning Area Boundary.\nThe libraries and codes used for data pre-processing and visualisation are shown below:\n\nlibrary(sf)\nlibrary(ggplot2)\nlibrary(ggiraph)\nlibrary(dplyr)\n\nsg_map &lt;- st_read(\"data/Map/MP14_PLNG_AREA_WEB_PL.shp\")\n\nReading layer `MP14_PLNG_AREA_WEB_PL' from data source \n  `C:\\Users\\Belinda\\OneDrive - Singapore Management University\\Desktop\\Visual Analytics\\belindalim\\ISSS608-VAA\\Hands-on_Ex\\Hands-on_Ex03\\data\\Map\\MP14_PLNG_AREA_WEB_PL.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 55 features and 12 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nsg_map &lt;- sg_map %&gt;%\n  mutate(tooltip = paste0(\"Planning Area: \", PLN_AREA_N))\n\ngg &lt;- ggplot() +\n  geom_sf_interactive(\n    data = sg_map,\n    aes(geometry = geometry, tooltip = tooltip, data_id = PLN_AREA_N),\n    fill = \"lightblue\", color = \"white\"\n  ) +\n  theme_minimal()\n\ngirafe(ggobj = gg, width_svg = 6, height_svg = 3)\n\n\n\n\n\n\n\n\nFirst, the percentage of Population aged 65 and above by PA is computed and joined to the map.\nThe codes used for data pre-processing are shown below:\n\npop_data &lt;- read_csv(\"data/Demographic_data.csv\", show_col_types = FALSE)\n\n\npop_summary &lt;- pop_data %&gt;%\n  mutate(\n    Age_DR = if_else(Age == \"90_and_Over\", \"90\", as.character(Age)),\n    Age_DR = as.numeric(Age_DR),\n    Pop_DR = as.numeric(Pop)\n  ) %&gt;%\n  group_by(PA) %&gt;%\n  summarise(\n    Pop65 = sum(Pop_DR[Age_DR &gt;= 65], na.rm = TRUE),\n    TotalPop = sum(Pop_DR, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  mutate(PctOver65 = round(Pop65 / TotalPop * 100, 1))\n\n\nsg_map &lt;- sg_map %&gt;%\n  mutate(PA = toupper(trimws(PLN_AREA_N)))\n\npop_summary &lt;- pop_summary %&gt;%\n  mutate(PA = toupper(trimws(PA)))\n\nsg_map_joined &lt;- sg_map %&gt;%\n  left_join(pop_summary, by = \"PA\")\n\nThe choropleth map with percentage of elderly population aged 65 and above is created using the codes shown below:\n\np &lt;- ggplot(sg_map_joined) +\n  geom_sf(aes(\n    fill = PctOver65,\n    text = paste0(\"Planning Area: \", PA, \"\\nAge 65+ Population: \", PctOver65, \"%\")\n  ), color = \"white\", linewidth = 0.3) +\n  scale_fill_gradient(\n    low = \"#ffe0b2\",   \n    high = \"#b30000\",  \n    na.value = \"grey90\") +\n  labs(\n    title = \"% of Population Aged 65+ by PA\",\n    fill = \"% Aged 65+\"\n  ) +\n  theme_void() + theme(panel.border = element_blank()) \n\nggplotly(p, tooltip = \"text\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#learning-outcome",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "First, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-data",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "In this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "ggiraph  is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactivity",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "By hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\n\n\n\n\n\n\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:white; \nfont-weight:bold; color:black;\"\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\nNotice that the background colour of the tooltip is white and the font colour is black and bold.\n\n\n\n\n\n\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\n\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS, tooltip = exam_data$tooltip),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)       \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n\n\n\nIn the code chunk below, css codes are used to change the highlighting effect.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS, tooltip = exam_data$tooltip),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below. This is another way of doing it as compared to the code chunk above.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n\n\n\n\n\n\n\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions.\n\n\n\n\n\nCoordinated multiple views methods has been implemented in the data visualisation below.\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID, tooltip = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID, tooltip = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\nAlternative chart where the scale is manually adjusted for better visibility.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n# Stack manually for Maths\nexam_data_math &lt;- exam_data %&gt;%\n  group_by(MATHS) %&gt;%\n  mutate(stack_y = row_number())\n\n# Stack manually for English\nexam_data_eng &lt;- exam_data %&gt;%\n  group_by(ENGLISH) %&gt;%\n  mutate(stack_y = row_number())\n\n# Plot Maths\np1 &lt;- ggplot(exam_data_math, aes(x = MATHS, y = stack_y)) +\n  geom_point_interactive(aes(data_id = ID, tooltip = ID), size = 1.5) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  coord_cartesian(xlim = c(0, 100)) +\n  theme_minimal()\n\n# Plot English\np2 &lt;- ggplot(exam_data_eng, aes(x = ENGLISH, y = stack_y)) +\n  geom_point_interactive(aes(data_id = ID, tooltip = ID), size = 1.5) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  coord_cartesian(xlim = c(0, 100)) +\n  theme_minimal()\n\n# Combine interactive\ngirafe(\n  code = print(p1 + p2),\n  width_svg = 6,\n  height_svg = 3,\n  options = list(\n    opts_hover(css = \"fill: #202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "Plotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\nHowever, the chart did not include the title and axis. The chart is adjusted as follows below:\n\nThe plotThe code\n\n\n\n\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\n\nd &lt;- highlight_key(exam_data)\n\np1 &lt;- ggplot(data = d, \n             aes(x = MATHS, y = ENGLISH)) +\n  geom_point(size = 1) +\n  labs(\n    x = \"Maths Score\",\n    y = \"English Score\"\n  ) +\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) +\n  theme_minimal()+\n  theme(\n    axis.title = element_text(size = 10))\n\np2 &lt;- ggplot(data = d, \n             aes(x = MATHS, y = SCIENCE)) +\n  geom_point(size = 1) +\n  labs(\n    x = \"Maths Score\",\n    y = \"Science Score\"\n  ) +\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) +\n  theme_minimal()+\n  theme(\n    axis.title = element_text(size = 10))\n\n# Combine plots\nsubplot(ggplotly(p1), ggplotly(p2), titleX = TRUE, titleY = TRUE,\n  margin = 0.07 ) %&gt;%\n  layout(\n    annotations = list(\n      list(\n        text = \"Maths vs English Scores\",   # Title for 1st plot\n        x = 0.225, y = 1.05, showarrow = FALSE,\n        xref = \"paper\", yref = \"paper\",\n        font = list(size = 14), xanchor = \"center\"\n      ),\n      list(\n        text = \"Maths vs Science Scores\",   # Title for 2nd plot\n        x = 0.775, y = 1.05, showarrow = FALSE,\n        xref = \"paper\", yref = \"paper\",\n        font = list(size = 14), xanchor = \"center\"\n      )\n    )\n  )\n\n\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk,"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "Crosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\nThe plotThe code\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below is used to implement the coordinated brushing shown in the plot.\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk:\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#reference",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "This link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#additional-plots",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#additional-plots",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "These are the additional plots which are beyond the scope of the hand-on exercises for my learning purposes.\n\n\nThe Singapore’s map shapefile is downloaded from URA’s Master Plan 2014 Planning Area Boundary.\nThe libraries and codes used for data pre-processing and visualisation are shown below:\n\nlibrary(sf)\nlibrary(ggplot2)\nlibrary(ggiraph)\nlibrary(dplyr)\n\nsg_map &lt;- st_read(\"data/Map/MP14_PLNG_AREA_WEB_PL.shp\")\n\nReading layer `MP14_PLNG_AREA_WEB_PL' from data source \n  `C:\\Users\\Belinda\\OneDrive - Singapore Management University\\Desktop\\Visual Analytics\\belindalim\\ISSS608-VAA\\Hands-on_Ex\\Hands-on_Ex03\\data\\Map\\MP14_PLNG_AREA_WEB_PL.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 55 features and 12 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nsg_map &lt;- sg_map %&gt;%\n  mutate(tooltip = paste0(\"Planning Area: \", PLN_AREA_N))\n\ngg &lt;- ggplot() +\n  geom_sf_interactive(\n    data = sg_map,\n    aes(geometry = geometry, tooltip = tooltip, data_id = PLN_AREA_N),\n    fill = \"lightblue\", color = \"white\"\n  ) +\n  theme_minimal()\n\ngirafe(ggobj = gg, width_svg = 6, height_svg = 3)\n\n\n\n\n\n\n\n\nFirst, the percentage of Population aged 65 and above by PA is computed and joined to the map.\nThe codes used for data pre-processing are shown below:\n\npop_data &lt;- read_csv(\"data/Demographic_data.csv\", show_col_types = FALSE)\n\n\npop_summary &lt;- pop_data %&gt;%\n  mutate(\n    Age_DR = if_else(Age == \"90_and_Over\", \"90\", as.character(Age)),\n    Age_DR = as.numeric(Age_DR),\n    Pop_DR = as.numeric(Pop)\n  ) %&gt;%\n  group_by(PA) %&gt;%\n  summarise(\n    Pop65 = sum(Pop_DR[Age_DR &gt;= 65], na.rm = TRUE),\n    TotalPop = sum(Pop_DR, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  mutate(PctOver65 = round(Pop65 / TotalPop * 100, 1))\n\n\nsg_map &lt;- sg_map %&gt;%\n  mutate(PA = toupper(trimws(PLN_AREA_N)))\n\npop_summary &lt;- pop_summary %&gt;%\n  mutate(PA = toupper(trimws(PA)))\n\nsg_map_joined &lt;- sg_map %&gt;%\n  left_join(pop_summary, by = \"PA\")\n\nThe choropleth map with percentage of elderly population aged 65 and above is created using the codes shown below:\n\np &lt;- ggplot(sg_map_joined) +\n  geom_sf(aes(\n    fill = PctOver65,\n    text = paste0(\"Planning Area: \", PA, \"\\nAge 65+ Population: \", PctOver65, \"%\")\n  ), color = \"white\", linewidth = 0.3) +\n  scale_fill_gradient(\n    low = \"#ffe0b2\",   \n    high = \"#b30000\",  \n    na.value = \"grey90\") +\n  labs(\n    title = \"% of Population Aged 65+ by PA\",\n    fill = \"% Aged 65+\"\n  ) +\n  theme_void() + theme(panel.border = element_blank()) \n\nggplotly(p, tooltip = \"text\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "In this chapter, you will learn the basic principles and essential components of ggplot2. At the same time, you will gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. By then end of this chapter you will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics.\n\n\n\n\n\nBefore we get started, it is important for us to ensure that the required R packages have been installed. If yes, we will load the R packages. If they have yet to be installed, we will install the R packages and load them onto R environment.\n\n\n\n\n\n\nNote\n\n\n\nIt is assumed that you already have pacman package installed. If not, please go ahead install pacman first. The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\n\n\npacman::p_load(tidyverse)\n\n\n\n\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is one of the tidyverse package.\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\", , show_col_types = FALSE)\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n\n\n\n\n\nThe ggplot2 package is an R package for declaratively creating data-driven graphics based on The Grammar of Graphics.\nIt is part of the tidyverse family of packages, and is specially designed for visual exploration and communication.\nFor more detail, visit ggplot2 link.\n\n\nFirst, let us compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR Graphicsggplot2 and variants\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = ENGLISH)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"lightblue\") +\n  ggtitle(\"Distribution of English scores\")\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, aes(x = SCIENCE)) +\n  geom_histogram(bins = 10, \n                 boundary = 100,\n                 color = \"black\", \n                 fill = \"lightyellow\") +\n  stat_bin(\n    bins = 10,\n    geom = \"text\",\n    aes(y = ..count.., label = ..count..),\n    vjust = -0.3,              \n    position = \"identity\",     \n    size = 3                   \n  ) +\n  ggtitle(\"Distribution of Science scores\") +\n  xlab(\"Science Score\") +\n  ylab(\"Number of Students\")\n\n\n\n\n\n\n\n\n\n\n\nAs you can see that the code chunk is relatively simple if R Graphics is used. Then, the question is why ggplot2 is recommended?\nAs pointed out by Hadley Wickham\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.\n\n\n\n\n\n\nBefore we getting started using ggplot2, it is important for us to understand the principles of Grammer of Graphics.\nGrammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) Grammar of Graphics, Springer. The grammar of graphics is an answer to a question:\nWhat is a statistical graphic?\nIn the nutshell, Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\n\n\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. There are seven grammars of ggplot2.\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.\n\n\n\n\n\nLet us call the ggplot() function using the code chunk below.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\nNote\n\nA blank canvas appears.\nggplot() initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify().\n\n\n\n\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)\nCode chunk below adds the aesthetic element into the plot.\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\nNote\n\nggplot includes the x-axis and the axis’s label.\n\n\n\n\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\n\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\nFor complete list, please refer to here.\n\n\n\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\nBe warned\nThe y scale is not very useful, in fact it is very misleading.\n\nNote\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)\n\n\n\n\n\n\n\n\nMore variant: Colour by gender\n\nggplot(data = exam_data, \n       aes(x = MATHS, fill = GENDER)) +   # add fill = GENDER here\n  geom_dotplot(\n    binwidth = 2.5, \n    dotsize = 0.5, \n    stackgroups = TRUE,                  # stack by group\n    binpositions = \"all\"                 # allow overlap\n  ) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  ggtitle(\"Dotplot of Maths Scores Colored by Gender\") +\n  xlab(\"Maths Score\")\n\n\n\n\n\n\n\n\nMore variant: Split into 2 charts by gender\n\nggplot(data = exam_data, \n       aes(x = MATHS, fill = GENDER)) +\n  geom_dotplot(\n    binwidth = 2.5, \n    dotsize = 0.5, \n    stackgroups = TRUE,\n    binpositions = \"all\"\n  ) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  facet_wrap(~GENDER) +  # ← This creates two plots, one per gender\n  ggtitle(\"Dotplot of Maths Scores by Gender\") +\n  xlab(\"Maths Score\")\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()\n\n\n\n\n\n\n\n\nNote\nNote that the default bin is 30.\n\n\n\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\n\n  ggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\nNote\nThis approach can be used to colour, fill and alpha of the geometric.\n\n\n\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()\n\n\n\n\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\n  ggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\n\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\n  ggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()\n\n\n\n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\n\n\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()  \n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)\n\n\n\n\n\n\n\n\nMore variant: Boxplot + Mean Points (Red) + Jitter\n\nggplot(exam_data, aes(x = CLASS, y = MATHS)) +\n  geom_boxplot(outlier.shape = NA) +\n  geom_jitter(width = 0.2, size = 0.5, alpha = 0.5) +\n  stat_summary(fun = mean, geom = \"point\", \n               shape = 18, size = 3, color = \"red\") +\n  ggtitle(\"Maths Scores by Gender: Boxplot + Mean + Jitter\")\n\n\n\n\n\n\n\n\n\n\n\n\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\n\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4) \n\n\n\n\n\n\n\n\n\n\n\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()  \n\n\n\n\n\n\n\n\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\n\n\n\n\nNote\n\nThe default method used is loess.\n\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\n\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\nMore variant: Fill by colour\n\nggplot(data = exam_data, \n       aes(x = MATHS, fill = CLASS)) +  \n  geom_histogram(bins = 20, color = \"black\") + \n  facet_wrap(~ CLASS) +\n  ggtitle(\"Maths Score Distribution by Class\") +\n  xlab(\"Maths Score\") +\n  ylab(\"Count\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\nMore variant: Fill by colour\n\nggplot(data = exam_data, \n       aes(x = MATHS, fill = CLASS)) +   \n  geom_histogram(bins = 20, color = \"black\") +  \n  facet_grid(~ CLASS) +                         \n  ggtitle(\"Distribution of Maths Scores by Class\") +\n  xlab(\"Maths Score\") +\n  ylab(\"Count\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n- [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out). - [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html): a cartesian system with the x and y flipped. - [`coord_fixed()`](https://ggplot2.tidyverse.org/reference/coord_fixed.html): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot). - [`coord_quickmap()`](https://ggplot2.tidyverse.org/reference/coord_map.html): a coordinate system that approximates a good aspect ratio for maps.\n\n\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n\n\n\n\n\n\n\n\n\n\n\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale\n\n\n\n\nThese are the additional plots which are beyond the scope of the hand-on exercises for my learning purposes.\nPareto Charts\n\n# Frequency table\nrace_freq &lt;- exam_data %&gt;%\n  count(RACE, name = \"Frequency\") %&gt;%\n  arrange(desc(Frequency)) %&gt;%\n  mutate(\n    Cumulative = cumsum(Frequency),\n    `Cumulative %` = round(Cumulative / sum(Frequency) * 100, 1)\n  )\n\n# Pareto chart\nggplot(race_freq, aes(x = reorder(RACE, -Frequency))) +\n  geom_bar(aes(y = Frequency), stat = \"identity\", fill = \"skyblue\") +\n  geom_line(aes(y = `Cumulative %` * max(Frequency) / 100, group = 1), color = \"red\") +\n  geom_point(aes(y = `Cumulative %` * max(Frequency) / 100), color = \"red\") +\n  scale_y_continuous(\n    name = \"Frequency\",\n    sec.axis = sec_axis(~ . * 100 / max(race_freq$Frequency), name = \"Cumulative %\")\n  ) +\n  labs(title = \"Pareto Chart of Student Race\", x = \"Race\") +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#learning-outcome",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "In this chapter, you will learn the basic principles and essential components of ggplot2. At the same time, you will gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. By then end of this chapter you will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Before we get started, it is important for us to ensure that the required R packages have been installed. If yes, we will load the R packages. If they have yet to be installed, we will install the R packages and load them onto R environment.\n\n\n\n\n\n\nNote\n\n\n\nIt is assumed that you already have pacman package installed. If not, please go ahead install pacman first. The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\n\n\npacman::p_load(tidyverse)\n\n\n\n\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is one of the tidyverse package.\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\", , show_col_types = FALSE)\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The ggplot2 package is an R package for declaratively creating data-driven graphics based on The Grammar of Graphics.\nIt is part of the tidyverse family of packages, and is specially designed for visual exploration and communication.\nFor more detail, visit ggplot2 link.\n\n\nFirst, let us compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR Graphicsggplot2 and variants\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = ENGLISH)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"lightblue\") +\n  ggtitle(\"Distribution of English scores\")\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, aes(x = SCIENCE)) +\n  geom_histogram(bins = 10, \n                 boundary = 100,\n                 color = \"black\", \n                 fill = \"lightyellow\") +\n  stat_bin(\n    bins = 10,\n    geom = \"text\",\n    aes(y = ..count.., label = ..count..),\n    vjust = -0.3,              \n    position = \"identity\",     \n    size = 3                   \n  ) +\n  ggtitle(\"Distribution of Science scores\") +\n  xlab(\"Science Score\") +\n  ylab(\"Number of Students\")\n\n\n\n\n\n\n\n\n\n\n\nAs you can see that the code chunk is relatively simple if R Graphics is used. Then, the question is why ggplot2 is recommended?\nAs pointed out by Hadley Wickham\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Before we getting started using ggplot2, it is important for us to understand the principles of Grammer of Graphics.\nGrammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) Grammar of Graphics, Springer. The grammar of graphics is an answer to a question:\nWhat is a statistical graphic?\nIn the nutshell, Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\n\n\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. There are seven grammars of ggplot2.\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Let us call the ggplot() function using the code chunk below.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\nNote\n\nA blank canvas appears.\nggplot() initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)\nCode chunk below adds the aesthetic element into the plot.\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\nNote\n\nggplot includes the x-axis and the axis’s label."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Geometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\n\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\nFor complete list, please refer to here.\n\n\n\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\nBe warned\nThe y scale is not very useful, in fact it is very misleading.\n\nNote\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)\n\n\n\n\n\n\n\n\nMore variant: Colour by gender\n\nggplot(data = exam_data, \n       aes(x = MATHS, fill = GENDER)) +   # add fill = GENDER here\n  geom_dotplot(\n    binwidth = 2.5, \n    dotsize = 0.5, \n    stackgroups = TRUE,                  # stack by group\n    binpositions = \"all\"                 # allow overlap\n  ) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  ggtitle(\"Dotplot of Maths Scores Colored by Gender\") +\n  xlab(\"Maths Score\")\n\n\n\n\n\n\n\n\nMore variant: Split into 2 charts by gender\n\nggplot(data = exam_data, \n       aes(x = MATHS, fill = GENDER)) +\n  geom_dotplot(\n    binwidth = 2.5, \n    dotsize = 0.5, \n    stackgroups = TRUE,\n    binpositions = \"all\"\n  ) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  facet_wrap(~GENDER) +  # ← This creates two plots, one per gender\n  ggtitle(\"Dotplot of Maths Scores by Gender\") +\n  xlab(\"Maths Score\")\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()\n\n\n\n\n\n\n\n\nNote\nNote that the default bin is 30.\n\n\n\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\n\n  ggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\nNote\nThis approach can be used to colour, fill and alpha of the geometric.\n\n\n\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()\n\n\n\n\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\n  ggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\n\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\n  ggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()\n\n\n\n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\n\n\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()  \n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)\n\n\n\n\n\n\n\n\nMore variant: Boxplot + Mean Points (Red) + Jitter\n\nggplot(exam_data, aes(x = CLASS, y = MATHS)) +\n  geom_boxplot(outlier.shape = NA) +\n  geom_jitter(width = 0.2, size = 0.5, alpha = 0.5) +\n  stat_summary(fun = mean, geom = \"point\", \n               shape = 18, size = 3, color = \"red\") +\n  ggtitle(\"Maths Scores by Gender: Boxplot + Mean + Jitter\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\n\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4) \n\n\n\n\n\n\n\n\n\n\n\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()  \n\n\n\n\n\n\n\n\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\n\n\n\n\nNote\n\nThe default method used is loess.\n\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Facetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\n\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\nMore variant: Fill by colour\n\nggplot(data = exam_data, \n       aes(x = MATHS, fill = CLASS)) +  \n  geom_histogram(bins = 20, color = \"black\") + \n  facet_wrap(~ CLASS) +\n  ggtitle(\"Maths Score Distribution by Class\") +\n  xlab(\"Maths Score\") +\n  ylab(\"Count\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\nMore variant: Fill by colour\n\nggplot(data = exam_data, \n       aes(x = MATHS, fill = CLASS)) +   \n  geom_histogram(bins = 20, color = \"black\") +  \n  facet_grid(~ CLASS) +                         \n  ggtitle(\"Distribution of Maths Scores by Class\") +\n  xlab(\"Maths Score\") +\n  ylab(\"Count\") +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n- [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out). - [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html): a cartesian system with the x and y flipped. - [`coord_fixed()`](https://ggplot2.tidyverse.org/reference/coord_fixed.html): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot). - [`coord_quickmap()`](https://ggplot2.tidyverse.org/reference/coord_map.html): a coordinate system that approximates a good aspect ratio for maps.\n\n\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Themes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Hadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#additional-plots",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#additional-plots",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "These are the additional plots which are beyond the scope of the hand-on exercises for my learning purposes.\nPareto Charts\n\n# Frequency table\nrace_freq &lt;- exam_data %&gt;%\n  count(RACE, name = \"Frequency\") %&gt;%\n  arrange(desc(Frequency)) %&gt;%\n  mutate(\n    Cumulative = cumsum(Frequency),\n    `Cumulative %` = round(Cumulative / sum(Frequency) * 100, 1)\n  )\n\n# Pareto chart\nggplot(race_freq, aes(x = reorder(RACE, -Frequency))) +\n  geom_bar(aes(y = Frequency), stat = \"identity\", fill = \"skyblue\") +\n  geom_line(aes(y = `Cumulative %` * max(Frequency) / 100, group = 1), color = \"red\") +\n  geom_point(aes(y = `Cumulative %` * max(Frequency) / 100), color = \"red\") +\n  scale_y_continuous(\n    name = \"Frequency\",\n    sec.axis = sec_axis(~ . * 100 / max(race_freq$Frequency), name = \"Cumulative %\")\n  ) +\n  labs(title = \"Pareto Chart of Student Race\", x = \"Race\") +\n  theme_minimal()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi! Thanks for visiting my page. This page is created to document my journey in applying visual analytics as part of my coursework in SMU MITB. Hope you will find this page useful too!"
  },
  {
    "objectID": "about.html#connect-with-me",
    "href": "about.html#connect-with-me",
    "title": "About",
    "section": "🔗 Connect with Me",
    "text": "🔗 Connect with Me\n\n\n\nhttps://www.linkedin.com/in/belindalimks"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "In this chapter, you will be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, you will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package.\n\n\n\n\n\n\nIn this exercise, beside tidyverse, four R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)\n\n\n\n\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n\n\n\n\nOne of the challenges in plotting statistical graphs is annotation, especially when there are many data points.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, linewidth = 0.5) +\n  geom_label(aes(label = ID), hjust = 0.5, vjust = -0.5) +\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\nggrepel  is an extension of  ggplot2 package which provides  geoms  for  ggplot2  to repel overlapping text as in our examples below.\n\nWe simply replace  geom_text()  by  geom_text_repel()  and  geom_label()  by  geom_label_repel.\n\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\nExample for theme_gray()\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\nRefer to this link to learn more about ggplot2 Themes\nExample of how theme() and element_ are used (see below)\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of English scores\") +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n    axis.title = element_text(size = 14),\n    axis.text = element_text(size = 12),\n    panel.background = element_rect(fill = \"white\"),\n    panel.grid.major = element_line(color = \"grey80\"),\n    panel.grid.minor = element_blank(),\n    plot.background = element_rect(fill = \"#F8F8F8\", color = NA)\n  )\n\n\n\n\n\n\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more.\n\n\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\n\nbase_size argument is used to increase the default axis label to 15, and\n\ngrid argument is used to remove the x-axis grid lines.\n\n\n\n\n\n\n\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, you will learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np1\n\n\n\n\nNext\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np2\n\n\n\n\nLastly, we will draw a scatterplot for English score versus Maths score by as shown below\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\np3\n\n\n\n\n\n\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 + p2\n\n\n\n\n2.5.3 Combining three ggplot2 graphs We can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n“/” operator to stack two ggplot2 graphs, “|” operator to place the plots beside each other, “()” operator the define the sequence of the plotting.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- p1 +\n  ggtitle(str_wrap(\"Distribution of Maths scores\", width = 30)) +\n  theme_grey()\n\np2 &lt;- p2 +\n  ggtitle(str_wrap(\"Distribution of English scores\", width = 30)) +\n  theme_grey()\n\np3 &lt;- p3 +\n  ggtitle(str_wrap(\"English scores versus Maths scores for all students\", width = 35)) +\n  theme_grey()\n\n(p1 / p2) | p3\n\n\n\n\nAnother variant\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 &lt;- p3 +\n  ggtitle(str_wrap(\"English scores versus Maths scores for all students\", width = 60)) +\n  theme_grey()\n\n(p1 | p2) / p3\n\n\n\n\nTo learn more about, refer to Plot Assembly.\nExample applied from Plot Assembly:\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np4 &lt;- ggplot(exam_data) +\n  geom_point(aes(x = MATHS, y = ENGLISH, colour = SCIENCE)) +\n  ggtitle(\"Plot 4: Science vs English vs Maths\")\n\np4\n\n\n\n\n\n\n\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np2 &lt;- p2 +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 8),\n    axis.title.x = element_blank(),       \n    axis.title.y = element_text(size = 6), \n    axis.text = element_text(size = 6),\n    axis.ticks = element_blank(),\n    panel.background = element_rect(fill = \"white\", color = NA), \n    plot.background = element_rect(fill = \"white\", color = NA)   \n  )\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- p1 +\n  ggtitle(str_wrap(\"Distribution of Maths scores\", width = 30)) +\n  theme_economist() +\n  theme(\n    plot.margin = margin(t = 10, b = 10),\n    plot.title = element_text(size = 10)  # Reduce title size\n  )\n\np2 &lt;- p2 +\n  ggtitle(str_wrap(\"Distribution of English scores\", width = 30)) +\n  theme_economist() +\n  theme(\n    plot.margin = margin(t = 10, b = 10),\n    plot.title = element_text(size = 10)\n  )\n\np3 &lt;- p3 +\n  ggtitle(str_wrap(\"English scores versus Maths\", width = 30)) +\n  theme_economist() +\n  theme(\n    plot.margin = margin(10, 10, 10, 10),\n    plot.title = element_text(size = 10)\n  )\n\npatchwork &lt;- ((p1 / p2) | p3) + plot_layout(widths = c(1, 2))\npatchwork\n\n\n\n\n\n\n\n\n\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "In this chapter, you will be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, you will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "In this exercise, beside tidyverse, four R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)\n\n\n\n\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "One of the challenges in plotting statistical graphs is annotation, especially when there are many data points.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, linewidth = 0.5) +\n  geom_label(aes(label = ID), hjust = 0.5, vjust = -0.5) +\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\nggrepel  is an extension of  ggplot2 package which provides  geoms  for  ggplot2  to repel overlapping text as in our examples below.\n\nWe simply replace  geom_text()  by  geom_text_repel()  and  geom_label()  by  geom_label_repel.\n\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "ggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\nExample for theme_gray()\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\nRefer to this link to learn more about ggplot2 Themes\nExample of how theme() and element_ are used (see below)\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of English scores\") +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n    axis.title = element_text(size = 14),\n    axis.text = element_text(size = 12),\n    panel.background = element_rect(fill = \"white\"),\n    panel.grid.major = element_line(color = \"grey80\"),\n    panel.grid.minor = element_blank(),\n    plot.background = element_rect(fill = \"#F8F8F8\", color = NA)\n  )\n\n\n\n\n\n\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more.\n\n\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\n\nbase_size argument is used to increase the default axis label to 15, and\n\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "It is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, you will learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np1\n\n\n\n\nNext\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np2\n\n\n\n\nLastly, we will draw a scatterplot for English score versus Maths score by as shown below\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\np3\n\n\n\n\n\n\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 + p2\n\n\n\n\n2.5.3 Combining three ggplot2 graphs We can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n“/” operator to stack two ggplot2 graphs, “|” operator to place the plots beside each other, “()” operator the define the sequence of the plotting.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- p1 +\n  ggtitle(str_wrap(\"Distribution of Maths scores\", width = 30)) +\n  theme_grey()\n\np2 &lt;- p2 +\n  ggtitle(str_wrap(\"Distribution of English scores\", width = 30)) +\n  theme_grey()\n\np3 &lt;- p3 +\n  ggtitle(str_wrap(\"English scores versus Maths scores for all students\", width = 35)) +\n  theme_grey()\n\n(p1 / p2) | p3\n\n\n\n\nAnother variant\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 &lt;- p3 +\n  ggtitle(str_wrap(\"English scores versus Maths scores for all students\", width = 60)) +\n  theme_grey()\n\n(p1 | p2) / p3\n\n\n\n\nTo learn more about, refer to Plot Assembly.\nExample applied from Plot Assembly:\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np4 &lt;- ggplot(exam_data) +\n  geom_point(aes(x = MATHS, y = ENGLISH, colour = SCIENCE)) +\n  ggtitle(\"Plot 4: Science vs English vs Maths\")\n\np4\n\n\n\n\n\n\n\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np2 &lt;- p2 +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 8),\n    axis.title.x = element_blank(),       \n    axis.title.y = element_text(size = 6), \n    axis.text = element_text(size = 6),\n    axis.ticks = element_blank(),\n    panel.background = element_rect(fill = \"white\", color = NA), \n    plot.background = element_rect(fill = \"white\", color = NA)   \n  )\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- p1 +\n  ggtitle(str_wrap(\"Distribution of Maths scores\", width = 30)) +\n  theme_economist() +\n  theme(\n    plot.margin = margin(t = 10, b = 10),\n    plot.title = element_text(size = 10)  # Reduce title size\n  )\n\np2 &lt;- p2 +\n  ggtitle(str_wrap(\"Distribution of English scores\", width = 30)) +\n  theme_economist() +\n  theme(\n    plot.margin = margin(t = 10, b = 10),\n    plot.title = element_text(size = 10)\n  )\n\np3 &lt;- p3 +\n  ggtitle(str_wrap(\"English scores versus Maths\", width = 30)) +\n  theme_economist() +\n  theme(\n    plot.margin = margin(10, 10, 10, 10),\n    plot.title = element_text(size = 10)\n  )\n\npatchwork &lt;- ((p1 / p2) | p3) + plot_layout(widths = c(1, 2))\npatchwork"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "Patchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.\n\n\n\n\n\n\n\n\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\n\n\n\n\n\n\n\n\n\n\n\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp\n\n\n\n\n\n\n\n\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels\n\n\n\n\nThese are the additional plots which are beyond the scope of the hand-on exercises for my learning purposes."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#overview",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#getting-started",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "First, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "gganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-plotly",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "In Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#reference",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "Getting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#additional-plots",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#additional-plots",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "These are the additional plots which are beyond the scope of the hand-on exercises for my learning purposes."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1: Demographic structures and distribution of Singapore in 2024",
    "section": "",
    "text": "According to World Health Organisation, an economically dependent population is defined as the sum of the population under 15 years of age plus the population 65 years of age and over, for a given country, territory, or geographic area, at a specific point in time.\nEconomically productive population is defined as the population between 15 and 64 years of age, for the same country, territory, or geographic area, at the same specific point in time.\nWith this definition, we aim to conduct an exploratory data analysis on the demographic structures and distribution of Singapore in 2024, focusing on the three groups of population, to understand their characteristics for better policy making."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#overview",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#overview",
    "title": "Take-home Exercise 1: Demographic structures and distribution of Singapore in 2024",
    "section": "",
    "text": "According to World Health Organisation, an economically dependent population is defined as the sum of the population under 15 years of age plus the population 65 years of age and over, for a given country, territory, or geographic area, at a specific point in time.\nEconomically productive population is defined as the population between 15 and 64 years of age, for the same country, territory, or geographic area, at the same specific point in time.\nWith this definition, we aim to conduct an exploratory data analysis on the demographic structures and distribution of Singapore in 2024, focusing on the three groups of population, to understand their characteristics for better policy making."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-source",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-source",
    "title": "Take-home Exercise 1: Demographic structures and distribution of Singapore in 2024",
    "section": "2.1 Data Source",
    "text": "2.1 Data Source\nThe data for Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 are downloaded from Department of Statistics, Singapore (DOS). The dataset comprise 6 variables and 60,424 records."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-data-and-libraries",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-data-and-libraries",
    "title": "Take-home Exercise 1: Demographic structures and distribution of Singapore in 2024",
    "section": "2.2 Loading data and libraries",
    "text": "2.2 Loading data and libraries\n\n\n\n\n\n\nNote\n\n\n\nIt is assumed that you already have pacman package installed. If not, please go ahead install pacman first. The code chunk below uses p_load() of pacman package to check if packages listed below are installed in the computer. If they are, then they will be launched into R.\n\n\n\npacman::p_load(tidyverse, patchwork, scales, sf, plotly)\n# tidyverse, patchwork, scales, sf, plotly\n\n# tidyverse, ggplot2, patchwork, scales, sf, readr, viridis, plotly\n\nWe import Demographic_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\npop_data &lt;- read_csv(\"data/Demographic_data.csv\", show_col_types = FALSE)\n\nThe attributes found in the pop_data are:\n\nPlanning Areas (PA): There are 55 PAs in Singapore designated by URA, such as Ang Mo Kio, Bedok, etc.\nSubzones (SZ): PAs are further sub-divided into 332 SZs, such as Ang Mo Kio Town Centre, Cheng San etc. under Ang Mo Kio PA.\nAge: 0 to 89 and 90_and_Over\nSex: Male and Female\nPop: Number of Population\nTime: 2024\n\nUnder Age, there is also a category “90_and_Over”. For data visualisation, the category is converted to the numeric number “90” instead. The following codes will convert and ensure that all figures under “Age” and “Pop” are numeric prior to further data analysis.\n\npop_data &lt;- pop_data %&gt;%\n  mutate(\n    Age = if_else(Age == \"90_and_Over\", \"90\", Age), \n    Age = as.numeric(Age),                           \n    Pop = as.numeric(Pop)                            \n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#singapore-population-age-pyramid-and-life-expectancy",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#singapore-population-age-pyramid-and-life-expectancy",
    "title": "Take-home Exercise 1: Demographic structures and distribution of Singapore in 2024",
    "section": "3.1 Singapore Population Age Pyramid and Life Expectancy",
    "text": "3.1 Singapore Population Age Pyramid and Life Expectancy\n\n3.1.1 Data preparation and Visualisation\nFirst we will bin the ages into 5-year blocks for greater visibility by age groups in the age pyramid.\n\npop_data &lt;- pop_data %&gt;%\nmutate(AgeGroup = cut(Age, breaks = c(seq(0, 90, by = 5), Inf),\n                        labels = c(paste(seq(0,85,5), seq(4,89,5), sep=\"-\"), \"90+\"),\n                        right = FALSE))\n\nThe population data is grouped by age group and sex and the data for male population is converted such that it is on the left.\n\nage_pyramid &lt;- pop_data %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(Population = sum(Pop), .groups = 'drop') %&gt;%\n  mutate(\n    Population = ifelse(Sex == \"Males\", -Population, Population), \n    Sex = factor(Sex, levels = c(\"Males\", \"Females\"))\n    )\n\nThe code for the Age Pyramid plot is:\n\npyramid_plot &lt;- ggplot(age_pyramid, aes(x = Population, y = AgeGroup, fill = Sex)) +\n  geom_bar(stat=\"identity\") +\n  scale_x_continuous(\n  labels = function(x) scales::comma(abs(x)),\n  breaks = scales::pretty_breaks()) +\n  labs(title=\"Age Pyramid (Population Number)\", x= NULL, y=\"Age Group\") +\n  scale_fill_manual(values = c(\"Males\" = \"lightblue\", \"Females\" = \"pink\")) +\n  theme_minimal() +\n  theme(legend.position=\"bottom\") +\n  theme(plot.title = element_text(hjust = 0.5,size = 10, face = \"bold\"))  \n\nThe proportion of males and females are also compared for each age group. The code to compute the porportion is as follows:\n\nproportion_data &lt;- pop_data %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(Population = sum(Pop, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  group_by(AgeGroup) %&gt;%\n  mutate(\n    TotalInGroup = sum(Population),\n    Proportion = Population / TotalInGroup\n  )\n\nThe code for the Proportion plot is:\n\nproportion_plot &lt;- ggplot(proportion_data, aes(x = Proportion, y = AgeGroup, fill = Sex)) +\n  geom_bar(stat = \"identity\") +\n  geom_vline(xintercept = 0.5, color = \"red\", linetype = \"dotted\", linewidth = 1) + \n  labs(\n    title = \"Proportion of Males vs Females by Age Group\",\n    x = NULL,\n    y = NULL\n  ) +\n  scale_fill_manual(\n  values = c(\"Males\" = \"lightblue\", \"Females\" = \"pink\"),\n  guide = \"none\"  \n) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(hjust = 0.5),\n    plot.title = element_text(hjust = 0.5,size = 10, face = \"bold\"),\n    legend.position = \"none\"\n  )\n\nThe 2 plots are combined using the code below.\n\nThe plot\n\n\n\n\n\n\n\n\n\n\n\n\nproportion_plot &lt;- proportion_plot +\n  theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())\n\ncombined_plot &lt;- wrap_plots(\n  list(pyramid_plot, proportion_plot),\n  ncol = 2,\n  widths = c(1, 1.5),\n  guides = \"collect\",\n  align = \"hv\",\n  axis = \"y\"\n) +\n  plot_annotation(\n    title = \"Age Pyramid and Proportion\",\n    theme = theme(\n      plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\")\n    )\n  ) &\n  theme(\n    legend.position = \"bottom\",\n    legend.box = \"horizontal\",\n    legend.justification = \"center\",\n    legend.box.just = \"center\",\n    legend.text = element_text(size = 9),\n    legend.title = element_text(size = 9)\n  )\n\ncombined_plot\n\n\n\n\n\n\n3.1.2 Insights\nSingapore’s population age pyramid can be described as a constrictive pyramid, which is typical for countries with higher socio-economic development. There are low birth and mortality rates, contributing to an ageing population. The largest population groups belong to ages 30-64. As population ages, the proportion of economically productive population will decline.\nThe population’s proportion shows that there is gender balance in the younger population aged 30 and below. Notably, there is increasingly higher proportion of females than males from age 70 onwards. This suggests that females tend to have longer life expectancy than males.\nWith ageing population, it is important to focus on preventive healthcare measures for a healthier population. This enables better quality of life and delayed retirement age for older Singaporeans to contribute economically. As there are higher proportion of elderly females, more resources such as hospital beds or geriatric care can be catered for the females."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-demographics-by-planning-areas",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-demographics-by-planning-areas",
    "title": "Take-home Exercise 1: Demographic structures and distribution of Singapore in 2024",
    "section": "3.2 Population demographics by Planning Areas",
    "text": "3.2 Population demographics by Planning Areas\nThere are 55 Planning Areas (PA) designated by URA where each planning area is served by a town centre and several neighbourhood commercial/shopping centres. Each area is supported by smaller subzones (SZ), which are usually centred on a focal point such as neighbourhood centre or activity node.\nUsing data visualisation, we can identify the top 10 PAs with the highest percentage of population aged 65 and above.\n\n3.2.1 Data preparation and Visualisation\nThe following codes are used to:\n\nCompute Total population per PA\nCompute Total Population aged 65 and above by PA\nMerge both data and compute percentage of Population aged 65 and above by PA\n\n\npop_total &lt;- pop_data %&gt;%\n  group_by(PA) %&gt;%\n  summarise(TotalPop = sum(Pop, na.rm = TRUE))\n\npop_65plus &lt;- pop_data %&gt;%\n  filter(Age &gt;= 65) %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Pop65Plus = sum(Pop, na.rm = TRUE))\n\npop_summary &lt;- left_join(pop_total, pop_65plus, by = \"PA\") %&gt;%\n  mutate(\n    Pop65Plus = replace_na(Pop65Plus, 0),\n    PctOver65 = Pop65Plus / TotalPop * 100,\n    PctOver65 = ifelse(is.nan(PctOver65), NA, round(PctOver65, 1))\n  )\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplot_data &lt;- pop_summary %&gt;%\n  arrange(desc(Pop65Plus)) %&gt;%\n  slice_head(n = 20) %&gt;%\n  mutate(\n    PA = factor(PA, levels = rev(PA)),  \n    LabelPop = format(Pop65Plus, big.mark = \",\"),\n    LabelPct = paste0(round(PctOver65, 1), \"%\")\n  )\n\nmedian_pop &lt;- median(plot_data$Pop65Plus, na.rm = TRUE)\nmedian_pct &lt;- median(plot_data$PctOver65, na.rm = TRUE)\n\npop_plot &lt;- ggplot(plot_data, aes(x = Pop65Plus, y = PA)) +\n  geom_col(fill = \"#6DAF88\")+\n  geom_text(aes(label = LabelPop), hjust = -0.2, size = 2.8) +\n  geom_vline(xintercept = median_pop, color = \"red\", linetype = \"dashed\", linewidth = 0.8) +\nannotate(\"text\", x = median_pop, y = 21.2, label = paste(\"Median =\", scales::comma(median_pop)), color = \"red\", size = 3, vjust = 1) +\n  labs(title = \"Population Numbers Aged 65+ by PA\", x = NULL, y = NULL) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 12, face = \"bold\"),\n    axis.text.y = element_text(size = 10),\n    plot.margin = margin(5, 30, 5, 5)  \n  ) +\n  scale_x_continuous(labels = scales::comma, expand = expansion(mult = c(0, 0.2)))\n\npct_plot &lt;- ggplot(plot_data, aes(x = PctOver65, y = PA)) +\n  geom_col(fill = \"#b6e2d3\") +\n  geom_text(aes(label = LabelPct), hjust = -0.2, size = 2.8) +\n  geom_vline(xintercept = median_pct, color = \"red\", linetype = \"dashed\", linewidth = 0.8) +\n annotate(\"text\", x = median_pct, y = 21.2, label = paste0(\"Median = \", round(median_pct, 1), \"%\"), color = \"red\", size = 3, vjust = 1)+\n  labs(title = \"% of Population Aged 65+ by PA\", x = NULL, y = NULL) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 12, face = \"bold\"),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    plot.margin = margin(5, 5, 5, 5)  # optional\n  ) +\n  scale_x_continuous(labels = scales::label_percent(scale = 1), expand = expansion(mult = c(0, 0.2)))\n\nfinal_chart &lt;- pop_plot + pct_plot +\n  plot_layout(ncol = 2, widths = c(1.1, 1)) +\n  plot_annotation(\n    title = \"Top 20 PAs with highest Elderly Population\",\n    theme = theme(\n      plot.title = element_text(hjust = 0.5, face = \"bold\", size = 16),\n      plot.subtitle = element_text(hjust = 0.5, size = 11)\n    )\n  )\n\nfinal_chart\n\n\n\n\n\n\n3.2.2 Insights\nThere are 10 PAs with elderly population aged 65 and above exceeding Singapore’s median. As the population size vary across PAs, it is important to compare the numbers and percentage of elderly population in each PA to understand the ageing profile. From both charts, we conclude that there are 4 PAs, namely Bedok, Ang Mo Kio, Bukit Merah and Toa Payoh that have both higher number and percentage of elderly population higher than the median. These are critical ageing towns that requires necessary infrastructure, healthcare and eldercare services to support mobility and active lifestyle.\nTowns like Tampines and Hougang also have high numbers of elderly population but with percentage of elderly population slightly below the median. These towns have more demographic mix, with younger populations residing. Given the high absolute number of elderly population, it is important to plan ahead and scale up infrastructure, healthcare and eldercare services too."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#dependency-ratio",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#dependency-ratio",
    "title": "Take-home Exercise 1: Demographic structures and distribution of Singapore in 2024",
    "section": "3.3 Dependency Ratio",
    "text": "3.3 Dependency Ratio\nDependency ratio measures the average number of economically dependent population per 100 economically productive population, for a given country, territory, or geographic area, at a specific point in time.\n\n3.3.1 Data preparation and Visualisation\nGiven the definitions mentioned under the overview, we create and sum up the population numbers in the following groups\n\nThose Age_DR &lt; 15 are “Dependent_0_14”\nThose Age_DR &gt;= 65 are “Dependent_65_plus”\nThose Age_DR &gt;= 15 & Age_DR &lt;= 64 are “Productive”\n\nThe codes for the groupings and data preparation are:\n\npop_data &lt;- read_csv(\"data/Demographic_data.csv\") %&gt;%\n  mutate(\n    Age_DR = if_else(Age == \"90_and_Over\", \"90\", as.character(Age)),\n    Age_DR = as.numeric(Age_DR),\n    Pop_DR = as.numeric(Pop),\n    AgeGroup_DR = case_when(\n      Age_DR &lt; 15 ~ \"Dependent_0_14\",\n      Age_DR &gt;= 65 ~ \"Dependent_65_plus\",\n      Age_DR &gt;= 15 & Age_DR &lt;= 64 ~ \"Productive\",\n      TRUE ~ NA_character_\n    )\n  )\n\npop_summary_DR &lt;- pop_data %&gt;%\n  filter(!is.na(AgeGroup_DR)) %&gt;%\n  group_by(PA, AgeGroup_DR) %&gt;%\n  summarise(Pop_DR = sum(Pop_DR, na.rm = TRUE), .groups = \"drop\")\n\n# Prepare wide table for Dependency Ratio calculation\npop_wide_DR &lt;- pop_summary_DR %&gt;%\n  pivot_wider(\n    names_from = AgeGroup_DR,\n    values_from = Pop_DR,\n    values_fill = 0\n  ) %&gt;%\n  mutate(\n    Dependent_DR = Dependent_0_14 + Dependent_65_plus,\n    Productive_DR = Productive,\n    DependencyRatio = round((Dependent_DR / Productive_DR) * 100, 1)\n  ) %&gt;%\n  filter(Productive_DR &gt; 0)\n\nThe Dependency ratio for the PA is computed with the following code:\n\n# Calculate median and 75th percentile\nmedian_DR &lt;- median(pop_wide_DR$DependencyRatio)\nq75_DR &lt;- quantile(pop_wide_DR$DependencyRatio, 0.75)\n\n# Create 3-category fill group\npop_wide_DR &lt;- pop_wide_DR %&gt;%\n  mutate(\n    FillGroup = case_when(\n      DependencyRatio &gt; q75_DR ~ \"Above 75th\",\n      DependencyRatio &gt; median_DR ~ \"Between Median–75th\",\n      TRUE ~ \"Below Median\"\n    )\n  )\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.3.2 Insights\nThe dependency ratio reflects the number of economically-dependent population (i.e. children under 15 and elderly above 65) supported by economically-productive population. This is usually measured at the national level, but the breakdown by PAs reveals variations in the demographic distribution. There are 11 PAs with dependency ratio exceeding 75th percentile (52.1%). As these towns have more children and elderly, it is recommended to priortise more mixed use infrastructure, co-located elder/ childcare facilities and community services catered for both groups. From housing perspective, Housing & Development Board can consider building more multi-generational flats for families to stay in the same neighbourhood.\nThere are also 10 PAs with dependency ratio between 50th to 75th percentile (46.6% to 52.1%). These are subsequent PAs that will benefit from better mixed-use urban planning. As infrastructure and facilities take years to build, the Government can intervene early to futureproof these neighbourhood and support the ageing population."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands-on Exercise 4A",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions.\n\n\n\n\n\nFor the purpose of this exercise, the following R packages will be used, they are:\n\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots,\nggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty,\ntidyverse, a family of R packages to meet the modern data science and visual communication needs,\nggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and\ncolorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\nThe code chunk below will be used load these R packages into RStudio environment.\n\npacman::p_load(ggdist, ggridges, ggthemes,                colorspace, tidyverse)\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\nRidgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\nFigure below is a ridgelines plot showing the distribution of English score by class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n\n\n\n\n\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = \"Class\", expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges() + theme(axis.title.x = element_text(hjust = 0.5), axis.title.y = element_text(hjust = 0.5))\n\n\n\n\n\n\n\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = \"Class\", expand = expansion(add = c(0.2, 2.6))) +\n   theme_ridges() + theme(axis.title.x = element_text(hjust = 0.5), axis.title.y = element_text(hjust = 0.5))\n\n\n\n\n\n\n\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()+ theme(axis.title.x = element_text(hjust = 0.5), axis.title.y = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\n\n\n\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges() + theme(axis.title.x = element_text(hjust = 0.5), axis.title.y = element_text(hjust = 0.5))\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges() + theme(axis.title.x = element_text(hjust = 0.5), axis.title.y = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, you will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\n\n\n\nReference\n\nIntroducing Ridgeline Plots (formerly Joyplots)\nClaus O. Wilke Fundamentals of Data Visualization especially Chapter 6, 7, 8, 9 and 10.\nAllen M, Poggiali D, Whitaker K et al. “Raincloud plots: a multi-platform tool for robust data. visualization” [version 2; peer review: 2 approved]. Welcome Open Res 2021, pp. 4:63.\nDots + interval stats and geoms"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#learning-outcome",
    "title": "Hands-on Exercise 4A",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#getting-started",
    "title": "Hands-on Exercise 4A",
    "section": "",
    "text": "For the purpose of this exercise, the following R packages will be used, they are:\n\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots,\nggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty,\ntidyverse, a family of R packages to meet the modern data science and visual communication needs,\nggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and\ncolorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\nThe code chunk below will be used load these R packages into RStudio environment.\n\npacman::p_load(ggdist, ggridges, ggthemes,                colorspace, tidyverse)\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-distribution-with-ridgeline-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-distribution-with-ridgeline-plot",
    "title": "Hands-on Exercise 4A",
    "section": "",
    "text": "Ridgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\nFigure below is a ridgelines plot showing the distribution of English score by class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n\n\n\n\n\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = \"Class\", expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges() + theme(axis.title.x = element_text(hjust = 0.5), axis.title.y = element_text(hjust = 0.5))\n\n\n\n\n\n\n\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = \"Class\", expand = expansion(add = c(0.2, 2.6))) +\n   theme_ridges() + theme(axis.title.x = element_text(hjust = 0.5), axis.title.y = element_text(hjust = 0.5))\n\n\n\n\n\n\n\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()+ theme(axis.title.x = element_text(hjust = 0.5), axis.title.y = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\n\n\n\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges() + theme(axis.title.x = element_text(hjust = 0.5), axis.title.y = element_text(hjust = 0.5))\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges() + theme(axis.title.x = element_text(hjust = 0.5), axis.title.y = element_text(hjust = 0.5))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-distribution-with-raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-distribution-with-raincloud-plot",
    "title": "Hands-on Exercise 4A",
    "section": "",
    "text": "Raincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, you will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\n\n\n\nReference\n\nIntroducing Ridgeline Plots (formerly Joyplots)\nClaus O. Wilke Fundamentals of Data Visualization especially Chapter 6, 7, 8, 9 and 10.\nAllen M, Poggiali D, Whitaker K et al. “Raincloud plots: a multi-platform tool for robust data. visualization” [version 2; peer review: 2 approved]. Welcome Open Res 2021, pp. 4:63.\nDots + interval stats and geoms"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04B.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04B.html",
    "title": "Hands-on Exercise 4B",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters\n\n\n\n\nggstatsplot  is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n- To provide alternative statistical inference methods by default. - To follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the [APA](https://my.ilstu.edu/~jhkahn/apastats.html) gold standard for statistical reporting. For example, here are results from a robust t-test:\n\n\n\n\n\n\nIn this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n\n\n\n\n\n\n\nDo-It-Yourself\n\n\n\nImporting Exam.csv data by using appropriate tidyverse package as follows:\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nThe plot6.3.4 Unpacking the Bayes Factor6.3.5 How to interpret Bayes Factor6.3.6 Two-sample mean test: ggbetweenstats()6.3.7 Oneway ANOVA Test: ggbetweenstats() method6.3.8 Significant Test of Correlation: ggscatterstats()6.3.9 Significant Test of Association (Depedence) : ggbarstats() methods\n\n\n\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\n\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\nxxxxx\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\nxxx\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\nxxxx\n\n\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\nxxxx\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\nxxxx"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04B.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04B.html#learning-outcome",
    "title": "Hands-on Exercise 4B",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04B.html#visual-statistical-analysis-with-ggstatsplot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04B.html#visual-statistical-analysis-with-ggstatsplot",
    "title": "Hands-on Exercise 4B",
    "section": "",
    "text": "ggstatsplot  is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n- To provide alternative statistical inference methods by default. - To follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the [APA](https://my.ilstu.edu/~jhkahn/apastats.html) gold standard for statistical reporting. For example, here are results from a robust t-test:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04B.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04B.html#getting-started",
    "title": "Hands-on Exercise 4B",
    "section": "",
    "text": "In this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n\n\n\n\n\n\n\nDo-It-Yourself\n\n\n\nImporting Exam.csv data by using appropriate tidyverse package as follows:\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nThe plot6.3.4 Unpacking the Bayes Factor6.3.5 How to interpret Bayes Factor6.3.6 Two-sample mean test: ggbetweenstats()6.3.7 Oneway ANOVA Test: ggbetweenstats() method6.3.8 Significant Test of Correlation: ggscatterstats()6.3.9 Significant Test of Association (Depedence) : ggbarstats() methods\n\n\n\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\n\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\nxxxxx\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\nxxx\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\nxxxx\n\n\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\nxxxx\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\nxxxx"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04C.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04C.html",
    "title": "Hands-on Exercise 4C",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this chapter, you will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter you will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package.\n\n\n\n\n\n\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\nxxxx\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\nxxx\n\n\n\n\nA point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.\nxxx\nImportant\n\nDon’t confuse the uncertainty of a point estimate with the variation in the sample\n\nIn this section, you will learn how to plot error bars of maths scores by race by using data provided in exam tibble data frame.\nFirstly, code chunk below will be used to derive the necessary summary statistics.\nxxxxx\n\nThings to learn from the code chunk above\n\ngroup_by() of dplyr package is used to group the observation by RACE,\nsummarise() is used to compute the count of observations, mean, standard deviation\nmutate() is used to derive standard error of Maths by RACE, and\nthe output is save as a tibble data table called my_sum.\n\nNote\nFor the mathematical explanation, please refer to Slide 20 of Lesson 4.\nNext, the code chunk below will be used to display my_sum tibble data frame in an html table format.\nxxx\n\n\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\nxxxx\n\n\n\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\nxxx\n\n\n\nIn this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\nxx\n\n\n\n\n\nggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\n\n\n\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\nxxxxx\n\nNote\nThis function comes with many arguments, students are advised to read the syntax reference for more detail.\nFor example, in the code chunk below the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\nxxxx\n\nYour turn\nMakeover the plot on previous slide by showing 95% and 99% confidence intervals.\nxxxx\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\n\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\nxxx\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\n\n\n\n\nxxx\nNote: You only need to perform this step once.\n\n\n\nxxx\n\n\n\nNext, the code chunk below will be used to build the HOPs.\nxxxx"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#learning-outcome",
    "title": "Hands-on Exercise 4C",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this chapter, you will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter you will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#getting-started",
    "title": "Hands-on Exercise 4C",
    "section": "",
    "text": "For the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\nxxxx\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\nxxx"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "title": "Hands-on Exercise 4C",
    "section": "",
    "text": "A point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.\nxxx\nImportant\n\nDon’t confuse the uncertainty of a point estimate with the variation in the sample\n\nIn this section, you will learn how to plot error bars of maths scores by race by using data provided in exam tibble data frame.\nFirstly, code chunk below will be used to derive the necessary summary statistics.\nxxxxx\n\nThings to learn from the code chunk above\n\ngroup_by() of dplyr package is used to group the observation by RACE,\nsummarise() is used to compute the count of observations, mean, standard deviation\nmutate() is used to derive standard error of Maths by RACE, and\nthe output is save as a tibble data table called my_sum.\n\nNote\nFor the mathematical explanation, please refer to Slide 20 of Lesson 4.\nNext, the code chunk below will be used to display my_sum tibble data frame in an html table format.\nxxx\n\n\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\nxxxx\n\n\n\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\nxxx\n\n\n\nIn this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\nxx"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#visualising-uncertainty-ggdist-package",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#visualising-uncertainty-ggdist-package",
    "title": "Hands-on Exercise 4C",
    "section": "",
    "text": "ggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\n\n\n\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\nxxxxx\n\nNote\nThis function comes with many arguments, students are advised to read the syntax reference for more detail.\nFor example, in the code chunk below the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\nxxxx\n\nYour turn\nMakeover the plot on previous slide by showing 95% and 99% confidence intervals.\nxxxx\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\n\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\nxxx\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "title": "Hands-on Exercise 4C",
    "section": "",
    "text": "xxx\nNote: You only need to perform this step once.\n\n\n\nxxx\n\n\n\nNext, the code chunk below will be used to build the HOPs.\nxxxx"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html",
    "title": "Hands-on Exercise 4D",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages.\n\n\n\n\nIn this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\nxxxx\n\n\n\nIn this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\nxxxx\n\n\n\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n\nThe code chunk below plots a funnel plot.\nxxxx\nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\nThe code chunk below plots a funnel plot.\nxxx\nThings to learn from the code chunk above. + data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis\n\n\n\nThe code chunk below plots a funnel plot.\nxxx\nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles.\n\n\n\n\n\nIn this section, you will gain hands-on experience on building funnel plots step-by-step by using ggplot2. It aims to enhance you working experience of ggplot2 to customise speciallised data visualisation like funnel plot.\n\n\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\nxxx\nNext, the fit.mean is computed by using the code chunk below.\nxxx\n\n\n\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\nxx\n\n\n\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\nxxx\n\n\n\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\nxxxx\n\n\n\n\n\nfunnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#overview",
    "title": "Hands-on Exercise 4D",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 4D",
    "section": "",
    "text": "In this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\nxxxx"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#importing-data",
    "title": "Hands-on Exercise 4D",
    "section": "",
    "text": "In this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\nxxxx"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#funnelplotr-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#funnelplotr-methods",
    "title": "Hands-on Exercise 4D",
    "section": "",
    "text": "FunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n\nThe code chunk below plots a funnel plot.\nxxxx\nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\nThe code chunk below plots a funnel plot.\nxxx\nThings to learn from the code chunk above. + data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis\n\n\n\nThe code chunk below plots a funnel plot.\nxxx\nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "title": "Hands-on Exercise 4D",
    "section": "",
    "text": "In this section, you will gain hands-on experience on building funnel plots step-by-step by using ggplot2. It aims to enhance you working experience of ggplot2 to customise speciallised data visualisation like funnel plot.\n\n\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\nxxx\nNext, the fit.mean is computed by using the code chunk below.\nxxx\n\n\n\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\nxx\n\n\n\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\nxxx\n\n\n\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\nxxxx"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#references",
    "title": "Hands-on Exercise 4D",
    "section": "",
    "text": "funnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package."
  }
]