[
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "In the code chunk below, p_load() of pacman packages is used to load the R packages into R environment:\n\npacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph)\n\n\n\n\nin the code chunk below, ‘fromJSON()’ of undefined\n\nkg &lt;- fromJSON(\"MC1/data/MC1_graph.json\")\n\n\n\n\nstr(kg, max.level = 1)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\n\n\n\n\nnodes_tbl &lt;-as_tibble(kg$nodes)\nedges_tbl &lt;-as_tibble(kg$links)\n\n\n\n\n\n\nggplot(data = edges_tbl,\n       aes(y = `Edge Type`)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nOn the other hands, code chunk below uses ggplot2 functions to reveal the frequency distribution of Node Type field of nodes_tbl.\n\nggplot(data = nodes_tbl,\n       aes(y = `Node Type`)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nBefore we can go ahead to build the tidygraph object, it is important for us to ensures each id from the node list is mapped to the correct row number. This requirement can be achive by using the code chunk below.\n\n\n\nid_map &lt;- tibble(id = nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n\nThis ensures each id from your node list is mapped to the correct row number.\n\n\n\nNext, we will map the source and the target IDs to row indices by using the code chunk below.\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\nNote: To better understand the changes before and after the process, it is to take a screenshot of edges_tbl before and after this process and examine the differences.\n\n\n\nLastly, the code chunk below will be used to exclude the unmatch edges.\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\n\nLastly, tbl_graph() is used to create tidygraph’s graph object by using the code chunk below.\n\ngraph &lt;- tbl_graph(nodes = nodes_tbl, edges = edges_tbl, directed = kg$directed)\n\nYou might want to confirm the output object is indeed in tidygraph format by using the code chunk below.\n\nclass(graph)\n\n[1] \"tbl_graph\" \"igraph\"   \n\n\n\n\n\n\nIn this section, we will use ggraph’s functions to visualise and analyse the graph object.\nWarning: The two examples below are not model answers, they are examples to show you how to use the mantra of Overview first, details on demand of visual investigation.\nSeveral of the ggraph layouts involve randomisation. In order to ensure reproducibility, it is necessary to set the seed value before plotting by using the code chunk below.\n\nset.seed(1234)\n\n\n\n\nIn the code chunk below, ggraph functions are used to visualise the whole graph.\n\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3, colour = \"gray\") + \n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 2.5) +    #repel will force word to be apart\n  theme_void()\n\nNotice that the whole graph is very messy and we can hardy discover any useful patterns. This is always the case in graph visualisation and analysis. In order to gain meaningful visual discovery, it is always useful for us to looking into the details, for example by plotting sub-graphs.\n\n\nIn this section, we are interested to create a sub-graph base on MemberOf value in Edge Type column of the edges data frame.\n\n\n\ngraph_memberof &lt;-graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")  #filter away the edge, nodes are still there \n\n\n\n\n\nused_node_indices &lt;- graph_memberof %&gt;%  #eliminate away orphan nodes\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\n\n\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id) # optional clean up\n\n\n\n\n\nggraph(graph_memberof, layout = \"fr\") +\n  geom_edge_link(alpha = 0.5, colour = \"gray\") + \n  geom_node_point(aes(color= `Node Type`),\n                  size = 1) + \n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) + \n  theme_void()\n\n\n\n\n\n\n\n# they stay with their group for quite long\n# change to interactive so that can hover and see all labels\n\nNotice that the sub-graph above is very clear and the relationship between musical group and person can be visualise easily.\nNote: They stay with their group for quite long. May want to change to interactive so that we can hover and see all labels."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html#load-packages",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html#load-packages",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "In the code chunk below, p_load() of pacman packages is used to load the R packages into R environment:\n\npacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html#importing-data",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html#importing-data",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "in the code chunk below, ‘fromJSON()’ of undefined\n\nkg &lt;- fromJSON(\"MC1/data/MC1_graph.json\")\n\n\n\n\nstr(kg, max.level = 1)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\n\n\n\n\nnodes_tbl &lt;-as_tibble(kg$nodes)\nedges_tbl &lt;-as_tibble(kg$links)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html#initiate-eda",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html#initiate-eda",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "ggplot(data = edges_tbl,\n       aes(y = `Edge Type`)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nOn the other hands, code chunk below uses ggplot2 functions to reveal the frequency distribution of Node Type field of nodes_tbl.\n\nggplot(data = nodes_tbl,\n       aes(y = `Node Type`)) +\n  geom_bar()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html#create-knowledge-graph",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html#create-knowledge-graph",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "Before we can go ahead to build the tidygraph object, it is important for us to ensures each id from the node list is mapped to the correct row number. This requirement can be achive by using the code chunk below.\n\n\n\nid_map &lt;- tibble(id = nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n\nThis ensures each id from your node list is mapped to the correct row number.\n\n\n\nNext, we will map the source and the target IDs to row indices by using the code chunk below.\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\nNote: To better understand the changes before and after the process, it is to take a screenshot of edges_tbl before and after this process and examine the differences.\n\n\n\nLastly, the code chunk below will be used to exclude the unmatch edges.\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\n\nLastly, tbl_graph() is used to create tidygraph’s graph object by using the code chunk below.\n\ngraph &lt;- tbl_graph(nodes = nodes_tbl, edges = edges_tbl, directed = kg$directed)\n\nYou might want to confirm the output object is indeed in tidygraph format by using the code chunk below.\n\nclass(graph)\n\n[1] \"tbl_graph\" \"igraph\""
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html#visualising-the-knowledge-graph",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html#visualising-the-knowledge-graph",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "In this section, we will use ggraph’s functions to visualise and analyse the graph object.\nWarning: The two examples below are not model answers, they are examples to show you how to use the mantra of Overview first, details on demand of visual investigation.\nSeveral of the ggraph layouts involve randomisation. In order to ensure reproducibility, it is necessary to set the seed value before plotting by using the code chunk below.\n\nset.seed(1234)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html#visualising-the-whole-graph",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html#visualising-the-whole-graph",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "In the code chunk below, ggraph functions are used to visualise the whole graph.\n\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3, colour = \"gray\") + \n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 2.5) +    #repel will force word to be apart\n  theme_void()\n\nNotice that the whole graph is very messy and we can hardy discover any useful patterns. This is always the case in graph visualisation and analysis. In order to gain meaningful visual discovery, it is always useful for us to looking into the details, for example by plotting sub-graphs.\n\n\nIn this section, we are interested to create a sub-graph base on MemberOf value in Edge Type column of the edges data frame.\n\n\n\ngraph_memberof &lt;-graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")  #filter away the edge, nodes are still there \n\n\n\n\n\nused_node_indices &lt;- graph_memberof %&gt;%  #eliminate away orphan nodes\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\n\n\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id) # optional clean up\n\n\n\n\n\nggraph(graph_memberof, layout = \"fr\") +\n  geom_edge_link(alpha = 0.5, colour = \"gray\") + \n  geom_node_point(aes(color= `Node Type`),\n                  size = 1) + \n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) + \n  theme_void()\n\n\n\n\n\n\n\n# they stay with their group for quite long\n# change to interactive so that can hover and see all labels\n\nNotice that the sub-graph above is very clear and the relationship between musical group and person can be visualise easily.\nNote: They stay with their group for quite long. May want to change to interactive so that we can hover and see all labels."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "Interactive dashboard was created on Tableau."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class Exercise 2",
    "section": "",
    "text": "Interactive dashboard was created on Tableau."
  }
]