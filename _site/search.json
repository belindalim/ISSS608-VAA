[
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "In the code chunk below, p_load() of pacman packages is used to load the R packages into R environment:\n\npacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph)\n\n\n\n\nIn the code chunk below, fromJSON() of jsonlite package is used to import MC1_graph.json file into R and save the output object\n\nkg &lt;- fromJSON(\"MC1/data/MC1_graph.json\")\n\n\n\n\nstr(kg, max.level = 1)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\n\n\n\n\nnodes_tbl &lt;-as_tibble(kg$nodes)\nedges_tbl &lt;-as_tibble(kg$links)\n\n\n\n\n\n\nggplot(data = edges_tbl,\n       aes(y = `Edge Type`)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nOn the other hands, code chunk below uses ggplot2 functions to reveal the frequency distribution of Node Type field of nodes_tbl.\n\nggplot(data = nodes_tbl,\n       aes(y = `Node Type`)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nBefore we can go ahead to build the tidygraph object, it is important for us to ensures each id from the node list is mapped to the correct row number. This requirement can be achive by using the code chunk below.\n\n\n\nid_map &lt;- tibble(id = nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n\nThis ensures each id from your node list is mapped to the correct row number.\n\n\n\nNext, we will map the source and the target IDs to row indices by using the code chunk below.\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\nNote: To better understand the changes before and after the process, it is to take a screenshot of edges_tbl before and after this process and examine the differences.\n\n\n\nLastly, the code chunk below will be used to exclude the unmatch edges.\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\n\nLastly, tbl_graph() is used to create tidygraph’s graph object by using the code chunk below.\n\ngraph &lt;- tbl_graph(nodes = nodes_tbl, edges = edges_tbl, directed = kg$directed)\n\nYou might want to confirm the output object is indeed in tidygraph format by using the code chunk below.\n\nclass(graph)\n\n[1] \"tbl_graph\" \"igraph\"   \n\n\n\n\n\n\nIn this section, we will use ggraph’s functions to visualise and analyse the graph object.\nWarning: The two examples below are not model answers, they are examples to show you how to use the mantra of Overview first, details on demand of visual investigation.\nSeveral of the ggraph layouts involve randomisation. In order to ensure reproducibility, it is necessary to set the seed value before plotting by using the code chunk below.\n\nset.seed(1234)\n\n\n\n\nIn the code chunk below, ggraph functions are used to visualise the whole graph.\n\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3, colour = \"gray\") + \n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 2.5) +    #repel will force word to be apart\n  theme_void()\n\nNotice that the whole graph is very messy and we can hardy discover any useful patterns. This is always the case in graph visualisation and analysis. In order to gain meaningful visual discovery, it is always useful for us to looking into the details, for example by plotting sub-graphs.\n\n\nIn this section, we are interested to create a sub-graph base on MemberOf value in Edge Type column of the edges data frame.\n\n\n\ngraph_memberof &lt;-graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")  #filter away the edge, nodes are still there \n\n\n\n\n\nused_node_indices &lt;- graph_memberof %&gt;%  #eliminate away orphan nodes\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\n\n\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id) # optional clean up\n\n\n\n\n\nggraph(graph_memberof, layout = \"fr\") +\n  geom_edge_link(alpha = 0.5, colour = \"gray\") + \n  geom_node_point(aes(color= `Node Type`),\n                  size = 1) + \n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) + \n  theme_void()\n\n\n\n\n\n\n\n# they stay with their group for quite long\n# change to interactive so that can hover and see all labels\n\nNotice that the sub-graph above is very clear and the relationship between musical group and person can be visualise easily.\nNote: They stay with their group for quite long. May want to change to interactive so that we can hover and see all labels."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html#load-packages",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html#load-packages",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "In the code chunk below, p_load() of pacman packages is used to load the R packages into R environment:\n\npacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html#importing-data",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html#importing-data",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "In the code chunk below, fromJSON() of jsonlite package is used to import MC1_graph.json file into R and save the output object\n\nkg &lt;- fromJSON(\"MC1/data/MC1_graph.json\")\n\n\n\n\nstr(kg, max.level = 1)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\n\n\n\n\nnodes_tbl &lt;-as_tibble(kg$nodes)\nedges_tbl &lt;-as_tibble(kg$links)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html#initiate-eda",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html#initiate-eda",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "ggplot(data = edges_tbl,\n       aes(y = `Edge Type`)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nOn the other hands, code chunk below uses ggplot2 functions to reveal the frequency distribution of Node Type field of nodes_tbl.\n\nggplot(data = nodes_tbl,\n       aes(y = `Node Type`)) +\n  geom_bar()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html#create-knowledge-graph",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html#create-knowledge-graph",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "Before we can go ahead to build the tidygraph object, it is important for us to ensures each id from the node list is mapped to the correct row number. This requirement can be achive by using the code chunk below.\n\n\n\nid_map &lt;- tibble(id = nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n\nThis ensures each id from your node list is mapped to the correct row number.\n\n\n\nNext, we will map the source and the target IDs to row indices by using the code chunk below.\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\nNote: To better understand the changes before and after the process, it is to take a screenshot of edges_tbl before and after this process and examine the differences.\n\n\n\nLastly, the code chunk below will be used to exclude the unmatch edges.\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\n\nLastly, tbl_graph() is used to create tidygraph’s graph object by using the code chunk below.\n\ngraph &lt;- tbl_graph(nodes = nodes_tbl, edges = edges_tbl, directed = kg$directed)\n\nYou might want to confirm the output object is indeed in tidygraph format by using the code chunk below.\n\nclass(graph)\n\n[1] \"tbl_graph\" \"igraph\""
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html#visualising-the-knowledge-graph",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html#visualising-the-knowledge-graph",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "In this section, we will use ggraph’s functions to visualise and analyse the graph object.\nWarning: The two examples below are not model answers, they are examples to show you how to use the mantra of Overview first, details on demand of visual investigation.\nSeveral of the ggraph layouts involve randomisation. In order to ensure reproducibility, it is necessary to set the seed value before plotting by using the code chunk below.\n\nset.seed(1234)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html#visualising-the-whole-graph",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03MC1.html#visualising-the-whole-graph",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "In the code chunk below, ggraph functions are used to visualise the whole graph.\n\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3, colour = \"gray\") + \n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 2.5) +    #repel will force word to be apart\n  theme_void()\n\nNotice that the whole graph is very messy and we can hardy discover any useful patterns. This is always the case in graph visualisation and analysis. In order to gain meaningful visual discovery, it is always useful for us to looking into the details, for example by plotting sub-graphs.\n\n\nIn this section, we are interested to create a sub-graph base on MemberOf value in Edge Type column of the edges data frame.\n\n\n\ngraph_memberof &lt;-graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")  #filter away the edge, nodes are still there \n\n\n\n\n\nused_node_indices &lt;- graph_memberof %&gt;%  #eliminate away orphan nodes\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\n\n\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id) # optional clean up\n\n\n\n\n\nggraph(graph_memberof, layout = \"fr\") +\n  geom_edge_link(alpha = 0.5, colour = \"gray\") + \n  geom_node_point(aes(color= `Node Type`),\n                  size = 1) + \n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) + \n  theme_void()\n\n\n\n\n\n\n\n# they stay with their group for quite long\n# change to interactive so that can hover and see all labels\n\nNotice that the sub-graph above is very clear and the relationship between musical group and person can be visualise easily.\nNote: They stay with their group for quite long. May want to change to interactive so that we can hover and see all labels."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "Interactive dashboard was created on Tableau."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class Exercise 2",
    "section": "",
    "text": "Interactive dashboard was created on Tableau."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-Home Exercise 2",
    "section": "",
    "text": "The case was extracted from VAST Challenge 2025.\n\n\nOne of music’s biggest superstars is Oceanus native Sailor Shift. From humble beginnings, Sailor has grown in popularity and now enjoys fans around the world. Sailor started her career on the island nation of Oceanus which can be clearly seen in her early work, she started in the genre of “Oceanus Folk”. While Sailor has moved away from the traditional Oceanus style, the Oceanus Folk has made a name for itself in the musical world. The popularity of this music is one of the factors driving an increase in tourism to a quiet island nation that used to be known for fishing.\nIn 2023, Sailor Shift joined the Ivy Echoes – an all-female Oceanus Folk band consisting of Sailor (vocalist), Maya Jensen (vocalist), Lila “Lilly” Hartman (guitarist), Jade Thompson (drummer), and Sophie Ramirez (bassist). They played together at venues throughout Oceanus but had broken up to pursue their individual careers by 2026. Sailor’s breakthrough came in 2028 when one of her singles went viral, launched to the top of the global charts (something no other Oceanus Folk song had ever done). Since then, she has only continued to grow in popularity worldwide.\nSailor has released a new album almost every year since her big break, and each has done better than the last. Although she has remained primarily a solo artist, she has also frequently collaborated with other established artists, especially in the Indie Pop and Indie Folk genres. She herself has branched out musically over the years but regularly returns to the Oceanus Folk genre — even as the genre’s influence on the rest of the music world has spread even more.\nSailor has always been passionate about two things: (1) spreading Oceanus Folk, and (2) helping lesser-known artists break into music. Because of those goals, she’s particularly famous for her frequent collaborations.\nAdditionally, because of Sailor’s success, more attention began to be paid over the years to her previous bandmates. All 4 have continued in the music industry—Maya as an independent vocalist, Lilly and Jade as instrumentalists in other bands, and Sophie as a music producer for a major record label. In various ways, all of them have contributed to the increased influence of Oceanus folk, resulting in a new generation of up-and-coming Oceanus Folk artists seeking to make a name for themselves in the music industry.\nNow, as Sailor returns to Oceanus in 2040, a local journalist – Silas Reed – is writing a piece titled Oceanus Folk: Then-and-Now that aims to trace the rise of Sailor and the influence of Oceanus Folk on the rest of the music world. He has collected a large dataset of musical artists, producers, albums, songs, and influences and organized it into a knowledge graph. Your task is to help Silas create beautiful and informative visualizations of this data and uncover new and interesting information about Sailor’s past, her rise to stardom, and her influence.\n\n\n\n\nDesign and develop visualizations and visual analytic tools that will allow Silas to explore and understand the profile of Sailor Shift’s career\n\nWho has she been most influenced by over time?\nWho has she collaborated with and directly or indirectly influenced?\nHow has she influenced collaborators of the broader Oceanus Folk community?\n\nDevelop visualizations that illustrate how the influence of Oceanus Folk has spread through the musical world.\n\nWas this influence intermittent or did it have a gradual rise?\nWhat genres and top artists have been most influenced by Oceanus Folk?\nOn the converse, how has Oceanus Folk changed with the rise of Sailor Shift? From which genres does it draw most of its contemporary inspiration?\n\nUse your visualizations to develop a profile of what it means to be a rising star in the music industry.\n\nVisualize the careers of three artists. Compare and contrast their rise in popularity and influence.\nUsing this characterization, give three predictions of who the next Oceanus Folk stars with be over the next five years."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#background",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#background",
    "title": "Take-Home Exercise 2",
    "section": "",
    "text": "One of music’s biggest superstars is Oceanus native Sailor Shift. From humble beginnings, Sailor has grown in popularity and now enjoys fans around the world. Sailor started her career on the island nation of Oceanus which can be clearly seen in her early work, she started in the genre of “Oceanus Folk”. While Sailor has moved away from the traditional Oceanus style, the Oceanus Folk has made a name for itself in the musical world. The popularity of this music is one of the factors driving an increase in tourism to a quiet island nation that used to be known for fishing.\nIn 2023, Sailor Shift joined the Ivy Echoes – an all-female Oceanus Folk band consisting of Sailor (vocalist), Maya Jensen (vocalist), Lila “Lilly” Hartman (guitarist), Jade Thompson (drummer), and Sophie Ramirez (bassist). They played together at venues throughout Oceanus but had broken up to pursue their individual careers by 2026. Sailor’s breakthrough came in 2028 when one of her singles went viral, launched to the top of the global charts (something no other Oceanus Folk song had ever done). Since then, she has only continued to grow in popularity worldwide.\nSailor has released a new album almost every year since her big break, and each has done better than the last. Although she has remained primarily a solo artist, she has also frequently collaborated with other established artists, especially in the Indie Pop and Indie Folk genres. She herself has branched out musically over the years but regularly returns to the Oceanus Folk genre — even as the genre’s influence on the rest of the music world has spread even more.\nSailor has always been passionate about two things: (1) spreading Oceanus Folk, and (2) helping lesser-known artists break into music. Because of those goals, she’s particularly famous for her frequent collaborations.\nAdditionally, because of Sailor’s success, more attention began to be paid over the years to her previous bandmates. All 4 have continued in the music industry—Maya as an independent vocalist, Lilly and Jade as instrumentalists in other bands, and Sophie as a music producer for a major record label. In various ways, all of them have contributed to the increased influence of Oceanus folk, resulting in a new generation of up-and-coming Oceanus Folk artists seeking to make a name for themselves in the music industry.\nNow, as Sailor returns to Oceanus in 2040, a local journalist – Silas Reed – is writing a piece titled Oceanus Folk: Then-and-Now that aims to trace the rise of Sailor and the influence of Oceanus Folk on the rest of the music world. He has collected a large dataset of musical artists, producers, albums, songs, and influences and organized it into a knowledge graph. Your task is to help Silas create beautiful and informative visualizations of this data and uncover new and interesting information about Sailor’s past, her rise to stardom, and her influence."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#tasks-and-questions",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#tasks-and-questions",
    "title": "Take-Home Exercise 2",
    "section": "",
    "text": "Design and develop visualizations and visual analytic tools that will allow Silas to explore and understand the profile of Sailor Shift’s career\n\nWho has she been most influenced by over time?\nWho has she collaborated with and directly or indirectly influenced?\nHow has she influenced collaborators of the broader Oceanus Folk community?\n\nDevelop visualizations that illustrate how the influence of Oceanus Folk has spread through the musical world.\n\nWas this influence intermittent or did it have a gradual rise?\nWhat genres and top artists have been most influenced by Oceanus Folk?\nOn the converse, how has Oceanus Folk changed with the rise of Sailor Shift? From which genres does it draw most of its contemporary inspiration?\n\nUse your visualizations to develop a profile of what it means to be a rising star in the music industry.\n\nVisualize the careers of three artists. Compare and contrast their rise in popularity and influence.\nUsing this characterization, give three predictions of who the next Oceanus Folk stars with be over the next five years."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#load-packages",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#load-packages",
    "title": "Take-Home Exercise 2",
    "section": "2.1 Load packages",
    "text": "2.1 Load packages\nIn the code chunk below, p_load() of pacman packages is used to load the R packages into R environment:\n\npacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-data",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-data",
    "title": "Take-Home Exercise 2",
    "section": "2.2 Importing Data",
    "text": "2.2 Importing Data\nIn the code chunk below, fromJSON() of jsonlite package is used to import MC1_graph.json file into R and save the output object\n\nkg &lt;- fromJSON(\"MC1data/MC1_graph.json\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#inspect-structure",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#inspect-structure",
    "title": "Take-Home Exercise 2",
    "section": "2.3 Inspect Structure",
    "text": "2.3 Inspect Structure\n\nstr(kg, max.level = 1)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#extract-and-inspect",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#extract-and-inspect",
    "title": "Take-Home Exercise 2",
    "section": "2.4 Extract and Inspect",
    "text": "2.4 Extract and Inspect\n\nnodes_tbl &lt;-as_tibble(kg$nodes)\nedges_tbl &lt;-as_tibble(kg$links)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#create-knowledge-graph",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#create-knowledge-graph",
    "title": "Take-Home Exercise 2",
    "section": "3.1 Create Knowledge Graph",
    "text": "3.1 Create Knowledge Graph\nBefore we can go ahead to build the tidygraph object, it is important for us to ensures each id from the node list is mapped to the correct row number. This requirement can be achive by using the code chunk below.\n\nStep 1: Mapping from node id to row index\n\nid_map &lt;- tibble(id = nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n\nThis ensures each id from your node list is mapped to the correct row number.\n\n\nStep 2: Map source and target IDs to row indices\nNext, we will map the source and the target IDs to row indices by using the code chunk below.\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\nNote: To better understand the changes before and after the process, it is to take a screenshot of edges_tbl before and after this process and examine the differences.\n\n\nStep 3: Filter out any unmatched (invalid) edges\nLastly, the code chunk below will be used to exclude the unmatch edges.\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\nStep 4: Creating the graph\nLastly, tbl_graph() is used to create tidygraph’s graph object by using the code chunk below.\n\ngraph &lt;- tbl_graph(nodes = nodes_tbl, edges = edges_tbl, directed = kg$directed)\n\nYou might want to confirm the output object is indeed in tidygraph format by using the code chunk below.\n\nclass(graph)\n\n[1] \"tbl_graph\" \"igraph\""
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualising-the-knowledge-graph",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualising-the-knowledge-graph",
    "title": "Take-Home Exercise 2",
    "section": "3.2 Visualising the Knowledge graph",
    "text": "3.2 Visualising the Knowledge graph\nIn this section, we will use ggraph’s functions to visualise and analyse the graph object.\nWarning: The two examples below are not model answers, they are examples to show you how to use the mantra of Overview first, details on demand of visual investigation.\nSeveral of the ggraph layouts involve randomisation. In order to ensure reproducibility, it is necessary to set the seed value before plotting by using the code chunk below.\n\nset.seed(1234)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualising-the-whole-graph",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualising-the-whole-graph",
    "title": "Take-Home Exercise 2",
    "section": "3.3 Visualising the whole graph",
    "text": "3.3 Visualising the whole graph\nIn the code chunk below, ggraph functions are used to visualise the whole graph.\n\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3, colour = \"gray\") + \n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 2.5) +    #repel will force word to be apart\n  theme_void()\n\nNotice that the whole graph is very messy and we can hardy discover any useful patterns. This is always the case in graph visualisation and analysis. In order to gain meaningful visual discovery, it is always useful for us to looking into the details, for example by plotting sub-graphs."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualising-the-sub-graph",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualising-the-sub-graph",
    "title": "Take-Home Exercise 2",
    "section": "3.4 Visualising the sub-graph",
    "text": "3.4 Visualising the sub-graph\nIn this section, we are interested to create a sub-graph base on MemberOf value in Edge Type column of the edges data frame.\n\nStep 1: Filter edges to only “MemberOf”\n\ngraph_memberof &lt;-graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")  #filter away the edge, nodes are still there \n\n\n\nStep 2: Extract only connected nodes (i.e., used in these edges)\n\nused_node_indices &lt;- graph_memberof %&gt;%  #eliminate away orphan nodes\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\nStep 3: Keeping only those nodes\n\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id) # optional clean up\n\n\n\nStep 4: Plot the sub-graph\n\nggraph(graph_memberof, layout = \"fr\") +\n  geom_edge_link(alpha = 0.5, colour = \"gray\") + \n  geom_node_point(aes(color= `Node Type`),\n                  size = 1) + \n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) + \n  theme_void()\n\n\n\n\n\n\n\n# they stay with their group for quite long\n# change to interactive so that can hover and see all labels"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Belinda’s ISSS608-VAA Journey",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications.\nIn this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "index.html#recent-projects",
    "href": "index.html#recent-projects",
    "title": "Belinda’s ISSS608-VAA Journey",
    "section": "Recent Projects",
    "text": "Recent Projects\n\n\n\n\n\nHands-on Exercise 3\nExplore advanced ggplot2 techniques, including enhanced annotations with ggrepel, professional theming using ggthemes and hrbrthemes, and creating composite figures with the patchwork package.\nView Hands-on Exercises\n\n\n\n\n\n\n\nHands-on Exercise 2\nExplore advanced ggplot2 techniques, including enhanced annotations with ggrepel, professional theming using ggthemes and hrbrthemes, and creating composite figures with the patchwork package.\nView Hands-on Exercises\n\n\n\n\n\n\n\nHands-on Exercise 1\nIntroduce the concepts and components of ggplot2, focusing on the Layered Grammar of Graphics to create effective and elegant statistical visualizations in R.\nView Hands-on Exercises\n\n\n\n\n\n\n\nTake-home Exercises\nDemographic structures and distribution of Singapore in 2024.\nView Take-home Exercises\n\n\n\n\n\n\n\nIn-class Exercises\nVisual analytics done collaboratively during class sessions.\nView In-class Exercises\n\n\n\n\n\n\n\nGroup Project\nGroup project involving data storytelling.\nView Project"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "By the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a slopegraph\nplotting a horizon chart\n\n\n\n\nThe code chunk to check, install and launch the following R packages: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse is as follows.\n\n\nShow the code\n\n\npacman::p_load(scales, viridis, lubridate, ggthemes,\n               gridExtra, readxl, knitr, data.table,\n               CGPfunctions, ggHoriPlot, tidyverse)\n\n\n\n\nIn this section, you will learn how to plot a calender heatmap programmatically by using ggplot2 package.\n\nBy the end of this section, you will be able to:\n\nplot a calender heatmap by using ggplot2 functions and extension,\nto write function using R programming,\nto derive specific date and time related field by using base R and lubridate packages\nto perform data preparation task by using tidyr and dplyr packages.\n\n\n\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\n\nFirst, you will use the code chunk below to import eventlog.csv file into R environment and called the data frame as attacks.\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\n\n\n\nIt is always a good practice to examine the imported data frame before further analysis is performed.\nFor example, kable() can be used to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\ntz field stores time zone of the source IP address.\n\n\n\n\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n}\n\n\n\n\n\n\n\nNote\n\n\n\n\nymd_hms() and hour() are from lubridate package, and\nweekdays() is a base R function.\n\n\n\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\n\n\n\n\n\n\nNote\n\n\n\nBeside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting.\n\n\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\n\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk\n\n\n\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data.\n\n\n\nChallenge: Building multiple heatmaps for the top four countries with the highest number of attacks (see steps below).\n\n\n\n\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\nStep 2: Preparing the tidy data frame\nIn this step, you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\n\n\n\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 12),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 12),\n        legend.text = element_text(size = 12) )\n\n\n\n\n\n\n\n\n\n\n\n\nIn this section, you will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n\n\n\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\n\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))\n\n\n\n\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)\n\n\n\n\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\n\nThe code chunk below is used to plot the cycle plot as shown earlier.\n\nggplot() + \n  geom_line(data = Vietnam,\n            aes(x = year, \n                y = `Vietnam`, \n                group = month), \n            colour = \"black\") +\n  geom_hline(data = hline.data, \n             aes(yintercept = avgvalue), \n             linetype = \"dashed\", \n             colour = \"red\", \n             size = 0.5) + \n  facet_grid(~month) +\n  labs(title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\",\n       x = \"\", \n       y = \"No. of Visitors\") +   \n  theme_minimal(base_family = \"Helvetica\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8))\n\n\n\n\n\n\n\n\n\n\n\n\nIn this section you will learn how to plot a slopegraph by using R.\nBefore getting start, make sure that CGPfunctions has been installed and loaded onto R environment. Then, refer to Using newggslopegraph to learn more about the function. Lastly, read more about newggslopegraph() and its arguments by referring to this link.\n\n\nImport the rice data set into R environment by using the code chunk below.\n\nrice &lt;- read_csv(\"data/rice.csv\")\n\n\n\n\nNext, code chunk below will be used to plot a basic slopegraph as shown below.\n\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Dr. Kam Tin Seong\")\n\n\n\n\n\n\n\n\nThe alternative chart created by myself:\n\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  \n  newggslopegraph(\n    Times = Year,\n    Measurement = Yield,\n    Grouping = Country,\n    Title = \"Rice Yield of Top 11 Asian Countries\",\n    SubTitle = \"1961–1980\",\n    Caption = \"Prepared by: Belinda Lim\",\n    DataTextSize = 2,\n    LineThickness = 1.1,\n    RemoveMissing = TRUE,\n    WiderLabels = TRUE\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above\n\n\n\nFor effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#learning-outcome",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "By the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a slopegraph\nplotting a horizon chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#do-it-yourself",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#do-it-yourself",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "Write a code chunk to check, install and launch the following R packages: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse.\n\n\nShow the code\n\n\npacman::p_load(scales, viridis, lubridate, ggthemes,\n               gridExtra, readxl, knitr, data.table,\n               CGPfunctions, ggHoriPlot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-calendar-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-calendar-heatmap",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "In this section, you will learn how to plot a calender heatmap programmatically by using ggplot2 package.\n\nBy the end of this section, you will be able to:\n\nplot a calender heatmap by using ggplot2 functions and extension,\nto write function using R programming,\nto derive specific date and time related field by using base R and lubridate packages\nto perform data preparation task by using tidyr and dplyr packages.\n\n\n\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\n\nFirst, you will use the code chunk below to import eventlog.csv file into R environment and called the data frame as attacks.\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\n\n\n\nIt is always a good practice to examine the imported data frame before further analysis is performed.\nFor example, kable() can be used to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\ntz field stores time zone of the source IP address.\n\n\n\n\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n}\n\n\n\n\n\n\n\nNote\n\n\n\n\nymd_hms() and hour() are from lubridate package, and\nweekdays() is a base R function.\n\n\n\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\n\n\n\n\n\n\nNote\n\n\n\nBeside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting.\n\n\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\n\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk\n\n\n\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data.\n\n\n\nChallenge: Building multiple heatmaps for the top four countries with the highest number of attacks (see steps below).\n\n\n\n\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\nStep 2: Preparing the tidy data frame\nIn this step, you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\n\n\n\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 12),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 12),\n        legend.text = element_text(size = 12) )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-cycle-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-cycle-plot",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "In this section, you will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n\n\n\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\n\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))\n\n\n\n\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)\n\n\n\n\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\n\nThe code chunk below is used to plot the cycle plot as shown earlier.\n\nggplot() + \n  geom_line(data = Vietnam,\n            aes(x = year, \n                y = `Vietnam`, \n                group = month), \n            colour = \"black\") +\n  geom_hline(data = hline.data, \n             aes(yintercept = avgvalue), \n             linetype = \"dashed\", \n             colour = \"red\", \n             size = 0.5) + \n  facet_grid(~month) +\n  labs(title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\",\n       x = \"\", \n       y = \"No. of Visitors\") +   \n  theme_minimal(base_family = \"Helvetica\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-slopegraph",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-slopegraph",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "In this section you will learn how to plot a slopegraph by using R.\nBefore getting start, make sure that CGPfunctions has been installed and loaded onto R environment. Then, refer to Using newggslopegraph to learn more about the function. Lastly, read more about newggslopegraph() and its arguments by referring to this link.\n\n\nImport the rice data set into R environment by using the code chunk below.\n\nrice &lt;- read_csv(\"data/rice.csv\")\n\n\n\n\nNext, code chunk below will be used to plot a basic slopegraph as shown below.\n\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Dr. Kam Tin Seong\")\n\n\n\n\n\n\n\n\nThe alternative chart created by myself:\n\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  \n  newggslopegraph(\n    Times = Year,\n    Measurement = Yield,\n    Grouping = Country,\n    Title = \"Rice Yield of Top 11 Asian Countries\",\n    SubTitle = \"1961–1980\",\n    Caption = \"Prepared by: Belinda Lim\",\n    DataTextSize = 2,\n    LineThickness = 1.1,\n    RemoveMissing = TRUE,\n    WiderLabels = TRUE\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above\n\n\n\nFor effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-started",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "The code chunk to check, install and launch the following R packages: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse is as follows.\n\n\nShow the code\n\n\npacman::p_load(scales, viridis, lubridate, ggthemes,\n               gridExtra, readxl, knitr, data.table,\n               CGPfunctions, ggHoriPlot, tidyverse)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html",
    "title": "Take-Home Exercise 2",
    "section": "",
    "text": "The case was extracted from VAST Challenge 2025.\n\n\nOne of music’s biggest superstars is Oceanus native Sailor Shift. From humble beginnings, Sailor has grown in popularity and now enjoys fans around the world. Sailor started her career on the island nation of Oceanus which can be clearly seen in her early work, she started in the genre of “Oceanus Folk”. While Sailor has moved away from the traditional Oceanus style, the Oceanus Folk has made a name for itself in the musical world. The popularity of this music is one of the factors driving an increase in tourism to a quiet island nation that used to be known for fishing.\nIn 2023, Sailor Shift joined the Ivy Echoes – an all-female Oceanus Folk band consisting of Sailor (vocalist), Maya Jensen (vocalist), Lila “Lilly” Hartman (guitarist), Jade Thompson (drummer), and Sophie Ramirez (bassist). They played together at venues throughout Oceanus but had broken up to pursue their individual careers by 2026. Sailor’s breakthrough came in 2028 when one of her singles went viral, launched to the top of the global charts (something no other Oceanus Folk song had ever done). Since then, she has only continued to grow in popularity worldwide.\nSailor has released a new album almost every year since her big break, and each has done better than the last. Although she has remained primarily a solo artist, she has also frequently collaborated with other established artists, especially in the Indie Pop and Indie Folk genres. She herself has branched out musically over the years but regularly returns to the Oceanus Folk genre — even as the genre’s influence on the rest of the music world has spread even more.\nSailor has always been passionate about two things: (1) spreading Oceanus Folk, and (2) helping lesser-known artists break into music. Because of those goals, she’s particularly famous for her frequent collaborations.\nAdditionally, because of Sailor’s success, more attention began to be paid over the years to her previous bandmates. All 4 have continued in the music industry—Maya as an independent vocalist, Lilly and Jade as instrumentalists in other bands, and Sophie as a music producer for a major record label. In various ways, all of them have contributed to the increased influence of Oceanus folk, resulting in a new generation of up-and-coming Oceanus Folk artists seeking to make a name for themselves in the music industry.\nNow, as Sailor returns to Oceanus in 2040, a local journalist – Silas Reed – is writing a piece titled Oceanus Folk: Then-and-Now that aims to trace the rise of Sailor and the influence of Oceanus Folk on the rest of the music world. He has collected a large dataset of musical artists, producers, albums, songs, and influences and organized it into a knowledge graph. Your task is to help Silas create beautiful and informative visualizations of this data and uncover new and interesting information about Sailor’s past, her rise to stardom, and her influence.\n\n\n\n\nDesign and develop visualizations and visual analytic tools that will allow Silas to explore and understand the profile of Sailor Shift’s career\n\nWho has she been most influenced by over time?\nWho has she collaborated with and directly or indirectly influenced?\nHow has she influenced collaborators of the broader Oceanus Folk community?\n\nDevelop visualizations that illustrate how the influence of Oceanus Folk has spread through the musical world.\n\nWas this influence intermittent or did it have a gradual rise?\nWhat genres and top artists have been most influenced by Oceanus Folk?\nOn the converse, how has Oceanus Folk changed with the rise of Sailor Shift? From which genres does it draw most of its contemporary inspiration?\n\nUse your visualizations to develop a profile of what it means to be a rising star in the music industry.\n\nVisualize the careers of three artists. Compare and contrast their rise in popularity and influence.\nUsing this characterization, give three predictions of who the next Oceanus Folk stars with be over the next five years."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#background",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#background",
    "title": "Take-Home Exercise 2",
    "section": "",
    "text": "One of music’s biggest superstars is Oceanus native Sailor Shift. From humble beginnings, Sailor has grown in popularity and now enjoys fans around the world. Sailor started her career on the island nation of Oceanus which can be clearly seen in her early work, she started in the genre of “Oceanus Folk”. While Sailor has moved away from the traditional Oceanus style, the Oceanus Folk has made a name for itself in the musical world. The popularity of this music is one of the factors driving an increase in tourism to a quiet island nation that used to be known for fishing.\nIn 2023, Sailor Shift joined the Ivy Echoes – an all-female Oceanus Folk band consisting of Sailor (vocalist), Maya Jensen (vocalist), Lila “Lilly” Hartman (guitarist), Jade Thompson (drummer), and Sophie Ramirez (bassist). They played together at venues throughout Oceanus but had broken up to pursue their individual careers by 2026. Sailor’s breakthrough came in 2028 when one of her singles went viral, launched to the top of the global charts (something no other Oceanus Folk song had ever done). Since then, she has only continued to grow in popularity worldwide.\nSailor has released a new album almost every year since her big break, and each has done better than the last. Although she has remained primarily a solo artist, she has also frequently collaborated with other established artists, especially in the Indie Pop and Indie Folk genres. She herself has branched out musically over the years but regularly returns to the Oceanus Folk genre — even as the genre’s influence on the rest of the music world has spread even more.\nSailor has always been passionate about two things: (1) spreading Oceanus Folk, and (2) helping lesser-known artists break into music. Because of those goals, she’s particularly famous for her frequent collaborations.\nAdditionally, because of Sailor’s success, more attention began to be paid over the years to her previous bandmates. All 4 have continued in the music industry—Maya as an independent vocalist, Lilly and Jade as instrumentalists in other bands, and Sophie as a music producer for a major record label. In various ways, all of them have contributed to the increased influence of Oceanus folk, resulting in a new generation of up-and-coming Oceanus Folk artists seeking to make a name for themselves in the music industry.\nNow, as Sailor returns to Oceanus in 2040, a local journalist – Silas Reed – is writing a piece titled Oceanus Folk: Then-and-Now that aims to trace the rise of Sailor and the influence of Oceanus Folk on the rest of the music world. He has collected a large dataset of musical artists, producers, albums, songs, and influences and organized it into a knowledge graph. Your task is to help Silas create beautiful and informative visualizations of this data and uncover new and interesting information about Sailor’s past, her rise to stardom, and her influence."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#tasks-and-questions",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#tasks-and-questions",
    "title": "Take-Home Exercise 2",
    "section": "",
    "text": "Design and develop visualizations and visual analytic tools that will allow Silas to explore and understand the profile of Sailor Shift’s career\n\nWho has she been most influenced by over time?\nWho has she collaborated with and directly or indirectly influenced?\nHow has she influenced collaborators of the broader Oceanus Folk community?\n\nDevelop visualizations that illustrate how the influence of Oceanus Folk has spread through the musical world.\n\nWas this influence intermittent or did it have a gradual rise?\nWhat genres and top artists have been most influenced by Oceanus Folk?\nOn the converse, how has Oceanus Folk changed with the rise of Sailor Shift? From which genres does it draw most of its contemporary inspiration?\n\nUse your visualizations to develop a profile of what it means to be a rising star in the music industry.\n\nVisualize the careers of three artists. Compare and contrast their rise in popularity and influence.\nUsing this characterization, give three predictions of who the next Oceanus Folk stars with be over the next five years."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#load-packages",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#load-packages",
    "title": "Take-Home Exercise 2",
    "section": "2.1 Load packages",
    "text": "2.1 Load packages\nIn the code chunk below, p_load() of pacman packages is used to load the R packages into R environment:\nUtility Tools\n\njsonlite: To parse JSON\ntidyverse - Data science tools\nggtext - Tools for text formatting\nknitr - For better table displays\nlubridate - For processing date and time\n\nGraphing Tools\n\npatchwork - For combining ggplot plots\nggraph - For plotting network data\ntidygraph - For graph manipulations\nigraph - Contains functions for network analysis\nggiraph - Interactive plots\n\n\n\n\n\n\n\nCode\n\n\n\n\n\n\n\nCode\npacman::p_load(jsonlite, tidyverse, ggtext,\n                knitr, lubridate, patchwork,\n                ggraph, tidygraph, igraph,\n                ggiraph)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#import-data-and-inspect-structure",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#import-data-and-inspect-structure",
    "title": "Take-Home Exercise 2",
    "section": "2.2 Import Data and Inspect Structure",
    "text": "2.2 Import Data and Inspect Structure\nIn the code chunk below, fromJSON() of jsonlite package is used to import MC1_graph.json file into R and save the output object and the data structure is inspected\n\n\n\n\n\n\nCode\n\n\n\n\n\n\n\nShow code\nmc1_data &lt;- fromJSON(\"MC1data/MC1_graph.json\")\nglimpse(mc1_data)\n\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n  ..$ node_default: Named list()\n  ..$ edge_default: Named list()\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n  ..$ Node Type     : chr [1:17412] \"Song\" \"Person\" \"Person\" \"Person\" ...\n  ..$ name          : chr [1:17412] \"Breaking These Chains\" \"Carlos Duffy\" \"Min Qin\" \"Xiuying Xie\" ...\n  ..$ single        : logi [1:17412] TRUE NA NA NA NA FALSE ...\n  ..$ release_date  : chr [1:17412] \"2017\" NA NA NA ...\n  ..$ genre         : chr [1:17412] \"Oceanus Folk\" NA NA NA ...\n  ..$ notable       : logi [1:17412] TRUE NA NA NA NA TRUE ...\n  ..$ id            : int [1:17412] 0 1 2 3 4 5 6 7 8 9 ...\n  ..$ written_date  : chr [1:17412] NA NA NA NA ...\n  ..$ stage_name    : chr [1:17412] NA NA NA NA ...\n  ..$ notoriety_date: chr [1:17412] NA NA NA NA ...\n $ links     :'data.frame': 37857 obs. of  4 variables:\n  ..$ Edge Type: chr [1:37857] \"InterpolatesFrom\" \"RecordedBy\" \"PerformerOf\" \"ComposerOf\" ...\n  ..$ source   : int [1:37857] 0 0 1 1 2 2 3 5 5 5 ...\n  ..$ target   : int [1:37857] 1841 4 0 16180 0 16180 0 5088 14332 11677 ...\n  ..$ key      : int [1:37857] 0 0 0 0 0 0 0 0 0 0 ..."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#inspect-data-structure-of-nodes-and-edges",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#inspect-data-structure-of-nodes-and-edges",
    "title": "Take-Home Exercise 2",
    "section": "2.3 Inspect Data Structure of Nodes and Edges",
    "text": "2.3 Inspect Data Structure of Nodes and Edges\n\nPreview and Separate node and edge data\nFor Nodes\n\n\nShow code\nmc1_nodes_raw &lt;- as_tibble(mc1_data$nodes)\n\nglimpse(mc1_nodes_raw)\n\n\nRows: 17,412\nColumns: 10\n$ `Node Type`    &lt;chr&gt; \"Song\", \"Person\", \"Person\", \"Person\", \"RecordLabel\", \"S…\n$ name           &lt;chr&gt; \"Breaking These Chains\", \"Carlos Duffy\", \"Min Qin\", \"Xi…\n$ single         &lt;lgl&gt; TRUE, NA, NA, NA, NA, FALSE, NA, NA, NA, NA, TRUE, NA, …\n$ release_date   &lt;chr&gt; \"2017\", NA, NA, NA, NA, \"2026\", NA, NA, NA, NA, \"2020\",…\n$ genre          &lt;chr&gt; \"Oceanus Folk\", NA, NA, NA, NA, \"Lo-Fi Electronica\", NA…\n$ notable        &lt;lgl&gt; TRUE, NA, NA, NA, NA, TRUE, NA, NA, NA, NA, TRUE, NA, N…\n$ id             &lt;int&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1…\n$ written_date   &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"2020\", NA, NA,…\n$ stage_name     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ notoriety_date &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n\n\nShow code\nkable(head(mc1_nodes_raw, 5))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNode Type\nname\nsingle\nrelease_date\ngenre\nnotable\nid\nwritten_date\nstage_name\nnotoriety_date\n\n\n\n\nSong\nBreaking These Chains\nTRUE\n2017\nOceanus Folk\nTRUE\n0\nNA\nNA\nNA\n\n\nPerson\nCarlos Duffy\nNA\nNA\nNA\nNA\n1\nNA\nNA\nNA\n\n\nPerson\nMin Qin\nNA\nNA\nNA\nNA\n2\nNA\nNA\nNA\n\n\nPerson\nXiuying Xie\nNA\nNA\nNA\nNA\n3\nNA\nNA\nNA\n\n\nRecordLabel\nNautical Mile Records\nNA\nNA\nNA\nNA\n4\nNA\nNA\nNA\n\n\n\n\n\nFor Edges:\n\n\nShow code\nmc1_edges_raw &lt;- as_tibble(mc1_data$links)\n\nglimpse(mc1_edges_raw)\n\n\nRows: 37,857\nColumns: 4\n$ `Edge Type` &lt;chr&gt; \"InterpolatesFrom\", \"RecordedBy\", \"PerformerOf\", \"Composer…\n$ source      &lt;int&gt; 0, 0, 1, 1, 2, 2, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5…\n$ target      &lt;int&gt; 1841, 4, 0, 16180, 0, 16180, 0, 5088, 14332, 11677, 2479, …\n$ key         &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\nShow code\nkable(head(mc1_edges_raw, 10))\n\n\n\n\n\nEdge Type\nsource\ntarget\nkey\n\n\n\n\nInterpolatesFrom\n0\n1841\n0\n\n\nRecordedBy\n0\n4\n0\n\n\nPerformerOf\n1\n0\n0\n\n\nComposerOf\n1\n16180\n0\n\n\nPerformerOf\n2\n0\n0\n\n\nProducerOf\n2\n16180\n0\n\n\nPerformerOf\n3\n0\n0\n\n\nInterpolatesFrom\n5\n5088\n0\n\n\nInStyleOf\n5\n14332\n0\n\n\nInterpolatesFrom\n5\n11677\n0"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#data-pre-processing-1",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#data-pre-processing-1",
    "title": "Take-Home Exercise 2",
    "section": "2.3 Data Pre-processing",
    "text": "2.3 Data Pre-processing\n\n2.3.1 New columns created\nNew columns created to identify “Sailor” and “Oceanus_folk” related works for subsequent analysis\n\n\nShow code\nmc1_nodes_raw &lt;- mc1_nodes_raw %&gt;%\n  mutate(\n    is_sailor = (\n      str_detect(name, regex(\"sailor shift\", ignore_case = TRUE))\n    ) %&gt;% replace_na(FALSE),\n    \n    is_oceanus_folk = str_detect(genre, regex(\"oceanus folk\", ignore_case = TRUE)) %&gt;% \n      replace_na(FALSE)\n  )\n\n\n\n\n2.3.2 Convert date fields\nConvert date fields from “chr” to “int” for subsequent analysis across years.\nNote: Date fields are only relevant for Songs and Albums.\n\n\nShow code\nmc1_nodes_raw &lt;- mc1_nodes_raw %&gt;%\n  mutate(across(c(release_date, notoriety_date, written_date),\n                ~as.integer(if_else(`Node Type` %in% c(\"Song\", \"Album\"), ., NA_character_))))\n\nmc1_nodes_raw$release_date %&gt;% unique()\n\n\n [1] 2017   NA 2026 2020 2027 2022 2007 2010 2003 2023 1997 2013 2000 2025 2029\n[16] 2015 2018 2016 2014 2028 2021 2030 2011 1994 2004 1998 1991 1999 2024 2012\n[31] 2002 2006 2008 2019 1995 1989 2032 2009 2001 1996 1990 1984 2005 1993 1986\n[46] 1985 1981 1992 1987 1988 1983 2031 1975 2035 2033 2037 2036 2039 2038 2034\n[61] 1977 1979 1980 1982 2040\n\n\n\n\n2.3.3 Check and remove duplicates\nFor Nodes, there are no duplicates after checking.\n\n\nShow code\nmc1_nodes_raw %&gt;%\n  count(id) %&gt;%\n  filter(n &gt; 1)\n\n\n# A tibble: 0 × 2\n# ℹ 2 variables: id &lt;int&gt;, n &lt;int&gt;\n\n\nFor Edges, there are duplicates shown below. The only difference are their Keys. However, Keys are not used for subsequent data analysis.\n\n\nShow code\nduplicate_summary &lt;- mc1_edges_raw %&gt;%\n  count(source, target, `Edge Type`) %&gt;%\n  filter(n &gt; 1)\n\nmc1_edges_raw %&gt;%\n  inner_join(duplicate_summary, by = c(\"source\", \"target\", \"Edge Type\"))\n\n\n# A tibble: 6 × 5\n  `Edge Type` source target   key     n\n  &lt;chr&gt;        &lt;int&gt;  &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1 PerformerOf  17057  17058     0     2\n2 PerformerOf  17057  17058     1     2\n3 PerformerOf  17349  17350     0     2\n4 PerformerOf  17349  17350     2     2\n5 PerformerOf  17355  17356     0     2\n6 PerformerOf  17355  17356     2     2\n\n\nHence, we removed all duplicates using the code below:\n\n\nShow code\nmc1_edges_raw &lt;- mc1_edges_raw %&gt;%\n  distinct(source, target, `Edge Type`, .keep_all = TRUE)\n\nmc1_edges_raw %&gt;%\n  count(source, target, `Edge Type`) %&gt;%\n  filter(n &gt; 1)\n\n\n# A tibble: 0 × 4\n# ℹ 4 variables: source &lt;int&gt;, target &lt;int&gt;, Edge Type &lt;chr&gt;, n &lt;int&gt;\n\n\n\n\n2.3.4 Remove symbol in text\nWe remove ” ’ ” from name to prevent coding errors subsequently.\n\n\nShow code\nmc1_nodes_clean &lt;- mc1_nodes_raw %&gt;%\n  mutate(\n    name = gsub(\"'\", \"\", name)\n  )\n\n\n\n\n2.3.5 Explore and Inspect Edges\nConfirm that the source and target IDs used in edges match the range of IDs in nodes\n\n\nShow code\nall(mc1_edges_raw$source %in% mc1_nodes_clean$id)\n\n\n[1] TRUE\n\n\nShow code\nall(mc1_edges_raw$target %in% mc1_nodes_clean$id)\n\n\n[1] TRUE\n\n\n\n\n2.3.6 Mapping from node name to edges indexes\nMap each node’s ID to its name. This is useful for labeling, joining and plotting later.\n\n\nShow code\nid_map &lt;- mc1_nodes_clean %&gt;%\n  select(id, name)\n\nid_map\n\n\n# A tibble: 17,412 × 2\n      id name                   \n   &lt;int&gt; &lt;chr&gt;                  \n 1     0 Breaking These Chains  \n 2     1 Carlos Duffy           \n 3     2 Min Qin                \n 4     3 Xiuying Xie            \n 5     4 Nautical Mile Records  \n 6     5 Unshackled Heart       \n 7     6 Luke Payne             \n 8     7 Xiulan Zeng            \n 9     8 David Franklin         \n10     9 Colline-Cascade Studios\n# ℹ 17,402 more rows\n\n\n\n\n2.3.7 Map source and target to node name while keeping the ID\nJoin (1) from_name based on source ID and (2) to_name based on target ID.\nThe source and target are mapped to “from_id” and “to_id” respectively.\nCreate cleaned edge and norm columns while tagged to the new “from_id” and “to_id”:\n\n\nShow code\nmc1_edges_clean &lt;- mc1_edges_raw %&gt;%\n  left_join(mc1_nodes_clean %&gt;% select(id, from_name = name), by = c(\"source\" = \"id\")) %&gt;%\n  rename(from_id = source) %&gt;%\n  left_join(mc1_nodes_clean %&gt;% select(id, to_name = name), by = c(\"target\" = \"id\")) %&gt;%\n  rename(to_id = target)\n\n\n\n\nShow code\nmc1_edges_clean &lt;- mc1_edges_clean %&gt;%\n  left_join(mc1_nodes_clean %&gt;% select(id, genre, `Node Type`, release_date), \n            by = c(\"from_id\" = \"id\"))\n\n\n\n\n2.3.8 Filter out any unmatched (invalid) edges\n\n\nShow code\nmc1_edges_clean &lt;- mc1_edges_clean %&gt;%\n  filter(!is.na(from_id), !is.na(to_id))\n\n\n\n\n2.3.9 Checking for any missing nodes\n\n\nShow code\nmissing_nodes &lt;- setdiff(\n  unique(c(mc1_edges_clean$from_name, mc1_edges_clean$to_name)),\n  mc1_nodes_clean$name\n)\n\nmissing_nodes\n\n\ncharacter(0)\n\n\n\n\n2.3.10 Check Edges Schema\nDefine valid source and destination types for each edge type as per the data description file:\n\n\nShow code\nedge_rules &lt;- list(\n  PerformerOf = list(source = c(\"Person\", \"MusicalGroup\"), target = c(\"Song\", \"Album\")),\n  \n  ComposerOf = list(source = c(\"Person\"), target = c(\"Song\", \"Album\")),\n  \n  ProducerOf = list(source = c(\"Person\", \"RecordLabel\"), target = c(\"Song\", \"Album\", \"Person\", \"MusicalGroup\")),\n  \n  LyricistOf = list(source = c(\"Person\"), target = c(\"Song\", \"Album\")),\n  \n  RecordedBy = list(source = c(\"Song\", \"Album\"), target = c(\"RecordLabel\")),\n  \n  DistributedBy = list(source = c(\"Song\", \"Album\"), target = c(\"RecordLabel\")),\n  \n  InStyleOf = list(source = c(\"Song\", \"Album\"), target = c(\"Song\", \"Album\", \"Person\", \"MusicalGroup\")),\n  \n  InterpolatesFrom = list(source = c(\"Song\", \"Album\"), target = c(\"Song\", \"Album\")),\n  \n  CoverOf = list(source = c(\"Song\", \"Album\"), target = c(\"Song\", \"Album\")),\n  \n  LyricalReferenceTo = list(source = c(\"Song\", \"Album\"), target = c(\"Song\", \"Album\")),\n \n   DirectlySamples = list(source = c(\"Song\", \"Album\"), target = c(\"Song\", \"Album\")),\n  \n  MemberOf = list(source = c(\"Person\"), target = c(\"MusicalGroup\"))\n)\n\n\nCheck if there were erroneous edge and node relationships:\n\n\nShow code\nnode_type_lookup &lt;- mc1_nodes_clean %&gt;%\n  select(name, `Node Type`) %&gt;%\n  deframe()\n\nmc1_edges_checked &lt;- mc1_edges_clean %&gt;%\n  mutate(\n  source_type = node_type_lookup[from_name],\n  target_type = node_type_lookup[to_name]\n)\n\nmc1_edges_tagged &lt;- mc1_edges_checked %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    valid = {\n      rule &lt;- edge_rules[[`Edge Type`]]\n      if (is.null(rule)) TRUE\n      else {\n        source_type %in% rule$source && target_type %in% rule$target\n      }\n    }\n  ) %&gt;%\n  ungroup()\n\ninvalid_edge_summary &lt;- mc1_edges_tagged %&gt;%\n  filter(!valid) %&gt;%\n  count(`Edge Type`, source_type, target_type, sort = TRUE)\n\nprint(invalid_edge_summary)\n\n\n# A tibble: 33 × 4\n   `Edge Type`      source_type  target_type      n\n   &lt;chr&gt;            &lt;chr&gt;        &lt;chr&gt;        &lt;int&gt;\n 1 LyricistOf       MusicalGroup Song           106\n 2 RecordedBy       RecordLabel  Album          102\n 3 ProducerOf       MusicalGroup Song           100\n 4 ComposerOf       MusicalGroup Song            97\n 5 ProducerOf       MusicalGroup Album           31\n 6 LyricistOf       MusicalGroup Album           28\n 7 ComposerOf       MusicalGroup Album           17\n 8 InStyleOf        MusicalGroup MusicalGroup    12\n 9 InStyleOf        Person       MusicalGroup    11\n10 InterpolatesFrom MusicalGroup MusicalGroup    10\n# ℹ 23 more rows\n\n\nShow code\n# Check total invalid edge count\ncat(\"Total invalid edges:\", sum(!mc1_edges_tagged$valid), \"\\n\")\n\n\nTotal invalid edges: 570 \n\n\nThere were 570 invalid edges that are not in accordance to the data description file which are suggested to be removed as follows:\n\n\nShow code\nmc1_edges_clean &lt;- mc1_edges_tagged %&gt;%\n  filter(valid)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#explore-and-inspect-nodes",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#explore-and-inspect-nodes",
    "title": "Take-Home Exercise 2",
    "section": "3.1 Explore and Inspect Nodes",
    "text": "3.1 Explore and Inspect Nodes\n\nmc1_nodes_raw$release_date %&gt;% unique()\n\n [1] 2017   NA 2026 2020 2027 2022 2007 2010 2003 2023 1997 2013 2000 2025 2029\n[16] 2015 2018 2016 2014 2028 2021 2030 2011 1994 2004 1998 1991 1999 2024 2012\n[31] 2002 2006 2008 2019 1995 1989 2032 2009 2001 1996 1990 1984 2005 1993 1986\n[46] 1985 1981 1992 1987 1988 1983 2031 1975 2035 2033 2037 2036 2039 2038 2034\n[61] 1977 1979 1980 1982 2040\n\nmc1_nodes_raw %&gt;%\n  filter(grepl(\"Sailor Shift\", name))\n\n# A tibble: 1 × 12\n  `Node Type` name         single release_date genre notable    id written_date\n  &lt;chr&gt;       &lt;chr&gt;        &lt;lgl&gt;         &lt;int&gt; &lt;chr&gt; &lt;lgl&gt;   &lt;int&gt;        &lt;int&gt;\n1 Person      Sailor Shift NA               NA &lt;NA&gt;  NA      17255           NA\n# ℹ 4 more variables: stage_name &lt;chr&gt;, notoriety_date &lt;int&gt;, is_sailor &lt;lgl&gt;,\n#   is_oceanus_folk &lt;lgl&gt;\n\n\n\nmc1_nodes_clean &lt;- mc1_nodes_raw %&gt;%\n  mutate(\n    name = gsub(\"'\", \"\", name)\n  )\n\nkable(head(mc1_nodes_clean))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNode Type\nname\nsingle\nrelease_date\ngenre\nnotable\nid\nwritten_date\nstage_name\nnotoriety_date\nis_sailor\nis_oceanus_folk\n\n\n\n\nSong\nBreaking These Chains\nTRUE\n2017\nOceanus Folk\nTRUE\n0\nNA\nNA\nNA\nFALSE\nTRUE\n\n\nPerson\nCarlos Duffy\nNA\nNA\nNA\nNA\n1\nNA\nNA\nNA\nFALSE\nFALSE\n\n\nPerson\nMin Qin\nNA\nNA\nNA\nNA\n2\nNA\nNA\nNA\nFALSE\nFALSE\n\n\nPerson\nXiuying Xie\nNA\nNA\nNA\nNA\n3\nNA\nNA\nNA\nFALSE\nFALSE\n\n\nRecordLabel\nNautical Mile Records\nNA\nNA\nNA\nNA\n4\nNA\nNA\nNA\nFALSE\nFALSE\n\n\nSong\nUnshackled Heart\nFALSE\n2026\nLo-Fi Electronica\nTRUE\n5\nNA\nNA\nNA\nFALSE\nFALSE"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#explore-and-inspect-edges",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#explore-and-inspect-edges",
    "title": "Take-Home Exercise 2",
    "section": "3.2 Explore and Inspect Edges",
    "text": "3.2 Explore and Inspect Edges\nConfirm that the IDs used in edges match the range of IDs in nodes\n\nrange(mc1_edges_raw$source)\n\n[1]     0 17411\n\nrange(mc1_edges_raw$target) \n\n[1]     0 17411"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#mapping-from-node-name-to-edges-indexes",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#mapping-from-node-name-to-edges-indexes",
    "title": "Take-Home Exercise 2",
    "section": "3.3 Mapping from node name to edges indexes",
    "text": "3.3 Mapping from node name to edges indexes\nName is not an unique identifier.\n\nmc1_nodes_clean %&gt;%\n  count(name) %&gt;%\n  filter(n &gt; 1)\n\n# A tibble: 1,611 × 2\n   name                 n\n   &lt;chr&gt;            &lt;int&gt;\n 1 Agata Records        2\n 2 Ancestral Echoes     2\n 3 Angela Thompson      2\n 4 Anthony Davis        2\n 5 Anthony Smith        2\n 6 Asuka Takahashi      3\n 7 Brandon Wilson       2\n 8 Brian Gonzalez       2\n 9 Bryan Garcia         2\n10 Bryan Smith          3\n# ℹ 1,601 more rows\n\n\n\nid_map &lt;- mc1_nodes_clean %&gt;%\n  select(id, name)\n\nid_map\n\n# A tibble: 17,412 × 2\n      id name                   \n   &lt;int&gt; &lt;chr&gt;                  \n 1     0 Breaking These Chains  \n 2     1 Carlos Duffy           \n 3     2 Min Qin                \n 4     3 Xiuying Xie            \n 5     4 Nautical Mile Records  \n 6     5 Unshackled Heart       \n 7     6 Luke Payne             \n 8     7 Xiulan Zeng            \n 9     8 David Franklin         \n10     9 Colline-Cascade Studios\n# ℹ 17,402 more rows"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#map-source-and-target-to-node-name-while-keeping-the-id",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#map-source-and-target-to-node-name-while-keeping-the-id",
    "title": "Take-Home Exercise 2",
    "section": "** 3.4 Map source and target to node name while keeping the ID**",
    "text": "** 3.4 Map source and target to node name while keeping the ID**\n\nmc1_edges_clean &lt;- mc1_edges_raw %&gt;%\n  left_join(mc1_nodes_clean %&gt;% select(id, from_name = name), by = c(\"source\" = \"id\")) %&gt;%\n  rename(from_id = source) %&gt;%\n  left_join(mc1_nodes_clean %&gt;% select(id, to_name = name), by = c(\"target\" = \"id\")) %&gt;%\n  rename(to_id = target)\n\n\nmc1_edges_clean &lt;- mc1_edges_clean %&gt;%\n  left_join(mc1_nodes_clean %&gt;% select(id, genre, `Node Type`, release_date), \n            by = c(\"from_id\" = \"id\"))\n\nRemoved the below as it is not recommended to drop\nmc1_edges_clean &lt;- mc1_edges_clean %&gt;% #Drops source and target columns select(from, to, Edge Type)\nmc1_edges_clean"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#filter-out-any-unmatched-invalid-edges",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#filter-out-any-unmatched-invalid-edges",
    "title": "Take-Home Exercise 2",
    "section": "** 3.5 Filter out any unmatched (invalid) edges**",
    "text": "** 3.5 Filter out any unmatched (invalid) edges**\n\nmc1_edges_clean &lt;- mc1_edges_clean %&gt;%\n  filter(!is.na(from_id), !is.na(to_id))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#checking-for-any-missing-nodes",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#checking-for-any-missing-nodes",
    "title": "Take-Home Exercise 2",
    "section": "** 3.6 Checking for any missing nodes**",
    "text": "** 3.6 Checking for any missing nodes**\n\nmissing_nodes &lt;- setdiff(\n  unique(c(mc1_edges_clean$from_name, mc1_edges_clean$to_name)),\n  mc1_nodes_clean$name\n)\n\nmissing_nodes\n\ncharacter(0)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#check-edges-schema",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#check-edges-schema",
    "title": "Take-Home Exercise 2",
    "section": "** 3.7 Check Edges Schema**",
    "text": "** 3.7 Check Edges Schema**\nDefine valid source and destination types for each edge type as per the data description file:\n\n# Define valid source and destination types for each edge type\nedge_rules &lt;- list(\n  PerformerOf = list(source = c(\"Person\", \"MusicalGroup\"), target = c(\"Song\", \"Album\")),\n  \n  ComposerOf = list(source = c(\"Person\"), target = c(\"Song\", \"Album\")),\n  \n  ProducerOf = list(source = c(\"Person\", \"RecordLabel\"), target = c(\"Song\", \"Album\", \"Person\", \"MusicalGroup\")),\n  \n  LyricistOf = list(source = c(\"Person\"), target = c(\"Song\", \"Album\")),\n  \n  RecordedBy = list(source = c(\"Song\", \"Album\"), target = c(\"RecordLabel\")),\n  \n  DistributedBy = list(source = c(\"Song\", \"Album\"), target = c(\"RecordLabel\")),\n  \n  InStyleOf = list(source = c(\"Song\", \"Album\"), target = c(\"Song\", \"Album\", \"Person\", \"MusicalGroup\")),\n  \n  InterpolatesFrom = list(source = c(\"Song\", \"Album\"), target = c(\"Song\", \"Album\")),\n  \n  CoverOf = list(source = c(\"Song\", \"Album\"), target = c(\"Song\", \"Album\")),\n  \n  LyricalReferenceTo = list(source = c(\"Song\", \"Album\"), target = c(\"Song\", \"Album\")),\n \n   DirectlySamples = list(source = c(\"Song\", \"Album\"), target = c(\"Song\", \"Album\")),\n  \n  MemberOf = list(source = c(\"Person\"), target = c(\"MusicalGroup\"))\n)\n\nCheck if there were erroneous edge and node relationships:\n\n# Create a lookup for node types\nnode_type_lookup &lt;- mc1_nodes_clean %&gt;%\n  select(name, `Node Type`) %&gt;%\n  deframe()\n\n# Add source and target node types to the edge table\nmc1_edges_checked &lt;- mc1_edges_clean %&gt;%\n  mutate(\n  source_type = node_type_lookup[from_name],\n  target_type = node_type_lookup[to_name]\n)\n\nmc1_edges_tagged &lt;- mc1_edges_checked %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    valid = {\n      rule &lt;- edge_rules[[`Edge Type`]]\n      if (is.null(rule)) TRUE\n      else {\n        source_type %in% rule$source && target_type %in% rule$target\n      }\n    }\n  ) %&gt;%\n  ungroup()\n\n# Count and display invalid edge combinations\ninvalid_edge_summary &lt;- mc1_edges_tagged %&gt;%\n  filter(!valid) %&gt;%\n  count(`Edge Type`, source_type, target_type, sort = TRUE)\n\nprint(invalid_edge_summary)\n\n# A tibble: 33 × 4\n   `Edge Type`      source_type  target_type      n\n   &lt;chr&gt;            &lt;chr&gt;        &lt;chr&gt;        &lt;int&gt;\n 1 LyricistOf       MusicalGroup Song           106\n 2 RecordedBy       RecordLabel  Album          102\n 3 ProducerOf       MusicalGroup Song           100\n 4 ComposerOf       MusicalGroup Song            97\n 5 ProducerOf       MusicalGroup Album           31\n 6 LyricistOf       MusicalGroup Album           28\n 7 ComposerOf       MusicalGroup Album           17\n 8 InStyleOf        MusicalGroup MusicalGroup    12\n 9 InStyleOf        Person       MusicalGroup    11\n10 InterpolatesFrom MusicalGroup MusicalGroup    10\n# ℹ 23 more rows\n\n# Check total invalid edge count\ncat(\"Total invalid edges:\", sum(!mc1_edges_tagged$valid), \"\\n\")\n\nTotal invalid edges: 570 \n\n\nThere were 570 invalid edges.\n\n# Keep only valid edges\nmc1_edges_clean &lt;- mc1_edges_tagged %&gt;%\n  filter(valid)\n\nThe invalid edges were removed from the dataset as they were not consistent with the data description file."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#visualising-edge-types",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#visualising-edge-types",
    "title": "Take-Home Exercise 2",
    "section": "3.1 Visualising Edge Types",
    "text": "3.1 Visualising Edge Types\n\n\nShow code\nggplot(data = mc1_edges_clean,\n       aes(y = `Edge Type`)) +\n  geom_bar()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#visualising-node-types",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#visualising-node-types",
    "title": "Take-Home Exercise 2",
    "section": "3.2 Visualising Node Types",
    "text": "3.2 Visualising Node Types\n\n\nShow code\nggplot(data = mc1_nodes_clean,\n       aes(y = `Node Type`)) +\n  geom_bar()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#creating-the-global-knowledge-graph",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#creating-the-global-knowledge-graph",
    "title": "Take-Home Exercise 2",
    "section": "3.3 Creating the global knowledge graph",
    "text": "3.3 Creating the global knowledge graph\ntbl_graph() is used to create tidygraph’s graph object by using the code chunks below:\n\n\nShow code\nmc1_nodes_clean &lt;- mc1_nodes_clean %&gt;%\n  mutate(id = as.character(id))\n\nmc1_edges_clean &lt;- mc1_edges_clean %&gt;%\n  mutate(from_id = as.character(from_id),\n         to_id = as.character(to_id))\n\n\n\n\nShow code\nmusic &lt;- tbl_graph(\n  nodes = mc1_nodes_clean %&gt;%\n    rename(label = name,  # preserve the original artist/song name\n           name = id),    # rename ID column to 'name' so tidygraph can use it\n  edges = mc1_edges_clean %&gt;%\n    rename(from = from_id, to = to_id),\n  directed = TRUE\n)\n\nmusic %&gt;% \n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  select(name, label, `Node Type`) %&gt;%\n  head()\n\n\n# A tibble: 6 × 3\n  name  label                 `Node Type`\n  &lt;chr&gt; &lt;chr&gt;                 &lt;chr&gt;      \n1 0     Breaking These Chains Song       \n2 1     Carlos Duffy          Person     \n3 2     Min Qin               Person     \n4 3     Xiuying Xie           Person     \n5 4     Nautical Mile Records RecordLabel\n6 5     Unshackled Heart      Song"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#find-sailors-id-and-works",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#find-sailors-id-and-works",
    "title": "Take-Home Exercise 2",
    "section": "4.1 Find Sailor’s ID and Works",
    "text": "4.1 Find Sailor’s ID and Works\nThe code chunks filter to Sailor’s ID and her works. Sailor was was listed as a performer and/or lyricist 47 times and was a contributor to 38 unique works.\n\n\nShow code\nsailor_id &lt;- mc1_nodes_clean %&gt;%\n  filter(is_sailor) %&gt;%\n  pull(id)\n\nsailor_works &lt;- mc1_edges_clean %&gt;%\n  filter(\n    from_id %in% sailor_id,\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n  ) %&gt;%\n  pull(to_id) %&gt;%\n  unique()\n\n# Count by role (edge type)\nmc1_edges_clean %&gt;%\n  filter(\n    from_id %in% sailor_id,\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n  ) %&gt;%\n  count(`Edge Type`, sort = TRUE)\n\n\n# A tibble: 2 × 2\n  `Edge Type`     n\n  &lt;chr&gt;       &lt;int&gt;\n1 PerformerOf    26\n2 LyricistOf     21\n\n\nShow code\n# Count of unique works Sailor contributed to\nmc1_edges_clean %&gt;%\n  filter(\n    from_id %in% sailor_id,\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n  ) %&gt;%\n  summarise(unique_works = n_distinct(to_id))\n\n\n# A tibble: 1 × 1\n  unique_works\n         &lt;int&gt;\n1           38"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#find-works-that-influenced-sailors-works",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#find-works-that-influenced-sailors-works",
    "title": "Take-Home Exercise 2",
    "section": "4.3 Find Works that influenced Sailor’s works",
    "text": "4.3 Find Works that influenced Sailor’s works\nWorks that influenced Sailor’s works is based on what was cited by in her works (InStyleOf”, “InterpolatesFrom”, “CoverOf”, “DirectlySamples”, “LyricalReferenceTo”). There were 26 songs/ album cited by Sailor’s works.\n\n\nShow code\nsailor_referenced_works &lt;- mc1_edges_clean %&gt;%\n  filter(\n    from_id %in% sailor_works, \n    `Edge Type` %in% c(\"InStyleOf\", \"InterpolatesFrom\", \"CoverOf\", \n                       \"LyricalReferenceTo\", \"DirectlySamples\")\n  ) %&gt;%\n  pull(to_id) %&gt;%\n  unique()\n\n# Identify those referenced nodes (songs/albums Sailor referenced)\ninfluences &lt;- mc1_nodes_clean %&gt;%\n  filter(id %in% sailor_referenced_works)\n\ninfluences %&gt;%\n  count(`Node Type`, sort = TRUE)\n\n\n# A tibble: 2 × 2\n  `Node Type`     n\n  &lt;chr&gt;       &lt;int&gt;\n1 Song           23\n2 Album           3"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#find-creators-of-works-that-influenced-sailors-works",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#find-creators-of-works-that-influenced-sailors-works",
    "title": "Take-Home Exercise 2",
    "section": "4.4 Find Creators of Works that influenced Sailor’s works",
    "text": "4.4 Find Creators of Works that influenced Sailor’s works\nBased on the code chunk below, we linked the work to the influencers to find out who were the influencers influencing Sailor.\nThere were 91 persons and 2 musical groups influencing Sailor.\n\n\nShow code\n# Extract their IDs to find who made those works\ninfluencer_work_ids &lt;- influences$id\n\n# Who created those works?\ninfluencer_people &lt;- mc1_edges_clean %&gt;%\n  filter(\n    to_id %in% influencer_work_ids,\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")\n  ) %&gt;%\n  left_join(\n    mc1_nodes_clean %&gt;% select(id, name, Node_Type = `Node Type`, genre, release_date),\n    by = c(\"from_id\" = \"id\")  # use from_id for join\n  ) %&gt;%\n  filter(Node_Type %in% c(\"Person\", \"MusicalGroup\"))\n\n# Count top contributors who influenced Sailor\ninfluencer_people %&gt;%\n  count(name, sort = TRUE)\n\n\n# A tibble: 93 × 2\n   name                 n\n   &lt;chr&gt;            &lt;int&gt;\n 1 Joshua Taylor        3\n 2 Shannon Harvey       3\n 3 Urszula Stochmal     3\n 4 Debra Graham         2\n 5 Gang Shao            2\n 6 Igor Dyś             2\n 7 Jeremiah Love        2\n 8 Jing Kang            2\n 9 Lei Fu               2\n10 Lori Massey          2\n# ℹ 83 more rows"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#check-sailors-group-membership-and-id",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#check-sailors-group-membership-and-id",
    "title": "Take-Home Exercise 2",
    "section": "4.5 Check Sailor’s group membership and ID",
    "text": "4.5 Check Sailor’s group membership and ID\nA check was done to confirm if Sailor was in any musical group. It is confirmed that she only belonged to Ivy Echos.\n\n\nShow code\n# Get Sailor's ID\nsailor_id &lt;- mc1_nodes_clean %&gt;%\n  filter(str_to_lower(name) == \"sailor shift\") %&gt;%\n  pull(id)\n\n# Filter edges where Sailor is a member of a group\nsailor_groups &lt;- mc1_edges_clean %&gt;%\n  filter(\n    `Edge Type` == \"MemberOf\",\n    from_id == sailor_id\n  ) %&gt;%\n  left_join(\n    mc1_nodes_clean %&gt;% select(id, group_name = name, node_type = `Node Type`),\n    by = c(\"to_id\" = \"id\")\n  )\n\nsailor_groups %&gt;% select(group_name, node_type)\n\n\n# A tibble: 1 × 2\n  group_name node_type   \n  &lt;chr&gt;      &lt;chr&gt;       \n1 Ivy Echos  MusicalGroup\n\n\nShow code\nsailor_groups %&gt;% select(group_name, `Node Type`)\n\n\n# A tibble: 1 × 2\n  group_name `Node Type`\n  &lt;chr&gt;      &lt;chr&gt;      \n1 Ivy Echos  Person     \n\n\nAs Sailor could be influenced under Ivy Echos as she is a member. We obtained the musical group ID for Ivy Echos as follows:\n\n\nShow code\nsailor_group_ids &lt;- mc1_edges_clean %&gt;%\n  filter(`Edge Type` == \"MemberOf\", from_id == sailor_id) %&gt;%\n  pull(to_id)\n\nmc1_edges_clean %&gt;%\n  filter(`Edge Type` == \"MemberOf\", from_id == sailor_id) %&gt;%\n  left_join(mc1_nodes_clean, by = c(\"to_id\" = \"id\")) %&gt;%\n  select(to_id, group_name = name, node_type = `Node Type.y`)\n\n\n# A tibble: 1 × 3\n  to_id group_name node_type   \n  &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       \n1 17260 Ivy Echos  MusicalGroup"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#define-ids-to-include-in-the-subgraph",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#define-ids-to-include-in-the-subgraph",
    "title": "Take-Home Exercise 2",
    "section": "5.1 Define IDs to include in the subgraph",
    "text": "5.1 Define IDs to include in the subgraph\n\n\nShow code\ninfluencer_people_ids &lt;- influencer_people %&gt;% pull(from_id)\nreferenced_work_ids &lt;- sailor_referenced_works  \n\nall_ids &lt;- unique(c(\n  sailor_id,\n  sailor_works,\n  referenced_work_ids,\n  influencer_people_ids,\n  sailor_group_ids\n))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#filter-details-to-form-the-subgraph",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#filter-details-to-form-the-subgraph",
    "title": "Take-Home Exercise 2",
    "section": "5.2 Filter details to form the subgraph",
    "text": "5.2 Filter details to form the subgraph\nHowever, we do not want to include collaborators except for the musical group that she belongs to. This is executed by the codes below.\nWe filter nodes to identify collaborators linked to Sailor.\n\n\nShow code\n# Filter nodes for Sailor + her works + influencers + cited works\nmini_nodes &lt;- mc1_nodes_clean %&gt;%\n  filter(id %in% all_ids) %&gt;%\n  rename(label = name)\n\n# Identify collaborators (people who worked on Sailor's works)\ncollaborator_ids &lt;- mc1_edges_clean %&gt;%\n  filter(\n    to_id %in% sailor_works,\n    from_id != sailor_id,\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")\n  ) %&gt;%\n  pull(from_id) %&gt;%\n  unique()\n\n\nWe only keep collaborators and Ivy Echos if they influenced Sailor directly.\n\n\nShow code\n# Find Ivy Echos ID\nivy_id &lt;- mc1_nodes_clean %&gt;%\n  filter(str_trim(name) == \"Ivy Echos\") %&gt;%\n  pull(id)\n\n# Filter out collaborators unless they also influenced Sailor, but keep Ivy Echos\nmini_nodes &lt;- mini_nodes %&gt;%\n  filter(!(id %in% collaborator_ids & !(id %in% influencer_people_ids | id == ivy_id)))\n\n# Rebuild edges based on cleaned mini_nodes\nvalid_ids &lt;- mini_nodes$id\n\n# Drop edges where the source is a removed collaborator and the target is a Sailor work\nmini_edges &lt;- mc1_edges_clean %&gt;%\n  filter(from_id %in% valid_ids & to_id %in% valid_ids) %&gt;%\n  filter(!(to_id %in% sailor_works & from_id %in% collaborator_ids & !(from_id %in% influencer_people_ids | from_id == ivy_id)))\n\n# Remap node IDs to row indices for plotting\nid_map &lt;- tibble(id = valid_ids, index = seq_len(length(valid_ids)))\n\nmini_edges &lt;- mini_edges %&gt;%\n  select(from_id, to_id, `Edge Type`, key) %&gt;%\n  left_join(id_map %&gt;% rename(from = index), by = c(\"from_id\" = \"id\")) %&gt;%\n  left_join(id_map %&gt;% rename(to = index), by = c(\"to_id\" = \"id\"))\n\n# Drop invalid edges\nmini_edges_clean &lt;- mini_edges %&gt;%\n  filter(!is.na(from) & !is.na(to))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#remove-sailors-work-if-not-linked-to-other-works",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#remove-sailors-work-if-not-linked-to-other-works",
    "title": "Take-Home Exercise 2",
    "section": "6.2 Remove Sailor’s work if not linked to other works",
    "text": "6.2 Remove Sailor’s work if not linked to other works\n\n\nShow code\n# Add row index to mini_nodes for alignment\nmini_nodes &lt;- mini_nodes %&gt;%\n  mutate(row_index = row_number())\n\n# Create the graph\ngraph_tbl &lt;- tbl_graph(nodes = mini_nodes, edges = mini_edges_scored, directed = TRUE)\n\n# Identify Sailor's works (by ID)\nsailor_work_ids &lt;- mini_nodes %&gt;%\n  filter(id %in% sailor_works) %&gt;%\n  pull(id)\n\n# Get corresponding row indices of Sailor's works\nsailor_work_rows &lt;- mini_nodes %&gt;%\n  filter(id %in% sailor_work_ids) %&gt;%\n  pull(row_index)\n\n# Get Sailor's works which cite other works \ninfluence_edge_types &lt;- c(\"InStyleOf\", \"CoverOf\", \"InterpolatesFrom\", \"DirectlySamples\", \"LyricalReferenceTo\")\n\nreferencing_sailor_works &lt;- mini_edges_scored %&gt;%\n  filter(\n    `Edge Type` %in% influence_edge_types,\n    from %in% sailor_work_rows  \n  ) %&gt;%\n  pull(from) %&gt;%\n  unique()\n\n# Compute node degrees\nnode_degrees &lt;- graph_tbl %&gt;%\n  activate(nodes) %&gt;%\n  mutate(degree = centrality_degree(mode = \"all\"),\n         node_index = row_number()) %&gt;%\n  as_tibble()\n\n# Identify works only connected to Sailor (no other collaborators)\nonly_sailor_edges &lt;- mini_edges_scored %&gt;%\n  filter(\n    to %in% sailor_work_rows,\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")\n  ) %&gt;%\n  group_by(to) %&gt;%\n  summarise(all_from_sailor = all(from_id == sailor_id), .groups = \"drop\") %&gt;%\n  filter(all_from_sailor) %&gt;%\n  pull(to)  \n\n# Final filtering\nsailor_works_to_drop &lt;- node_degrees %&gt;%\n  filter(\n    node_index %in% only_sailor_edges,\n    !(node_index %in% referencing_sailor_works)\n  ) %&gt;%\n  pull(node_index)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#remove-ivy-echos-work-if-not-linked-to-other-works",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#remove-ivy-echos-work-if-not-linked-to-other-works",
    "title": "Take-Home Exercise 2",
    "section": "6.3 Remove Ivy Echo’s work if not linked to other works",
    "text": "6.3 Remove Ivy Echo’s work if not linked to other works\n\n\nShow code\nivy_work_ids &lt;- mini_edges_scored %&gt;%\n  filter(from_id == ivy_id, `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")) %&gt;%\n  pull(to_id) %&gt;%\n  unique()\n\nivy_work_rows &lt;- mini_nodes %&gt;%\n  filter(id %in% ivy_work_ids) %&gt;%\n  pull(row_index)\n\nivy_influential_edges &lt;- mini_edges_scored %&gt;%\n  filter(\n    (`Edge Type` %in% influence_edge_types) &\n    (from %in% ivy_work_rows | to %in% ivy_work_rows)\n  )\n\nivy_works_to_drop &lt;- setdiff(ivy_work_rows, c(ivy_influential_edges$from, ivy_influential_edges$to))\n\n# Add to removal list\nnodes_to_drop &lt;- unique(c(sailor_works_to_drop, ivy_works_to_drop))\n\n# Drop from graph\ngraph_tbl &lt;- graph_tbl %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_index = row_number()) %&gt;%\n  filter(!row_index %in% nodes_to_drop)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#visualising-sailors-influencers-non-interactive",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#visualising-sailors-influencers-non-interactive",
    "title": "Take-Home Exercise 2",
    "section": "6.4 Visualising Sailor’s Influencers (non-interactive)",
    "text": "6.4 Visualising Sailor’s Influencers (non-interactive)\nThe visualisation is plotted as follows:\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset.seed(12)\n\n# Assign unique edge ID\nmini_edges_scored &lt;- mini_edges_scored %&gt;%\n  mutate(edge_id = row_number())\n\n# Plot with ggraph\nggraph(graph_tbl, layout = \"fr\") +\n  \n  # Edge rendering\n  geom_edge_link0(\n    aes(color = `Edge Type`),\n    alpha = 0.8,\n    arrow = arrow(length = unit(1.5, 'mm'), type = \"closed\"),\n    end_cap = circle(1.5, 'mm'),\n    lineend = \"round\"\n  ) +\n\n  # Node visuals\n  geom_node_point(aes(\n    color = node_category,\n    shape = `Node Type`\n  ), size = 2) +\n\n  # Influencer names\n  geom_node_text(\n    aes(label = ifelse(id %in% influencer_people_ids, label, NA)),\n    size = 3,\n    repel = TRUE,\n    color = \"black\"\n  ) +\n\n  # Sailor\n  geom_node_text(\n    aes(label = ifelse(is_sailor_node, label, NA)),\n    size = 5,\n    fontface = \"bold\",\n    color = \"black\",\n    repel = TRUE\n  ) +\n\n  # Sailor's Works\n  geom_node_text(\n    aes(label = ifelse(node_category == \"Sailor's Work\", label, NA)),\n    size = 2,\n    fontface = \"italic\",\n    color = \"blue\",\n    repel = TRUE\n  ) +\n  \n  # Ivy Echos\n  geom_node_text(\n  aes(label = ifelse(str_trim(label) == \"Ivy Echos\", label, NA)),\n  size = 3,\n  fontface = \"bold.italic\",\n  color = \"darkgreen\",\n  repel = TRUE\n  ) +\n  \n  # Color and shape scales\n  scale_color_manual(\n    values = c(\n      \"Influencer\" = \"grey50\",\n      \"Sailor Shift\" = \"red\",\n      \"Sailor's Work\" = \"blue\",\n      \"Ivy Echos\" = \"darkgreen\"\n    ),\n    name = \"Node Category\"\n  ) +\n  \n  scale_shape_manual(\n    values = c(\"Person\" = 15, \"MusicalGroup\" = 17, \"Album\" = 16, \"Song\" = 3),\n    name = \"Node Type\"\n  ) +\n\n  theme_void() +\n  theme(\n    plot.margin = margin(30, 30, 30, 30), \n    legend.title = element_text(size = 8),\n    legend.text = element_text(size = 8)\n  )\n\n\n\n\nAs there are many influencers and overlaps, it is suggested to do an interactive map instead."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#visualising-sailors-influencers-interactive",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#visualising-sailors-influencers-interactive",
    "title": "Take-Home Exercise 2",
    "section": "6.6 Visualising Sailor’s Influencers (Interactive)",
    "text": "6.6 Visualising Sailor’s Influencers (Interactive)\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nset.seed(12)\n\n# Clean characters and create tooltip \ngraph_tbl &lt;- graph_tbl %&gt;%\n  mutate(across(where(is.character), ~ gsub(\"'\", \"\", .x))) %&gt;%\n  mutate(\n    tooltip = paste0(\n      label, \n      \" (\", `Node Type`, \")\", \n      ifelse(!is.na(release_date), paste0(\"\\nRelease Year: \", release_date), \"\")\n    )\n  )\n\n# Create layout \nlayout_tbl &lt;- create_layout(graph_tbl, layout = \"fr\")\n\n# Plot Interactive Graph\ng &lt;- ggraph(layout_tbl) +\n  geom_edge_fan(\n    aes(color = `Edge Type`),\n    alpha = 0.8,\n    arrow = arrow(length = unit(1.2, 'mm'), type = \"closed\"),\n    start_cap = circle(1, 'mm'),\n    end_cap = circle(1, 'mm'),\n    lineend = \"round\",\n    show.legend = TRUE\n  ) +\n  geom_point_interactive(\n    aes(\n      x = x,\n      y = y,\n      color = node_category,\n      shape = `Node Type`,\n      tooltip = tooltip,\n      data_id = label\n    ),\n    size = 2\n  ) +\n  geom_node_text(\n    aes(label = ifelse(id %in% influencer_people_ids, label, NA)),\n    size = 2,\n    repel = TRUE,\n    color = \"black\"\n  ) +\n  geom_node_text(\n    aes(label = ifelse(is_sailor_node, label, NA)),\n    size = 5,\n    fontface = \"bold\",\n    color = \"black\",\n    repel = TRUE\n  ) +\n  geom_node_text(\n    aes(label = ifelse(node_category == \"Sailor's Work\", label, NA)),\n    size = 2,\n    fontface = \"italic\",\n    color = \"blue\",\n    repel = TRUE\n  ) +\n  geom_node_text(\n    aes(label = ifelse(label == \"Ivy Echos\", label, NA)),\n    size = 3,\n    fontface = \"bold.italic\",\n    color = \"darkgreen\",\n    repel = TRUE\n  ) +\n  scale_color_manual(\n    values = c(\n      \"Influencer\" = \"grey50\",\n      \"Sailor Shift\" = \"red\",\n      \"Sailor's Work\" = \"blue\",\n      \"Ivy Echos\" = \"darkgreen\"\n    ),\n    name = \"Node Category\"\n  ) +\n  scale_shape_manual(\n    values = c(\"Person\" = 15, \"MusicalGroup\" = 17, \"Album\" = 16, \"Song\" = 3),\n    name = \"Node Type\"\n  ) +\n  theme_void() +\n  theme(\n    plot.margin = margin(30, 30, 30, 30),\n    legend.title = element_text(size = 8),\n    legend.text = element_text(size = 8)\n  )\n\ngirafe(ggobj = g, width_svg = 10, height_svg = 6)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#find-sailors-collaborators",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#find-sailors-collaborators",
    "title": "Take-Home Exercise 2",
    "section": "7.1 Find Sailor’s collaborators",
    "text": "7.1 Find Sailor’s collaborators\nFind Sailor’s collaborators where she is a “PerformerOf”, “ComposerOf”, “ProducerOf”, “LyricistOf” and “Memberof”.\n\n\nShow code\nsailor_collaborators &lt;- mc1_edges_clean %&gt;%\n  filter(\n    to_id %in% sailor_works,\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\", \"MemberOf\"),\n    from_id != sailor_id\n  ) %&gt;%\n  left_join(\n    mc1_nodes_clean %&gt;% \n      select(id, name, node_type = `Node Type`),  \n    by = c(\"from_id\" = \"id\")\n  ) %&gt;%\n  distinct(from_id, name, node_type)\n\n\n\n\nShow code\nsailor_collaborators %&gt;%\n  count(node_type, sort = TRUE)\n\n\n# A tibble: 2 × 2\n  node_type        n\n  &lt;chr&gt;        &lt;int&gt;\n1 Person          40\n2 MusicalGroup     8\n\n\nShow code\n  sailor_collaborators_roles &lt;- mc1_edges_clean %&gt;%\n  filter(\n    to_id %in% sailor_works,\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\"),\n    from_id != sailor_id\n  ) %&gt;%\n  left_join(\n    mc1_nodes_clean %&gt;% select(id, name, node_type = `Node Type`),\n    by = c(\"from_id\" = \"id\")\n  ) %&gt;%\n  distinct(from_id, name, node_type, `Edge Type`) %&gt;%\n  arrange(name, `Edge Type`)\n  \n  sailor_collaborators_roles\n\n\n# A tibble: 51 × 4\n   from_id name                node_type    `Edge Type`\n   &lt;chr&gt;   &lt;chr&gt;               &lt;chr&gt;        &lt;chr&gt;      \n 1 17227   Aiden Harper        Person       LyricistOf \n 2 17041   Arlo Sterling       Person       LyricistOf \n 3 17190   Astrid Nørgaard     Person       ComposerOf \n 4 17349   Beatrice Albright   Person       LyricistOf \n 5 17349   Beatrice Albright   Person       PerformerOf\n 6 17045   Cassian Rae         Person       ComposerOf \n 7 17296   Coralia Bellweather Person       ComposerOf \n 8 16996   Crimson Carriage    MusicalGroup PerformerOf\n 9 17355   Daniel OConnell     Person       ComposerOf \n10 17355   Daniel OConnell     Person       PerformerOf\n# ℹ 41 more rows\n\n\nThere were 48 persons and musical groups whom collaborated with her."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#find-works-and-musicians-which-were-directly-influenced-by-sailor-and-ivy-echos",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#find-works-and-musicians-which-were-directly-influenced-by-sailor-and-ivy-echos",
    "title": "Take-Home Exercise 2",
    "section": "7.2 Find works and musicians which were directly influenced by Sailor and Ivy Echos",
    "text": "7.2 Find works and musicians which were directly influenced by Sailor and Ivy Echos\nFilter by works that cited Sailor based on “InStyleOf”, “InterpolatesFrom”, “CoverOf”, “LyricalReferenceTo”, “DirectlySamples”\n\n\nShow code\nreferencing_works &lt;- mc1_edges_clean %&gt;%\n  filter(\n    to_id %in% sailor_works,\n    `Edge Type` %in% c(\"InStyleOf\", \"InterpolatesFrom\", \"CoverOf\", \n                       \"LyricalReferenceTo\", \"DirectlySamples\")\n  ) %&gt;%\n  pull(from_id) %&gt;%\n  unique()\n\n# Find people or groups who created those referencing works\n\ndirect_influencees &lt;- mc1_edges_clean %&gt;%\n  filter(\n    to_id %in% referencing_works,\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n  ) %&gt;%\n  left_join(\n    mc1_nodes_clean %&gt;% select(id, name, node_type = `Node Type`),\n    by = c(\"from_id\" = \"id\")\n  ) %&gt;%\n  filter(node_type %in% c(\"Person\", \"MusicalGroup\")) %&gt;%\n  distinct(from_id, name, node_type)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#sailors-influence",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#sailors-influence",
    "title": "Take-Home Exercise 2",
    "section": "7.3 Sailor’s influence",
    "text": "7.3 Sailor’s influence\nFind how often Sailor’s works were cited.\n\n\nShow code\ndirect_influence_counts &lt;- mc1_edges_clean %&gt;%\n  filter(\n    to_id %in% sailor_works,\n    `Edge Type` %in% c(\"InStyleOf\", \"InterpolatesFrom\", \"CoverOf\", \n                       \"LyricalReferenceTo\", \"DirectlySamples\")\n  ) %&gt;%\n  left_join(mc1_nodes_clean %&gt;% select(id, name), by = c(\"from_id\" = \"id\")) %&gt;%\n  count(name, sort = TRUE)\n\ndirect_influence_counts\n\n\n# A tibble: 0 × 2\n# ℹ 2 variables: name &lt;chr&gt;, n &lt;int&gt;\n\n\nWe can conclude that there was no Sailor’s work cited by others."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#sailors-influence-through-ivy-echos",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#sailors-influence-through-ivy-echos",
    "title": "Take-Home Exercise 2",
    "section": "7.4 Sailor’s influence through Ivy Echos",
    "text": "7.4 Sailor’s influence through Ivy Echos\nLet’s check if there was any Ivy Echo’s work cited by others using the code below.\n\n\nShow code\n# Get Ivy Echos' ID and works\nivy_id &lt;- mc1_nodes_clean %&gt;%\n  filter(str_trim(name) == \"Ivy Echos\") %&gt;%\n  pull(id)\n\nivy_works &lt;- mc1_edges_clean %&gt;%\n  filter(from_id == ivy_id, \n         `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")) %&gt;%\n  pull(to_id) %&gt;%\n  unique()\n\nreferencing_works_sailor &lt;- mc1_edges_clean %&gt;%\n  filter(\n    to_id %in% sailor_works,\n    `Edge Type` %in% c(\"InStyleOf\", \"InterpolatesFrom\", \"CoverOf\", \n                       \"LyricalReferenceTo\", \"DirectlySamples\")\n  ) %&gt;%\n  pull(from_id)\n\nreferencing_works_ivy &lt;- mc1_edges_clean %&gt;%\n  filter(\n    to_id %in% ivy_works,\n    `Edge Type` %in% c(\"InStyleOf\", \"InterpolatesFrom\", \"CoverOf\", \n                       \"LyricalReferenceTo\", \"DirectlySamples\")\n  ) %&gt;%\n  pull(from_id)\n\nreferencing_works &lt;- unique(c(referencing_works_sailor, referencing_works_ivy))\n\nmc1_nodes_clean %&gt;%\n  filter(id %in% referencing_works) %&gt;%\n  select(id, name, `Node Type`, release_date)\n\n\n# A tibble: 1 × 4\n  id    name            `Node Type` release_date\n  &lt;chr&gt; &lt;chr&gt;           &lt;chr&gt;              &lt;int&gt;\n1 17112 Embers & Echoes Album               2031\n\n\nThere was one album “Embers & Echoes” which was influenced by Ivy Echos’ work."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#musicians-whom-were-directly-influenced-by-sailor-ivy-echos",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#musicians-whom-were-directly-influenced-by-sailor-ivy-echos",
    "title": "Take-Home Exercise 2",
    "section": "7.5 Musicians whom were directly influenced by Sailor/ Ivy Echos",
    "text": "7.5 Musicians whom were directly influenced by Sailor/ Ivy Echos\n\nmc1_edges_clean %&gt;%\n  filter(\n    to_id == \"17112\",  # ID of Embers & Echoes\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")\n  ) %&gt;%\n  left_join(\n    mc1_nodes_clean %&gt;% select(id, name, node_type = `Node Type`),\n    by = c(\"from_id\" = \"id\")\n  ) %&gt;%\n  filter(node_type %in% c(\"Person\", \"MusicalGroup\")) %&gt;%\n  select(from_id, name, node_type) %&gt;%\n  distinct()\n\n# A tibble: 5 × 3\n  from_id name                node_type   \n  &lt;chr&gt;   &lt;chr&gt;               &lt;chr&gt;       \n1 17110   The Hollow Monarchs MusicalGroup\n2 17402   N.V. Blake          Person      \n3 17406   Ivy Steele          Person      \n4 17407   Nate Wild           Person      \n5 17408   Scarlett Moon       Person      \n\n\nCheck membership of The Hollow Monarchs musical group.\n\n# Get the ID of The Hollow Monarchs\nhollow_monarchs_id &lt;- mc1_nodes_clean %&gt;%\n  filter(str_trim(name) == \"The Hollow Monarchs\") %&gt;%\n  pull(id)\n\n# Find people who have a MemberOf edge pointing to the group\nhollow_monarchs_members &lt;- mc1_edges_clean %&gt;%\n  filter(\n    `Edge Type` == \"MemberOf\",\n    to_id == hollow_monarchs_id\n  ) %&gt;%\n  left_join(mc1_nodes_clean %&gt;% select(id, member_name = name, member_type = `Node Type`),\n            by = c(\"from_id\" = \"id\")) %&gt;%\n  filter(member_type == \"Person\") %&gt;%\n  select(from_id, member_name)\n\nhollow_monarchs_members\n\n# A tibble: 3 × 2\n  from_id member_name     \n  &lt;chr&gt;   &lt;chr&gt;           \n1 17107   Chloe Montgomery\n2 17108   Nathaniel Brooks\n3 17109   Clara Davis"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#musicians-whom-were-directly-influenced-by-sailor-ivy-echos-1",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#musicians-whom-were-directly-influenced-by-sailor-ivy-echos-1",
    "title": "Take-Home Exercise 2",
    "section": "7.6 Musicians whom were directly influenced by Sailor/ Ivy Echos",
    "text": "7.6 Musicians whom were directly influenced by Sailor/ Ivy Echos\nFinding works and people which were indirectly influenced by Sailor and Ivy Echos.\nThis means finding the works that were influenced by Embers & Echoes album first.\n\n# Get the ID of \"Embers & Echoes\"\nembers_id &lt;- mc1_nodes_clean %&gt;%\n  filter(str_trim(name) == \"Embers & Echoes\") %&gt;%\n  pull(id) %&gt;%\n  as.character()\n\n# Check if any works cited Embers & Echoes using influence-type edges\nworks_citing_embers &lt;- mc1_edges_clean %&gt;%\n  filter(\n    to_id == embers_id,\n    `Edge Type` %in% c(\"InStyleOf\", \"CoverOf\", \"InterpolatesFrom\",\n                       \"DirectlySamples\", \"LyricalReferenceTo\")\n  ) %&gt;%\n  pull(from_id) %&gt;%\n  unique()\n\n# Show the works that cited it\nmc1_nodes_clean %&gt;%\n  filter(id %in% works_citing_embers) %&gt;%\n  select(id, name, `Node Type`, release_date)\n\n# A tibble: 0 × 4\n# ℹ 4 variables: id &lt;chr&gt;, name &lt;chr&gt;, Node Type &lt;chr&gt;, release_date &lt;int&gt;\n\n\nNo other works cited Ember & Echoes.Hence, no one had been indirectly influenced by Sailor / Ivy Echos."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#plot-preparation",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#plot-preparation",
    "title": "Take-Home Exercise 2",
    "section": "7.7 Plot Preparation",
    "text": "7.7 Plot Preparation\nWe begin by filtering Sailor’s work that were cited by others and had collaboration:\n\n\nShow code\n# Identify works of Sailor that were cited\nsailor_works_cited &lt;- mc1_edges_clean %&gt;%\n  filter(\n    `Edge Type` %in% c(\"InStyleOf\", \"CoverOf\", \"InterpolatesFrom\", \"DirectlySamples\", \"LyricalReferenceTo\"),\n    to_id %in% sailor_works\n  ) %&gt;%\n  pull(to_id) %&gt;%\n  unique()\n\n# Identify works Sailor collaborated on (other people involved)\nsailor_works_collab &lt;- mc1_edges_clean %&gt;%\n  filter(\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\"),\n    to_id %in% sailor_works,\n    from_id != sailor_id\n  ) %&gt;%\n  pull(to_id) %&gt;%\n  unique()\n\n# Filter only the Sailor works that are either cited or collaborations\nsailor_works_filtered &lt;- intersect(sailor_works, union(sailor_works_cited, sailor_works_collab))\n\n\nFilter away Ivy Echos’ work if it is not cited by others\n\n\nShow code\n# Ivy Echos works cited by others\nivy_works_cited &lt;- mc1_edges_clean %&gt;%\n  filter(\n    `Edge Type` %in% c(\"InStyleOf\", \"CoverOf\", \"InterpolatesFrom\", \"DirectlySamples\", \"LyricalReferenceTo\"),\n    to_id %in% ivy_works\n  ) %&gt;%\n  pull(to_id) %&gt;%\n  unique()\n\n# Ivy Echos works with collaboration\nivy_works_collab &lt;- mc1_edges_clean %&gt;%\n  filter(\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\"),\n    to_id %in% ivy_works,\n    from_id != ivy_id\n  ) %&gt;%\n  pull(to_id) %&gt;%\n  unique()\n\n# Filter Ivy Echos works that are either cited or collaborative\nivy_works_filtered &lt;- intersect(ivy_works, union(ivy_works_cited, ivy_works_collab))\n\n\nAdd in Ember & Echoes’s contributors as they were directly influenced by Ivy Echos:\n\n\nShow code\nembers_contributors &lt;- mc1_edges_clean %&gt;%\n  filter(\n    to_id == embers_id,\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")\n  ) %&gt;%\n  left_join(\n    mc1_nodes_clean %&gt;%\n      select(id, name, node_type = `Node Type`),\n    by = c(\"from_id\" = \"id\")\n  ) %&gt;%\n  filter(node_type %in% c(\"Person\", \"MusicalGroup\")) %&gt;%\n  distinct(from_id, name, node_type)\n\n\n\n\nShow code\n# Combine node IDs\nall_ids &lt;- unique(c(\n  sailor_id,\n  ivy_id,  \n  sailor_works_filtered,\n  ivy_works_filtered,\n  sailor_collaborators$from_id,\n  referencing_works,\n  direct_influencees$from_id,\n  embers_contributors$from_id  \n))\n\n# Filter node table\nmini_nodes &lt;- mc1_nodes_clean %&gt;%\n  filter(id %in% all_ids) %&gt;%\n  mutate(\n    label = name,\n    is_sailor = id == sailor_id,\n    is_ivy = id == ivy_id,\n    is_work = id %in% sailor_works_filtered,\n    is_ivy_work = id %in% ivy_works_filtered,\n    is_collaborator = id %in% sailor_collaborators$from_id,\n    is_direct_influencee = id %in% direct_influencees$from_id,\n    is_embers_contributor = id %in% embers_contributors$from_id,  \n    category = case_when(\n      is_sailor ~ \"Sailor Shift\",\n      is_ivy ~ \"Ivy Echos\",\n      is_work ~ \"Sailor's Work\",\n      is_ivy_work ~ \"Ivy's Work\",\n      is_collaborator ~ \"Collaborator\",\n      is_direct_influencee ~ \"Direct Influencee\",\n      is_embers_contributor ~ \"Embers Contributor\",  \n      TRUE ~ \"Other\"\n    )\n  )\n\n# Filter edges between valid nodes\nmini_edges &lt;- mc1_edges_clean %&gt;%\n  filter(from_id %in% all_ids, to_id %in% all_ids) %&gt;%\n  select(from = from_id, to = to_id, `Edge Type`) %&gt;%\n  mutate(from = as.character(from), to = as.character(to))\n\n# Build tidygraph object\ngraph_tbl &lt;- tbl_graph(\n  nodes = mini_nodes %&gt;% mutate(name = as.character(id)),  \n  edges = mini_edges %&gt;% mutate(\n    from = as.character(from),\n    to = as.character(to)\n  ),\n  directed = TRUE\n)\n\n# Add tooltip\ngraph_tbl &lt;- graph_tbl %&gt;%\n  mutate(tooltip = paste0(label, \" (\", `Node Type`, \")\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#plot-interactive-graph",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#plot-interactive-graph",
    "title": "Take-Home Exercise 2",
    "section": "7.8 Plot interactive graph",
    "text": "7.8 Plot interactive graph\nThe visualisation showing who has Sailor collaborated with and directly or indirectly influenced is shown below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nset.seed(1111)\nlayout_tbl &lt;- create_layout(graph_tbl, layout = \"stress\")\n\ngraph_tbl &lt;- graph_tbl %&gt;%\n  mutate(across(where(is.character), ~ gsub(\"'\", \"\", .x))) %&gt;%\n  mutate(\n    tooltip = paste0(\n      label, \n      \" (\", `Node Type`, \")\", \n      ifelse(!is.na(release_date), paste0(\"\\nRelease Year: \", release_date), \"\"),\n      ifelse(!is.na(genre), paste0(\"\\nGenre: \", genre), \"\")\n    )\n  )\n\n# Define graph\ng &lt;- ggraph(layout_tbl) +\n  \n  # Edge rendering\n  geom_edge_fan(\n    aes(color = `Edge Type`),\n    alpha = 0.8,\n    arrow = arrow(length = unit(1.2, 'mm'), type = \"closed\"),\n    start_cap = circle(1, 'mm'),\n    end_cap = circle(1, 'mm'),\n    lineend = \"round\",\n    show.legend = TRUE\n  ) +\n  \n  # Nodes with interactivity\n  geom_point_interactive(\n    aes(\n      x = x,\n      y = y,\n      color = category,\n      shape = `Node Type`,\n      tooltip = tooltip,\n      data_id = label\n    ),\n    size = 2\n  ) +\n\n  # Labels for key nodes\n  geom_node_text(\n    aes(label = ifelse(category == \"Sailor Shift\", label, NA)),\n    size = 5,\n    fontface = \"bold\",\n    color = \"black\",\n    repel = TRUE\n  ) +\n  \n  geom_node_text(\n    aes(label = ifelse(category == \"Sailor's Work\", label, NA)),\n    size = 2,\n    fontface = \"italic\",\n    color = \"blue\",\n    repel = TRUE\n  ) +\n\n  geom_node_text(\n    aes(label = ifelse(category == \"Collaborator\", label, NA)),\n    size = 2,\n    color = \"black\",\n    repel = TRUE\n  ) +\n\n  geom_node_text(\n    aes(label = ifelse(category == \"Direct Influencee\", label, NA)),\n    size = 3,\n    color = \"black\",\n    repel = TRUE\n  ) +\n\n  geom_node_text(\n    aes(label = ifelse(label == \"Ivy Echos\", label, NA)),\n    size = 3,\n    fontface = \"bold.italic\",\n    color = \"darkgreen\",\n    repel = TRUE\n  ) +\n\n  geom_node_text(\n    aes(label = ifelse(category == \"Embers Contributor\", label, NA)),\n    size = 2.5,\n    fontface = \"italic\",\n    color = \"goldenrod4\",\n    repel = TRUE\n  ) +\n\n  # Color and shape scales\nscale_color_manual(\n  values = c(\n    \"Sailor Shift\" = \"red\",\n    \"Ivy Echos\" = \"darkgreen\",\n    \"Sailor's Work\" = \"blue\",\n    \"Ivy's Work\" = \"darkgreen\",\n    \"Collaborator\" = \"grey\",\n    \"Direct Influencee\" = \"orange\",\n    \"Embers Contributor\" = \"gold\",       \n    \"Other\" = \"black\"\n  ),\n  name = \"Node Category\"\n) +\n\n  scale_shape_manual(\n    values = c(\"Person\" = 15, \"MusicalGroup\" = 17, \"Album\" = 16, \"Song\" = 3),\n    name = \"Node Type\"\n  ) +\n\n  theme_void() +\n  theme(\n    plot.margin = margin(30, 30, 30, 30),\n    legend.title = element_text(size = 8),\n    legend.text = element_text(size = 8)\n  )\n\n# Wrap in interactive output\ngirafe(ggobj = g, width_svg = 10, height_svg = 6)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html",
    "title": "Take-Home Exercise 2",
    "section": "",
    "text": "The case was extracted from VAST Challenge 2025.\n\n\nOne of music’s biggest superstars is Oceanus native Sailor Shift. From humble beginnings, Sailor has grown in popularity and now enjoys fans around the world. Sailor started her career on the island nation of Oceanus which can be clearly seen in her early work, she started in the genre of “Oceanus Folk”. While Sailor has moved away from the traditional Oceanus style, the Oceanus Folk has made a name for itself in the musical world. The popularity of this music is one of the factors driving an increase in tourism to a quiet island nation that used to be known for fishing.\nIn 2023, Sailor Shift joined the Ivy Echoes – an all-female Oceanus Folk band consisting of Sailor (vocalist), Maya Jensen (vocalist), Lila “Lilly” Hartman (guitarist), Jade Thompson (drummer), and Sophie Ramirez (bassist). They played together at venues throughout Oceanus but had broken up to pursue their individual careers by 2026. Sailor’s breakthrough came in 2028 when one of her singles went viral, launched to the top of the global charts (something no other Oceanus Folk song had ever done). Since then, she has only continued to grow in popularity worldwide.\nSailor has released a new album almost every year since her big break, and each has done better than the last. Although she has remained primarily a solo artist, she has also frequently collaborated with other established artists, especially in the Indie Pop and Indie Folk genres. She herself has branched out musically over the years but regularly returns to the Oceanus Folk genre — even as the genre’s influence on the rest of the music world has spread even more.\nSailor has always been passionate about two things: (1) spreading Oceanus Folk, and (2) helping lesser-known artists break into music. Because of those goals, she’s particularly famous for her frequent collaborations.\nAdditionally, because of Sailor’s success, more attention began to be paid over the years to her previous bandmates. All 4 have continued in the music industry—Maya as an independent vocalist, Lilly and Jade as instrumentalists in other bands, and Sophie as a music producer for a major record label. In various ways, all of them have contributed to the increased influence of Oceanus folk, resulting in a new generation of up-and-coming Oceanus Folk artists seeking to make a name for themselves in the music industry.\nNow, as Sailor returns to Oceanus in 2040, a local journalist – Silas Reed – is writing a piece titled Oceanus Folk: Then-and-Now that aims to trace the rise of Sailor and the influence of Oceanus Folk on the rest of the music world. He has collected a large dataset of musical artists, producers, albums, songs, and influences and organized it into a knowledge graph. Your task is to help Silas create beautiful and informative visualizations of this data and uncover new and interesting information about Sailor’s past, her rise to stardom, and her influence.\n\n\n\n\nDesign and develop visualizations and visual analytic tools that will allow Silas to explore and understand the profile of Sailor Shift’s career\n\nWho has she been most influenced by over time?\nWho has she collaborated with and directly or indirectly influenced?\nHow has she influenced collaborators of the broader Oceanus Folk community?\n\nDevelop visualizations that illustrate how the influence of Oceanus Folk has spread through the musical world.\n\nWas this influence intermittent or did it have a gradual rise?\nWhat genres and top artists have been most influenced by Oceanus Folk?\nOn the converse, how has Oceanus Folk changed with the rise of Sailor Shift? From which genres does it draw most of its contemporary inspiration?\n\nUse your visualizations to develop a profile of what it means to be a rising star in the music industry.\n\nVisualize the careers of three artists. Compare and contrast their rise in popularity and influence.\nUsing this characterization, give three predictions of who the next Oceanus Folk stars with be over the next five years."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#background",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#background",
    "title": "Take-Home Exercise 2",
    "section": "",
    "text": "One of music’s biggest superstars is Oceanus native Sailor Shift. From humble beginnings, Sailor has grown in popularity and now enjoys fans around the world. Sailor started her career on the island nation of Oceanus which can be clearly seen in her early work, she started in the genre of “Oceanus Folk”. While Sailor has moved away from the traditional Oceanus style, the Oceanus Folk has made a name for itself in the musical world. The popularity of this music is one of the factors driving an increase in tourism to a quiet island nation that used to be known for fishing.\nIn 2023, Sailor Shift joined the Ivy Echoes – an all-female Oceanus Folk band consisting of Sailor (vocalist), Maya Jensen (vocalist), Lila “Lilly” Hartman (guitarist), Jade Thompson (drummer), and Sophie Ramirez (bassist). They played together at venues throughout Oceanus but had broken up to pursue their individual careers by 2026. Sailor’s breakthrough came in 2028 when one of her singles went viral, launched to the top of the global charts (something no other Oceanus Folk song had ever done). Since then, she has only continued to grow in popularity worldwide.\nSailor has released a new album almost every year since her big break, and each has done better than the last. Although she has remained primarily a solo artist, she has also frequently collaborated with other established artists, especially in the Indie Pop and Indie Folk genres. She herself has branched out musically over the years but regularly returns to the Oceanus Folk genre — even as the genre’s influence on the rest of the music world has spread even more.\nSailor has always been passionate about two things: (1) spreading Oceanus Folk, and (2) helping lesser-known artists break into music. Because of those goals, she’s particularly famous for her frequent collaborations.\nAdditionally, because of Sailor’s success, more attention began to be paid over the years to her previous bandmates. All 4 have continued in the music industry—Maya as an independent vocalist, Lilly and Jade as instrumentalists in other bands, and Sophie as a music producer for a major record label. In various ways, all of them have contributed to the increased influence of Oceanus folk, resulting in a new generation of up-and-coming Oceanus Folk artists seeking to make a name for themselves in the music industry.\nNow, as Sailor returns to Oceanus in 2040, a local journalist – Silas Reed – is writing a piece titled Oceanus Folk: Then-and-Now that aims to trace the rise of Sailor and the influence of Oceanus Folk on the rest of the music world. He has collected a large dataset of musical artists, producers, albums, songs, and influences and organized it into a knowledge graph. Your task is to help Silas create beautiful and informative visualizations of this data and uncover new and interesting information about Sailor’s past, her rise to stardom, and her influence."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#tasks-and-questions",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#tasks-and-questions",
    "title": "Take-Home Exercise 2",
    "section": "",
    "text": "Design and develop visualizations and visual analytic tools that will allow Silas to explore and understand the profile of Sailor Shift’s career\n\nWho has she been most influenced by over time?\nWho has she collaborated with and directly or indirectly influenced?\nHow has she influenced collaborators of the broader Oceanus Folk community?\n\nDevelop visualizations that illustrate how the influence of Oceanus Folk has spread through the musical world.\n\nWas this influence intermittent or did it have a gradual rise?\nWhat genres and top artists have been most influenced by Oceanus Folk?\nOn the converse, how has Oceanus Folk changed with the rise of Sailor Shift? From which genres does it draw most of its contemporary inspiration?\n\nUse your visualizations to develop a profile of what it means to be a rising star in the music industry.\n\nVisualize the careers of three artists. Compare and contrast their rise in popularity and influence.\nUsing this characterization, give three predictions of who the next Oceanus Folk stars with be over the next five years."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#load-packages",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#load-packages",
    "title": "Take-Home Exercise 2",
    "section": "2.1 Load packages",
    "text": "2.1 Load packages\nIn the code chunk below, p_load() of pacman packages is used to load the R packages into R environment:\nUtility Tools\n\njsonlite: To parse JSON\ntidyverse - Data science tools\nggtext - Tools for text formatting\nknitr - For better table displays\nlubridate - For processing date and time\n\nGraphing Tools\n\npatchwork - For combining ggplot plots\nggraph - For plotting network data\ntidygraph - For graph manipulations\nigraph - Contains functions for network analysis\nggiraph - Interactive plots\n\n\n\n\n\n\n\nCode\n\n\n\n\n\n\n\nShow code\npacman::p_load(jsonlite, tidyverse, ggtext,\n                knitr, lubridate, patchwork,\n                ggraph, tidygraph, igraph,\n                ggiraph)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#import-data-and-inspect-structure",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#import-data-and-inspect-structure",
    "title": "Take-Home Exercise 2",
    "section": "2.2 Import Data and Inspect Structure",
    "text": "2.2 Import Data and Inspect Structure\nIn the code chunk below, fromJSON() of jsonlite package is used to import MC1_graph.json file into R and save the output object and the data structure is inspected\n\n\n\n\n\n\nCode\n\n\n\n\n\n\n\nShow code\nmc1_data &lt;- fromJSON(\"MC1data/MC1_graph.json\")\nglimpse(mc1_data)\n\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n  ..$ node_default: Named list()\n  ..$ edge_default: Named list()\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n  ..$ Node Type     : chr [1:17412] \"Song\" \"Person\" \"Person\" \"Person\" ...\n  ..$ name          : chr [1:17412] \"Breaking These Chains\" \"Carlos Duffy\" \"Min Qin\" \"Xiuying Xie\" ...\n  ..$ single        : logi [1:17412] TRUE NA NA NA NA FALSE ...\n  ..$ release_date  : chr [1:17412] \"2017\" NA NA NA ...\n  ..$ genre         : chr [1:17412] \"Oceanus Folk\" NA NA NA ...\n  ..$ notable       : logi [1:17412] TRUE NA NA NA NA TRUE ...\n  ..$ id            : int [1:17412] 0 1 2 3 4 5 6 7 8 9 ...\n  ..$ written_date  : chr [1:17412] NA NA NA NA ...\n  ..$ stage_name    : chr [1:17412] NA NA NA NA ...\n  ..$ notoriety_date: chr [1:17412] NA NA NA NA ...\n $ links     :'data.frame': 37857 obs. of  4 variables:\n  ..$ Edge Type: chr [1:37857] \"InterpolatesFrom\" \"RecordedBy\" \"PerformerOf\" \"ComposerOf\" ...\n  ..$ source   : int [1:37857] 0 0 1 1 2 2 3 5 5 5 ...\n  ..$ target   : int [1:37857] 1841 4 0 16180 0 16180 0 5088 14332 11677 ...\n  ..$ key      : int [1:37857] 0 0 0 0 0 0 0 0 0 0 ..."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#inspect-data-structure-of-nodes-and-edges",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#inspect-data-structure-of-nodes-and-edges",
    "title": "Take-Home Exercise 2",
    "section": "2.3 Inspect Data Structure of Nodes and Edges",
    "text": "2.3 Inspect Data Structure of Nodes and Edges\n\nSeparating into node and edge data\n\nmc1_nodes_raw &lt;- as_tibble(mc1_data$nodes)\n\nglimpse(mc1_nodes_raw)\n\nRows: 17,412\nColumns: 10\n$ `Node Type`    &lt;chr&gt; \"Song\", \"Person\", \"Person\", \"Person\", \"RecordLabel\", \"S…\n$ name           &lt;chr&gt; \"Breaking These Chains\", \"Carlos Duffy\", \"Min Qin\", \"Xi…\n$ single         &lt;lgl&gt; TRUE, NA, NA, NA, NA, FALSE, NA, NA, NA, NA, TRUE, NA, …\n$ release_date   &lt;chr&gt; \"2017\", NA, NA, NA, NA, \"2026\", NA, NA, NA, NA, \"2020\",…\n$ genre          &lt;chr&gt; \"Oceanus Folk\", NA, NA, NA, NA, \"Lo-Fi Electronica\", NA…\n$ notable        &lt;lgl&gt; TRUE, NA, NA, NA, NA, TRUE, NA, NA, NA, NA, TRUE, NA, N…\n$ id             &lt;int&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1…\n$ written_date   &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"2020\", NA, NA,…\n$ stage_name     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ notoriety_date &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n\nkable(head(mc1_nodes_raw, 5))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNode Type\nname\nsingle\nrelease_date\ngenre\nnotable\nid\nwritten_date\nstage_name\nnotoriety_date\n\n\n\n\nSong\nBreaking These Chains\nTRUE\n2017\nOceanus Folk\nTRUE\n0\nNA\nNA\nNA\n\n\nPerson\nCarlos Duffy\nNA\nNA\nNA\nNA\n1\nNA\nNA\nNA\n\n\nPerson\nMin Qin\nNA\nNA\nNA\nNA\n2\nNA\nNA\nNA\n\n\nPerson\nXiuying Xie\nNA\nNA\nNA\nNA\n3\nNA\nNA\nNA\n\n\nRecordLabel\nNautical Mile Records\nNA\nNA\nNA\nNA\n4\nNA\nNA\nNA\n\n\n\n\n\n\nmc1_edges_raw &lt;- as_tibble(mc1_data$links)\n\nglimpse(mc1_edges_raw)\n\nRows: 37,857\nColumns: 4\n$ `Edge Type` &lt;chr&gt; \"InterpolatesFrom\", \"RecordedBy\", \"PerformerOf\", \"Composer…\n$ source      &lt;int&gt; 0, 0, 1, 1, 2, 2, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5…\n$ target      &lt;int&gt; 1841, 4, 0, 16180, 0, 16180, 0, 5088, 14332, 11677, 2479, …\n$ key         &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\nkable(head(mc1_edges_raw, 10))\n\n\n\n\nEdge Type\nsource\ntarget\nkey\n\n\n\n\nInterpolatesFrom\n0\n1841\n0\n\n\nRecordedBy\n0\n4\n0\n\n\nPerformerOf\n1\n0\n0\n\n\nComposerOf\n1\n16180\n0\n\n\nPerformerOf\n2\n0\n0\n\n\nProducerOf\n2\n16180\n0\n\n\nPerformerOf\n3\n0\n0\n\n\nInterpolatesFrom\n5\n5088\n0\n\n\nInStyleOf\n5\n14332\n0\n\n\nInterpolatesFrom\n5\n11677\n0"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#data-pre-processing-1",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#data-pre-processing-1",
    "title": "Take-Home Exercise 2",
    "section": "2.3 Data Pre-processing",
    "text": "2.3 Data Pre-processing\n\n2.3.1 New columns created to identify “Sailor” and “Oceanus_folk” related works\nAids identification and filtering of “Sailor” and “Oceanus_folk” related works for analysis\n\nmc1_nodes_raw &lt;- mc1_nodes_raw %&gt;%\n  mutate(\n    is_sailor = (\n      str_detect(name, regex(\"sailor shift\", ignore_case = TRUE))\n    ) %&gt;% replace_na(FALSE),\n    \n    is_oceanus_folk = str_detect(genre, regex(\"oceanus folk\", ignore_case = TRUE)) %&gt;% \n      replace_na(FALSE)\n  )\n\n\n\n2.3.2 Convert date fields\nConvert date fields from “chr” to “int”\nNote: Dates only appears in Songs and Albums.\n\nmc1_nodes_raw &lt;- mc1_nodes_raw %&gt;%\n  mutate(across(c(release_date, notoriety_date, written_date),\n                ~as.integer(if_else(`Node Type` %in% c(\"Song\", \"Album\"), ., NA_character_))))\n\n\n\n2.3.3 Check and remove duplicates\nCheck and remove duplicates\nFor Nodes, there are no duplicates:\n\nmc1_nodes_raw %&gt;%\n  count(id) %&gt;%\n  filter(n &gt; 1)\n\n# A tibble: 0 × 2\n# ℹ 2 variables: id &lt;int&gt;, n &lt;int&gt;\n\n\nFor Edges, there are duplicates as seen below. Only their Keys are different. However, Keys are not used for subsequent data analysis. Hence, these duplicated edges are removed.\n\nduplicate_summary &lt;- mc1_edges_raw %&gt;%\n  count(source, target, `Edge Type`) %&gt;%\n  filter(n &gt; 1)\n\nmc1_edges_raw %&gt;%\n  inner_join(duplicate_summary, by = c(\"source\", \"target\", \"Edge Type\"))\n\n# A tibble: 6 × 5\n  `Edge Type` source target   key     n\n  &lt;chr&gt;        &lt;int&gt;  &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1 PerformerOf  17057  17058     0     2\n2 PerformerOf  17057  17058     1     2\n3 PerformerOf  17349  17350     0     2\n4 PerformerOf  17349  17350     2     2\n5 PerformerOf  17355  17356     0     2\n6 PerformerOf  17355  17356     2     2\n\n\nAll duplicates were removed:\n\nmc1_edges_raw &lt;- mc1_edges_raw %&gt;%\n  distinct(source, target, `Edge Type`, .keep_all = TRUE)\n\nmc1_edges_raw %&gt;%\n  count(source, target, `Edge Type`) %&gt;%\n  filter(n &gt; 1)\n\n# A tibble: 0 × 4\n# ℹ 4 variables: source &lt;int&gt;, target &lt;int&gt;, Edge Type &lt;chr&gt;, n &lt;int&gt;"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#explore-and-inspect-nodes",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#explore-and-inspect-nodes",
    "title": "Take-Home Exercise 2",
    "section": "3.1 Explore and Inspect Nodes",
    "text": "3.1 Explore and Inspect Nodes\n\nmc1_nodes_raw$release_date %&gt;% unique()\n\n [1] 2017   NA 2026 2020 2027 2022 2007 2010 2003 2023 1997 2013 2000 2025 2029\n[16] 2015 2018 2016 2014 2028 2021 2030 2011 1994 2004 1998 1991 1999 2024 2012\n[31] 2002 2006 2008 2019 1995 1989 2032 2009 2001 1996 1990 1984 2005 1993 1986\n[46] 1985 1981 1992 1987 1988 1983 2031 1975 2035 2033 2037 2036 2039 2038 2034\n[61] 1977 1979 1980 1982 2040\n\nmc1_nodes_raw %&gt;%\n  filter(grepl(\"Sailor Shift\", name))\n\n# A tibble: 1 × 12\n  `Node Type` name         single release_date genre notable    id written_date\n  &lt;chr&gt;       &lt;chr&gt;        &lt;lgl&gt;         &lt;int&gt; &lt;chr&gt; &lt;lgl&gt;   &lt;int&gt;        &lt;int&gt;\n1 Person      Sailor Shift NA               NA &lt;NA&gt;  NA      17255           NA\n# ℹ 4 more variables: stage_name &lt;chr&gt;, notoriety_date &lt;int&gt;, is_sailor &lt;lgl&gt;,\n#   is_oceanus_folk &lt;lgl&gt;\n\n\n\nmc1_nodes_clean &lt;- mc1_nodes_raw %&gt;%\n  mutate(\n    name = gsub(\"'\", \"\", name)\n  )\n\nkable(head(mc1_nodes_clean))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNode Type\nname\nsingle\nrelease_date\ngenre\nnotable\nid\nwritten_date\nstage_name\nnotoriety_date\nis_sailor\nis_oceanus_folk\n\n\n\n\nSong\nBreaking These Chains\nTRUE\n2017\nOceanus Folk\nTRUE\n0\nNA\nNA\nNA\nFALSE\nTRUE\n\n\nPerson\nCarlos Duffy\nNA\nNA\nNA\nNA\n1\nNA\nNA\nNA\nFALSE\nFALSE\n\n\nPerson\nMin Qin\nNA\nNA\nNA\nNA\n2\nNA\nNA\nNA\nFALSE\nFALSE\n\n\nPerson\nXiuying Xie\nNA\nNA\nNA\nNA\n3\nNA\nNA\nNA\nFALSE\nFALSE\n\n\nRecordLabel\nNautical Mile Records\nNA\nNA\nNA\nNA\n4\nNA\nNA\nNA\nFALSE\nFALSE\n\n\nSong\nUnshackled Heart\nFALSE\n2026\nLo-Fi Electronica\nTRUE\n5\nNA\nNA\nNA\nFALSE\nFALSE"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#explore-and-inspect-edges",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#explore-and-inspect-edges",
    "title": "Take-Home Exercise 2",
    "section": "3.2 Explore and Inspect Edges",
    "text": "3.2 Explore and Inspect Edges\nConfirm that the IDs used in edges match the range of IDs in nodes\n\nrange(mc1_edges_raw$source)\n\n[1]     0 17411\n\nrange(mc1_edges_raw$target) \n\n[1]     0 17411"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#mapping-from-node-name-to-edges-indexes",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#mapping-from-node-name-to-edges-indexes",
    "title": "Take-Home Exercise 2",
    "section": "3.3 Mapping from node name to edges indexes",
    "text": "3.3 Mapping from node name to edges indexes\nName is not an unique identifier.\n\nmc1_nodes_clean %&gt;%\n  count(name) %&gt;%\n  filter(n &gt; 1)\n\n# A tibble: 1,611 × 2\n   name                 n\n   &lt;chr&gt;            &lt;int&gt;\n 1 Agata Records        2\n 2 Ancestral Echoes     2\n 3 Angela Thompson      2\n 4 Anthony Davis        2\n 5 Anthony Smith        2\n 6 Asuka Takahashi      3\n 7 Brandon Wilson       2\n 8 Brian Gonzalez       2\n 9 Bryan Garcia         2\n10 Bryan Smith          3\n# ℹ 1,601 more rows\n\n\n\nid_map &lt;- mc1_nodes_clean %&gt;%\n  select(id, name)\n\nid_map\n\n# A tibble: 17,412 × 2\n      id name                   \n   &lt;int&gt; &lt;chr&gt;                  \n 1     0 Breaking These Chains  \n 2     1 Carlos Duffy           \n 3     2 Min Qin                \n 4     3 Xiuying Xie            \n 5     4 Nautical Mile Records  \n 6     5 Unshackled Heart       \n 7     6 Luke Payne             \n 8     7 Xiulan Zeng            \n 9     8 David Franklin         \n10     9 Colline-Cascade Studios\n# ℹ 17,402 more rows"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#map-source-and-target-to-node-name-while-keeping-the-id",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#map-source-and-target-to-node-name-while-keeping-the-id",
    "title": "Take-Home Exercise 2",
    "section": "** 3.4 Map source and target to node name while keeping the ID**",
    "text": "** 3.4 Map source and target to node name while keeping the ID**\n\nmc1_edges_clean &lt;- mc1_edges_raw %&gt;%\n  left_join(mc1_nodes_clean %&gt;% select(id, from_name = name), by = c(\"source\" = \"id\")) %&gt;%\n  rename(from_id = source) %&gt;%\n  left_join(mc1_nodes_clean %&gt;% select(id, to_name = name), by = c(\"target\" = \"id\")) %&gt;%\n  rename(to_id = target)\n\n\nmc1_edges_clean &lt;- mc1_edges_clean %&gt;%\n  left_join(mc1_nodes_clean %&gt;% select(id, genre, `Node Type`, release_date), \n            by = c(\"from_id\" = \"id\"))\n\nRemoved the below as it is not recommended to drop\nmc1_edges_clean &lt;- mc1_edges_clean %&gt;% #Drops source and target columns select(from, to, Edge Type)\nmc1_edges_clean"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#filter-out-any-unmatched-invalid-edges",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#filter-out-any-unmatched-invalid-edges",
    "title": "Take-Home Exercise 2",
    "section": "** 3.5 Filter out any unmatched (invalid) edges**",
    "text": "** 3.5 Filter out any unmatched (invalid) edges**\n\nmc1_edges_clean &lt;- mc1_edges_clean %&gt;%\n  filter(!is.na(from_id), !is.na(to_id))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#checking-for-any-missing-nodes",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#checking-for-any-missing-nodes",
    "title": "Take-Home Exercise 2",
    "section": "** 3.6 Checking for any missing nodes**",
    "text": "** 3.6 Checking for any missing nodes**\n\nmissing_nodes &lt;- setdiff(\n  unique(c(mc1_edges_clean$from_name, mc1_edges_clean$to_name)),\n  mc1_nodes_clean$name\n)\n\nmissing_nodes\n\ncharacter(0)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#check-edges-schema",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#check-edges-schema",
    "title": "Take-Home Exercise 2",
    "section": "** 3.7 Check Edges Schema**",
    "text": "** 3.7 Check Edges Schema**\nDefine valid source and destination types for each edge type as per the data description file:\n\n# Define valid source and destination types for each edge type\nedge_rules &lt;- list(\n  PerformerOf = list(source = c(\"Person\", \"MusicalGroup\"), target = c(\"Song\", \"Album\")),\n  \n  ComposerOf = list(source = c(\"Person\"), target = c(\"Song\", \"Album\")),\n  \n  ProducerOf = list(source = c(\"Person\", \"RecordLabel\"), target = c(\"Song\", \"Album\", \"Person\", \"MusicalGroup\")),\n  \n  LyricistOf = list(source = c(\"Person\"), target = c(\"Song\", \"Album\")),\n  \n  RecordedBy = list(source = c(\"Song\", \"Album\"), target = c(\"RecordLabel\")),\n  \n  DistributedBy = list(source = c(\"Song\", \"Album\"), target = c(\"RecordLabel\")),\n  \n  InStyleOf = list(source = c(\"Song\", \"Album\"), target = c(\"Song\", \"Album\", \"Person\", \"MusicalGroup\")),\n  \n  InterpolatesFrom = list(source = c(\"Song\", \"Album\"), target = c(\"Song\", \"Album\")),\n  \n  CoverOf = list(source = c(\"Song\", \"Album\"), target = c(\"Song\", \"Album\")),\n  \n  LyricalReferenceTo = list(source = c(\"Song\", \"Album\"), target = c(\"Song\", \"Album\")),\n \n   DirectlySamples = list(source = c(\"Song\", \"Album\"), target = c(\"Song\", \"Album\")),\n  \n  MemberOf = list(source = c(\"Person\"), target = c(\"MusicalGroup\"))\n)\n\nCheck if there were erroneous edge and node relationships:\n\n# Create a lookup for node types\nnode_type_lookup &lt;- mc1_nodes_clean %&gt;%\n  select(name, `Node Type`) %&gt;%\n  deframe()\n\n# Add source and target node types to the edge table\nmc1_edges_checked &lt;- mc1_edges_clean %&gt;%\n  mutate(\n  source_type = node_type_lookup[from_name],\n  target_type = node_type_lookup[to_name]\n)\n\nmc1_edges_tagged &lt;- mc1_edges_checked %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    valid = {\n      rule &lt;- edge_rules[[`Edge Type`]]\n      if (is.null(rule)) TRUE\n      else {\n        source_type %in% rule$source && target_type %in% rule$target\n      }\n    }\n  ) %&gt;%\n  ungroup()\n\n# Count and display invalid edge combinations\ninvalid_edge_summary &lt;- mc1_edges_tagged %&gt;%\n  filter(!valid) %&gt;%\n  count(`Edge Type`, source_type, target_type, sort = TRUE)\n\nprint(invalid_edge_summary)\n\n# A tibble: 33 × 4\n   `Edge Type`      source_type  target_type      n\n   &lt;chr&gt;            &lt;chr&gt;        &lt;chr&gt;        &lt;int&gt;\n 1 LyricistOf       MusicalGroup Song           106\n 2 RecordedBy       RecordLabel  Album          102\n 3 ProducerOf       MusicalGroup Song           100\n 4 ComposerOf       MusicalGroup Song            97\n 5 ProducerOf       MusicalGroup Album           31\n 6 LyricistOf       MusicalGroup Album           28\n 7 ComposerOf       MusicalGroup Album           17\n 8 InStyleOf        MusicalGroup MusicalGroup    12\n 9 InStyleOf        Person       MusicalGroup    11\n10 InterpolatesFrom MusicalGroup MusicalGroup    10\n# ℹ 23 more rows\n\n# Check total invalid edge count\ncat(\"Total invalid edges:\", sum(!mc1_edges_tagged$valid), \"\\n\")\n\nTotal invalid edges: 570 \n\n\nThere were 570 invalid edges.\n\n# Keep only valid edges\nmc1_edges_clean &lt;- mc1_edges_tagged %&gt;%\n  filter(valid)\n\nThe invalid edges were removed from the dataset as they were not consistent with the data description file."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#visualising-edge-types",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#visualising-edge-types",
    "title": "Take-Home Exercise 2",
    "section": "3.8 Visualising Edge Types",
    "text": "3.8 Visualising Edge Types\n\nggplot(data = mc1_edges_clean,\n       aes(y = `Edge Type`)) +\n  geom_bar()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#visualising-node-types",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#visualising-node-types",
    "title": "Take-Home Exercise 2",
    "section": "3.9 Visualising Node Types",
    "text": "3.9 Visualising Node Types\n\nggplot(data = mc1_nodes_clean,\n       aes(y = `Node Type`)) +\n  geom_bar()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#creating-the-global-knowledge-graph",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#creating-the-global-knowledge-graph",
    "title": "Take-Home Exercise 2",
    "section": "3.10 Creating the global knowledge graph",
    "text": "3.10 Creating the global knowledge graph\ntbl_graph() is used to create tidygraph’s graph object by using the code chunk below\n\nmc1_nodes_clean &lt;- mc1_nodes_clean %&gt;%\n  mutate(id = as.character(id))\n\nmc1_edges_clean &lt;- mc1_edges_clean %&gt;%\n  mutate(from_id = as.character(from_id),\n         to_id = as.character(to_id))\n\n\nmusic &lt;- tbl_graph(\n  nodes = mc1_nodes_clean %&gt;%\n    rename(label = name,  # preserve the original artist/song name\n           name = id),    # rename ID column to 'name' so tidygraph can use it\n  edges = mc1_edges_clean %&gt;%\n    rename(from = from_id, to = to_id),\n  directed = TRUE\n)\n\nmusic %&gt;% \n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  select(name, label, `Node Type`) %&gt;%\n  head()\n\n# A tibble: 6 × 3\n  name  label                 `Node Type`\n  &lt;chr&gt; &lt;chr&gt;                 &lt;chr&gt;      \n1 0     Breaking These Chains Song       \n2 1     Carlos Duffy          Person     \n3 2     Min Qin               Person     \n4 3     Xiuying Xie           Person     \n5 4     Nautical Mile Records RecordLabel\n6 5     Unshackled Heart      Song       \n\n\n\nset.seed(1234)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#find-sailors-id-and-works",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#find-sailors-id-and-works",
    "title": "Take-Home Exercise 2",
    "section": "4.1 Find Sailor’s ID and Works",
    "text": "4.1 Find Sailor’s ID and Works\n\nsailor_id &lt;- mc1_nodes_clean %&gt;%\n  filter(is_sailor) %&gt;%\n  pull(id)\n\nsailor_works &lt;- mc1_edges_clean %&gt;%\n  filter(\n    from_id %in% sailor_id,\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n  ) %&gt;%\n  pull(to_id) %&gt;%\n  unique()\n\n# Count by role (edge type)\nmc1_edges_clean %&gt;%\n  filter(\n    from_id %in% sailor_id,\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n  ) %&gt;%\n  count(`Edge Type`, sort = TRUE)\n\n# A tibble: 2 × 2\n  `Edge Type`     n\n  &lt;chr&gt;       &lt;int&gt;\n1 PerformerOf    26\n2 LyricistOf     21\n\n# Count of unique works Sailor contributed to\nmc1_edges_clean %&gt;%\n  filter(\n    from_id %in% sailor_id,\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n  ) %&gt;%\n  summarise(unique_works = n_distinct(to_id))\n\n# A tibble: 1 × 1\n  unique_works\n         &lt;int&gt;\n1           38\n\n\nSailor was a contributor to 38 unique works. She was listed as a performer and/or lyricist 47 times."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#find-works-that-influenced-sailors-works",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#find-works-that-influenced-sailors-works",
    "title": "Take-Home Exercise 2",
    "section": "4.2 Find Works that influenced Sailor’s works",
    "text": "4.2 Find Works that influenced Sailor’s works\nWorks that influenced Sailor’s works is based on what was cited by in her works (InStyleOf”, “InterpolatesFrom”, “CoverOf”, “DirectlySamples”, “LyricalReferenceTo”)***\n\nsailor_referenced_works &lt;- mc1_edges_clean %&gt;%\n  filter(\n    from_id %in% sailor_works, \n    `Edge Type` %in% c(\"InStyleOf\", \"InterpolatesFrom\", \"CoverOf\", \n                       \"LyricalReferenceTo\", \"DirectlySamples\")\n  ) %&gt;%\n  pull(to_id) %&gt;%\n  unique()\n\n# Identify those referenced nodes (songs/albums Sailor referenced)\ninfluences &lt;- mc1_nodes_clean %&gt;%\n  filter(id %in% sailor_referenced_works)\n\ninfluences %&gt;%\n  count(`Node Type`, sort = TRUE)\n\n# A tibble: 2 × 2\n  `Node Type`     n\n  &lt;chr&gt;       &lt;int&gt;\n1 Song           23\n2 Album           3\n\n\nThere were 26 songs/ album cited by Sailor’s works."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#find-creators-of-works-that-influenced-sailors-works",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#find-creators-of-works-that-influenced-sailors-works",
    "title": "Take-Home Exercise 2",
    "section": "4.3 Find Creators of Works that influenced Sailor’s works",
    "text": "4.3 Find Creators of Works that influenced Sailor’s works\n\n# Extract their IDs to find who made those works\ninfluencer_work_ids &lt;- influences$id\n\n# Who created those works?\ninfluencer_people &lt;- mc1_edges_clean %&gt;%\n  filter(\n    to_id %in% influencer_work_ids,\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")\n  ) %&gt;%\n  left_join(\n    mc1_nodes_clean %&gt;% select(id, name, Node_Type = `Node Type`, genre, release_date),\n    by = c(\"from_id\" = \"id\")  # use from_id for join\n  ) %&gt;%\n  filter(Node_Type %in% c(\"Person\", \"MusicalGroup\"))\n\n# Count top contributors who influenced Sailor\ninfluencer_people %&gt;%\n  count(name, sort = TRUE)\n\n# A tibble: 93 × 2\n   name                 n\n   &lt;chr&gt;            &lt;int&gt;\n 1 Joshua Taylor        3\n 2 Shannon Harvey       3\n 3 Urszula Stochmal     3\n 4 Debra Graham         2\n 5 Gang Shao            2\n 6 Igor Dyś             2\n 7 Jeremiah Love        2\n 8 Jing Kang            2\n 9 Lei Fu               2\n10 Lori Massey          2\n# ℹ 83 more rows\n\n\nThere were 91 persons and 2 musical groups influencing Sailor."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#check-sailors-group-membership-and-id",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#check-sailors-group-membership-and-id",
    "title": "Take-Home Exercise 2",
    "section": "4.3 Check Sailor’s group membership and ID",
    "text": "4.3 Check Sailor’s group membership and ID\n\n# Get Sailor's ID\nsailor_id &lt;- mc1_nodes_clean %&gt;%\n  filter(str_to_lower(name) == \"sailor shift\") %&gt;%\n  pull(id)\n\n# Filter edges where Sailor is a member of a group\nsailor_groups &lt;- mc1_edges_clean %&gt;%\n  filter(\n    `Edge Type` == \"MemberOf\",\n    from_id == sailor_id\n  ) %&gt;%\n  left_join(\n    mc1_nodes_clean %&gt;% select(id, group_name = name, node_type = `Node Type`),\n    by = c(\"to_id\" = \"id\")\n  )\n\nsailor_groups %&gt;% select(group_name, node_type)\n\n# A tibble: 1 × 2\n  group_name node_type   \n  &lt;chr&gt;      &lt;chr&gt;       \n1 Ivy Echos  MusicalGroup\n\nsailor_groups %&gt;% select(group_name, `Node Type`)\n\n# A tibble: 1 × 2\n  group_name `Node Type`\n  &lt;chr&gt;      &lt;chr&gt;      \n1 Ivy Echos  Person     \n\n\nSailor is a member of Ivy Echos.\nObtaining the musical group ID:\n\nsailor_group_ids &lt;- mc1_edges_clean %&gt;%\n  filter(`Edge Type` == \"MemberOf\", from_id == sailor_id) %&gt;%\n  pull(to_id)\n\n\nmc1_edges_clean %&gt;%\n  filter(`Edge Type` == \"MemberOf\", from_id == sailor_id) %&gt;%\n  left_join(mc1_nodes_clean, by = c(\"to_id\" = \"id\")) %&gt;%\n  select(to_id, group_name = name, node_type = `Node Type.y`)\n\n# A tibble: 1 × 3\n  to_id group_name node_type   \n  &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       \n1 17260 Ivy Echos  MusicalGroup"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#define-ids-to-include-in-the-subgraph",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#define-ids-to-include-in-the-subgraph",
    "title": "Take-Home Exercise 2",
    "section": "5.1 Define IDs to include in the subgraph",
    "text": "5.1 Define IDs to include in the subgraph\n\ninfluencer_people_ids &lt;- influencer_people %&gt;% pull(from_id)\nreferenced_work_ids &lt;- sailor_referenced_works  \n\nall_ids &lt;- unique(c(\n  sailor_id,\n  sailor_works,\n  referenced_work_ids,\n  influencer_people_ids,\n  sailor_group_ids\n))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#filter-details-to-form-the-subgraph",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#filter-details-to-form-the-subgraph",
    "title": "Take-Home Exercise 2",
    "section": "5.2 Filter details to form the subgraph",
    "text": "5.2 Filter details to form the subgraph\nHowever, we do not want to include collaborators except for the musical group that she belongs to. This is executed by the codes below:\n\n# Filter nodes for Sailor + her works + influencers + cited works\nmini_nodes &lt;- mc1_nodes_clean %&gt;%\n  filter(id %in% all_ids) %&gt;%\n  rename(label = name)\n\n# Identify collaborators (people who worked on Sailor's works)\ncollaborator_ids &lt;- mc1_edges_clean %&gt;%\n  filter(\n    to_id %in% sailor_works,\n    from_id != sailor_id,\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")\n  ) %&gt;%\n  pull(from_id) %&gt;%\n  unique()\n\n\n# Find Ivy Echos ID\nivy_id &lt;- mc1_nodes_clean %&gt;%\n  filter(str_trim(name) == \"Ivy Echos\") %&gt;%\n  pull(id)\n\n# Filter out collaborators unless they also influenced Sailor, but keep Ivy Echos\nmini_nodes &lt;- mini_nodes %&gt;%\n  filter(!(id %in% collaborator_ids & !(id %in% influencer_people_ids | id == ivy_id)))\n\n# Rebuild edges based on cleaned mini_nodes\nvalid_ids &lt;- mini_nodes$id\n\n# Drop edges where the source is a removed collaborator and the target is a Sailor work\nmini_edges &lt;- mc1_edges_clean %&gt;%\n  filter(from_id %in% valid_ids & to_id %in% valid_ids) %&gt;%\n  filter(!(to_id %in% sailor_works & from_id %in% collaborator_ids & !(from_id %in% influencer_people_ids | from_id == ivy_id)))\n\n# Remap node IDs to row indices for plotting\nid_map &lt;- tibble(id = valid_ids, index = seq_len(length(valid_ids)))\n\nmini_edges &lt;- mini_edges %&gt;%\n  select(from_id, to_id, `Edge Type`, key) %&gt;%\n  left_join(id_map %&gt;% rename(from = index), by = c(\"from_id\" = \"id\")) %&gt;%\n  left_join(id_map %&gt;% rename(to = index), by = c(\"to_id\" = \"id\"))\n\n# Drop invalid edges\nmini_edges_clean &lt;- mini_edges %&gt;%\n  filter(!is.na(from) & !is.na(to))\n\n\n# Tag Sailor and Ivy Echos\nmini_nodes &lt;- mini_nodes %&gt;%\n  mutate(\n    is_sailor_node = label == \"Sailor Shift\",\n    is_ivy_echos = str_trim(label) == \"Ivy Echos\",\n    is_sailor_work = id %in% sailor_works,\n    \n# Define node category\n    node_category = case_when(\n      is_sailor_node ~ \"Sailor Shift\",\n      is_ivy_echos ~ \"Ivy Echos\",\n      is_sailor_work ~ \"Sailor's Work\",\n      TRUE ~ \"Influencer\"\n    ),\n    \n# Final node color grouping\n    node_color_group = node_category\n  )\n\n# Filter edges for plotting\nmini_edges_scored &lt;- mini_edges_clean %&gt;%\n  filter(`Edge Type` %in% c(\n    \"InStyleOf\", \"InterpolatesFrom\", \"CoverOf\", \n    \"LyricalReferenceTo\", \"DirectlySamples\",\n    \"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\",\n    \"MemberOf\"\n  ))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#remove-sailors-work-if-not-linked-to-other-works",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#remove-sailors-work-if-not-linked-to-other-works",
    "title": "Take-Home Exercise 2",
    "section": "5.2 Remove Sailor’s work if not linked to other works",
    "text": "5.2 Remove Sailor’s work if not linked to other works\n\n# Add row index to mini_nodes for alignment\nmini_nodes &lt;- mini_nodes %&gt;%\n  mutate(row_index = row_number())\n\n# Create the graph\ngraph_tbl &lt;- tbl_graph(nodes = mini_nodes, edges = mini_edges_scored, directed = TRUE)\n\n# Identify Sailor's works (by ID)\nsailor_work_ids &lt;- mini_nodes %&gt;%\n  filter(id %in% sailor_works) %&gt;%\n  pull(id)\n\n# Get corresponding row indices of Sailor's works\nsailor_work_rows &lt;- mini_nodes %&gt;%\n  filter(id %in% sailor_work_ids) %&gt;%\n  pull(row_index)\n\n# Get Sailor's works which cite other works \ninfluence_edge_types &lt;- c(\"InStyleOf\", \"CoverOf\", \"InterpolatesFrom\", \"DirectlySamples\", \"LyricalReferenceTo\")\n\nreferencing_sailor_works &lt;- mini_edges_scored %&gt;%\n  filter(\n    `Edge Type` %in% influence_edge_types,\n    from %in% sailor_work_rows  \n  ) %&gt;%\n  pull(from) %&gt;%\n  unique()\n\n# Compute node degrees\nnode_degrees &lt;- graph_tbl %&gt;%\n  activate(nodes) %&gt;%\n  mutate(degree = centrality_degree(mode = \"all\"),\n         node_index = row_number()) %&gt;%\n  as_tibble()\n\n# Identify works only connected to Sailor (no other collaborators)\nonly_sailor_edges &lt;- mini_edges_scored %&gt;%\n  filter(\n    to %in% sailor_work_rows,\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")\n  ) %&gt;%\n  group_by(to) %&gt;%\n  summarise(all_from_sailor = all(from_id == sailor_id), .groups = \"drop\") %&gt;%\n  filter(all_from_sailor) %&gt;%\n  pull(to)  \n\n# Final filtering\nsailor_works_to_drop &lt;- node_degrees %&gt;%\n  filter(\n    node_index %in% only_sailor_edges,\n    !(node_index %in% referencing_sailor_works)\n  ) %&gt;%\n  pull(node_index)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#remove-ivy-echos-work-if-not-linked-to-other-works",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#remove-ivy-echos-work-if-not-linked-to-other-works",
    "title": "Take-Home Exercise 2",
    "section": "5.2 Remove Ivy Echo’s work if not linked to other works",
    "text": "5.2 Remove Ivy Echo’s work if not linked to other works\n\nivy_work_ids &lt;- mini_edges_scored %&gt;%\n  filter(from_id == ivy_id, `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")) %&gt;%\n  pull(to_id) %&gt;%\n  unique()\n\nivy_work_rows &lt;- mini_nodes %&gt;%\n  filter(id %in% ivy_work_ids) %&gt;%\n  pull(row_index)\n\nivy_influential_edges &lt;- mini_edges_scored %&gt;%\n  filter(\n    (`Edge Type` %in% influence_edge_types) &\n    (from %in% ivy_work_rows | to %in% ivy_work_rows)\n  )\n\nivy_works_to_drop &lt;- setdiff(ivy_work_rows, c(ivy_influential_edges$from, ivy_influential_edges$to))\n\n# Add to removal list\nnodes_to_drop &lt;- unique(c(sailor_works_to_drop, ivy_works_to_drop))\n\n# Drop from graph\ngraph_tbl &lt;- graph_tbl %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_index = row_number()) %&gt;%\n  filter(!row_index %in% nodes_to_drop)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#visualising-sailors-influencers-non-interactive",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#visualising-sailors-influencers-non-interactive",
    "title": "Take-Home Exercise 2",
    "section": "6.1 Visualising Sailor’s Influencers (non-interactive)",
    "text": "6.1 Visualising Sailor’s Influencers (non-interactive)\n\nset.seed(12)\n\n# Assign unique edge ID\nmini_edges_scored &lt;- mini_edges_scored %&gt;%\n  mutate(edge_id = row_number())\n\n# Plot with ggraph\nggraph(graph_tbl, layout = \"fr\") +\n  \n  # Edge rendering\n  geom_edge_link0(\n    aes(color = `Edge Type`),\n    alpha = 0.8,\n    arrow = arrow(length = unit(1.5, 'mm'), type = \"closed\"),\n    end_cap = circle(1.5, 'mm'),\n    lineend = \"round\"\n  ) +\n\n  # Node visuals\n  geom_node_point(aes(\n    color = node_category,\n    shape = `Node Type`\n  ), size = 2) +\n\n  # Influencer names\n  geom_node_text(\n    aes(label = ifelse(id %in% influencer_people_ids, label, NA)),\n    size = 3,\n    repel = TRUE,\n    color = \"black\"\n  ) +\n\n  # Sailor\n  geom_node_text(\n    aes(label = ifelse(is_sailor_node, label, NA)),\n    size = 5,\n    fontface = \"bold\",\n    color = \"black\",\n    repel = TRUE\n  ) +\n\n  # Sailor's Works\n  geom_node_text(\n    aes(label = ifelse(node_category == \"Sailor's Work\", label, NA)),\n    size = 2,\n    fontface = \"italic\",\n    color = \"blue\",\n    repel = TRUE\n  ) +\n  \n  # Ivy Echos\n  geom_node_text(\n  aes(label = ifelse(str_trim(label) == \"Ivy Echos\", label, NA)),\n  size = 3,\n  fontface = \"bold.italic\",\n  color = \"darkgreen\",\n  repel = TRUE\n  ) +\n  \n  # Color and shape scales\n  scale_color_manual(\n    values = c(\n      \"Influencer\" = \"grey50\",\n      \"Sailor Shift\" = \"red\",\n      \"Sailor's Work\" = \"blue\",\n      \"Ivy Echos\" = \"darkgreen\"\n    ),\n    name = \"Node Category\"\n  ) +\n  \n  scale_shape_manual(\n    values = c(\"Person\" = 15, \"MusicalGroup\" = 17, \"Album\" = 16, \"Song\" = 3),\n    name = \"Node Type\"\n  ) +\n\n  theme_void() +\n  theme(\n    plot.margin = margin(30, 30, 30, 30), \n    legend.title = element_text(size = 8),\n    legend.text = element_text(size = 8)\n  )\n\n\n\n\n\n\n\n\nAs there are many influencers and overlaps, it is suggested to do an interactive map instead."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#visualising-sailors-influencers-interactive",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#visualising-sailors-influencers-interactive",
    "title": "Take-Home Exercise 2",
    "section": "6.2 Visualising Sailor’s Influencers (Interactive)",
    "text": "6.2 Visualising Sailor’s Influencers (Interactive)\n\n# Identify Sailor node index\nsailor_index &lt;- graph_tbl %&gt;%\n  activate(nodes) %&gt;%\n  mutate(node_index = row_number()) %&gt;%\n  filter(is_sailor_node) %&gt;%\n  pull(node_index)\n\n# Pull all edges and check which nodes are only connected to Sailor\nedges_tbl &lt;- graph_tbl %&gt;%\n  activate(edges) %&gt;%\n  as_tibble()\n\n# Count how many unique nodes each target is connected to. We are only keen on degree = 1 and only connected to Sailor.\nsolo_sailor_targets &lt;- edges_tbl %&gt;%\n  filter(from == sailor_index) %&gt;%\n  pull(to)\n\n# Calculate degrees\nnode_degrees &lt;- graph_tbl %&gt;%\n  activate(nodes) %&gt;%\n  mutate(node_index = row_number(),\n         deg = centrality_degree(mode = \"all\")) %&gt;%\n  as_tibble()\n\n# Find target nodes with degree = 1 and only connected to Sailor\nsailor_solo_works &lt;- node_degrees %&gt;%\n  filter(node_index %in% solo_sailor_targets, deg == 1) %&gt;%\n  pull(node_index)\n\n# Drop them from the graph\ngraph_tbl &lt;- graph_tbl %&gt;%\n  activate(nodes) %&gt;%\n  mutate(node_index = row_number()) %&gt;%  # safe if not changed above\n  filter(!row_number() %in% sailor_solo_works)\n\n\nset.seed(12)\n\n# Clean characters and create tooltip \ngraph_tbl &lt;- graph_tbl %&gt;%\n  mutate(across(where(is.character), ~ gsub(\"'\", \"\", .x))) %&gt;%\n  mutate(\n    tooltip = paste0(\n      label, \n      \" (\", `Node Type`, \")\", \n      ifelse(!is.na(release_date), paste0(\"\\nRelease Year: \", release_date), \"\")\n    )\n  )\n\n# Create layout \nlayout_tbl &lt;- create_layout(graph_tbl, layout = \"fr\")\n\n# Plot Interactive Graph\ng &lt;- ggraph(layout_tbl) +\n  geom_edge_fan(\n    aes(color = `Edge Type`),\n    alpha = 0.8,\n    arrow = arrow(length = unit(1.2, 'mm'), type = \"closed\"),\n    start_cap = circle(1, 'mm'),\n    end_cap = circle(1, 'mm'),\n    lineend = \"round\",\n    show.legend = TRUE\n  ) +\n  geom_point_interactive(\n    aes(\n      x = x,\n      y = y,\n      color = node_category,\n      shape = `Node Type`,\n      tooltip = tooltip,\n      data_id = label\n    ),\n    size = 2\n  ) +\n  geom_node_text(\n    aes(label = ifelse(id %in% influencer_people_ids, label, NA)),\n    size = 2,\n    repel = TRUE,\n    color = \"black\"\n  ) +\n  geom_node_text(\n    aes(label = ifelse(is_sailor_node, label, NA)),\n    size = 5,\n    fontface = \"bold\",\n    color = \"black\",\n    repel = TRUE\n  ) +\n  geom_node_text(\n    aes(label = ifelse(node_category == \"Sailor's Work\", label, NA)),\n    size = 2,\n    fontface = \"italic\",\n    color = \"blue\",\n    repel = TRUE\n  ) +\n  geom_node_text(\n    aes(label = ifelse(label == \"Ivy Echos\", label, NA)),\n    size = 3,\n    fontface = \"bold.italic\",\n    color = \"darkgreen\",\n    repel = TRUE\n  ) +\n  scale_color_manual(\n    values = c(\n      \"Influencer\" = \"grey50\",\n      \"Sailor Shift\" = \"red\",\n      \"Sailor's Work\" = \"blue\",\n      \"Ivy Echos\" = \"darkgreen\"\n    ),\n    name = \"Node Category\"\n  ) +\n  scale_shape_manual(\n    values = c(\"Person\" = 15, \"MusicalGroup\" = 17, \"Album\" = 16, \"Song\" = 3),\n    name = \"Node Type\"\n  ) +\n  theme_void() +\n  theme(\n    plot.margin = margin(30, 30, 30, 30),\n    legend.title = element_text(size = 8),\n    legend.text = element_text(size = 8)\n  )\n\ngirafe(ggobj = g, width_svg = 10, height_svg = 6)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#find-sailors-collaborators",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#find-sailors-collaborators",
    "title": "Take-Home Exercise 2",
    "section": "7.1 Find Sailor’s collaborators",
    "text": "7.1 Find Sailor’s collaborators\nFind Sailor’s collaborators where she is a “PerformerOf”, “ComposerOf”, “ProducerOf”, “LyricistOf” and “Memberof”.\n\nsailor_collaborators &lt;- mc1_edges_clean %&gt;%\n  filter(\n    to_id %in% sailor_works,\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\", \"MemberOf\"),\n    from_id != sailor_id\n  ) %&gt;%\n  left_join(\n    mc1_nodes_clean %&gt;% \n      select(id, name, node_type = `Node Type`),  # rename before joining\n    by = c(\"from_id\" = \"id\")\n  ) %&gt;%\n  distinct(from_id, name, node_type)\n\n\nsailor_collaborators %&gt;%\n  count(node_type, sort = TRUE)\n\n# A tibble: 2 × 2\n  node_type        n\n  &lt;chr&gt;        &lt;int&gt;\n1 Person          40\n2 MusicalGroup     8\n\n  sailor_collaborators_roles &lt;- mc1_edges_clean %&gt;%\n  filter(\n    to_id %in% sailor_works,\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\"),\n    from_id != sailor_id\n  ) %&gt;%\n  left_join(\n    mc1_nodes_clean %&gt;% select(id, name, node_type = `Node Type`),\n    by = c(\"from_id\" = \"id\")\n  ) %&gt;%\n  distinct(from_id, name, node_type, `Edge Type`) %&gt;%\n  arrange(name, `Edge Type`)\n  \n  sailor_collaborators_roles\n\n# A tibble: 51 × 4\n   from_id name                node_type    `Edge Type`\n   &lt;chr&gt;   &lt;chr&gt;               &lt;chr&gt;        &lt;chr&gt;      \n 1 17227   Aiden Harper        Person       LyricistOf \n 2 17041   Arlo Sterling       Person       LyricistOf \n 3 17190   Astrid Nørgaard     Person       ComposerOf \n 4 17349   Beatrice Albright   Person       LyricistOf \n 5 17349   Beatrice Albright   Person       PerformerOf\n 6 17045   Cassian Rae         Person       ComposerOf \n 7 17296   Coralia Bellweather Person       ComposerOf \n 8 16996   Crimson Carriage    MusicalGroup PerformerOf\n 9 17355   Daniel OConnell     Person       ComposerOf \n10 17355   Daniel OConnell     Person       PerformerOf\n# ℹ 41 more rows\n\n\nThere are 48 persons and musical groups whom collaborated with her.\n\nsailor_collaborator_role_frequency &lt;- mc1_edges_clean %&gt;%\n  filter(\n    to_id %in% sailor_works,\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\"),\n    from_id != sailor_id\n  ) %&gt;%\n  left_join(\n    mc1_nodes_clean %&gt;% select(id, name),\n    by = c(\"from_id\" = \"id\")\n  ) %&gt;%\n  count(name, `Edge Type`, sort = TRUE)  \n\nsailor_collaborator_role_frequency\n\n# A tibble: 51 × 3\n   name                     `Edge Type`     n\n   &lt;chr&gt;                    &lt;chr&gt;       &lt;int&gt;\n 1 \"Maya Jensen\"            ComposerOf      4\n 2 \"Arlo Sterling\"          LyricistOf      3\n 3 \"Cassian Rae\"            ComposerOf      3\n 4 \"Elara May\"              ComposerOf      3\n 5 \"Ivy Echos\"              PerformerOf     3\n 6 \"Jade Thompson\"          ComposerOf      3\n 7 \"Lila \\\"Lilly\\\" Hartman\" ComposerOf      3\n 8 \"Lyra Blaze\"             ComposerOf      3\n 9 \"Orion Cruz\"             ComposerOf      3\n10 \"Sophie Ramirez\"         LyricistOf      3\n# ℹ 41 more rows\n\n\n\ntotal_collaborations &lt;- mc1_edges_clean %&gt;%\n  filter(\n    to_id %in% sailor_works,\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\"),\n    from_id != sailor_id  # exclude Sailor herself\n  ) %&gt;%\n  nrow()\n\ntotal_collaborations\n\n[1] 77\n\n\nThere were 77 collaborations."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#find-works-and-musicians-which-were-directly-influenced-by-sailor-and-ivy-echos",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#find-works-and-musicians-which-were-directly-influenced-by-sailor-and-ivy-echos",
    "title": "Take-Home Exercise 2",
    "section": "7.2 Find works and musicians which were directly influenced by Sailor and Ivy Echos",
    "text": "7.2 Find works and musicians which were directly influenced by Sailor and Ivy Echos\n\nreferencing_works &lt;- mc1_edges_clean %&gt;%\n  filter(\n    to_id %in% sailor_works,\n    `Edge Type` %in% c(\"InStyleOf\", \"InterpolatesFrom\", \"CoverOf\", \n                       \"LyricalReferenceTo\", \"DirectlySamples\")\n  ) %&gt;%\n  pull(from_id) %&gt;%\n  unique()\n\n\n# Find people or groups who created those referencing works\n\ndirect_influencees &lt;- mc1_edges_clean %&gt;%\n  filter(\n    to_id %in% referencing_works,\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n  ) %&gt;%\n  left_join(\n    mc1_nodes_clean %&gt;% select(id, name, node_type = `Node Type`),\n    by = c(\"from_id\" = \"id\")\n  ) %&gt;%\n  filter(node_type %in% c(\"Person\", \"MusicalGroup\")) %&gt;%\n  distinct(from_id, name, node_type)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#sailors-influence",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#sailors-influence",
    "title": "Take-Home Exercise 2",
    "section": "7.3 Sailor’s influence",
    "text": "7.3 Sailor’s influence\n\n# Count how often Sailor’s works were cited, by who\n\ndirect_influence_counts &lt;- mc1_edges_clean %&gt;%\n  filter(\n    to_id %in% sailor_works,\n    `Edge Type` %in% c(\"InStyleOf\", \"InterpolatesFrom\", \"CoverOf\", \n                       \"LyricalReferenceTo\", \"DirectlySamples\")\n  ) %&gt;%\n  left_join(mc1_nodes_clean %&gt;% select(id, name), by = c(\"from_id\" = \"id\")) %&gt;%\n  count(name, sort = TRUE)\n\ndirect_influence_counts\n\n# A tibble: 0 × 2\n# ℹ 2 variables: name &lt;chr&gt;, n &lt;int&gt;\n\n\nThere was no Sailor’s work cited by others."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#sailors-influence-through-ivy-echos",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#sailors-influence-through-ivy-echos",
    "title": "Take-Home Exercise 2",
    "section": "7.4 Sailor’s influence through Ivy Echos",
    "text": "7.4 Sailor’s influence through Ivy Echos\nLet’s check if there was any Ivy Echo’s work cited by others.\n\n# Get Ivy Echos' ID and works\nivy_id &lt;- mc1_nodes_clean %&gt;%\n  filter(str_trim(name) == \"Ivy Echos\") %&gt;%\n  pull(id)\n\nivy_works &lt;- mc1_edges_clean %&gt;%\n  filter(from_id == ivy_id, \n         `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")) %&gt;%\n  pull(to_id) %&gt;%\n  unique()\n\nreferencing_works_sailor &lt;- mc1_edges_clean %&gt;%\n  filter(\n    to_id %in% sailor_works,\n    `Edge Type` %in% c(\"InStyleOf\", \"InterpolatesFrom\", \"CoverOf\", \n                       \"LyricalReferenceTo\", \"DirectlySamples\")\n  ) %&gt;%\n  pull(from_id)\n\nreferencing_works_ivy &lt;- mc1_edges_clean %&gt;%\n  filter(\n    to_id %in% ivy_works,\n    `Edge Type` %in% c(\"InStyleOf\", \"InterpolatesFrom\", \"CoverOf\", \n                       \"LyricalReferenceTo\", \"DirectlySamples\")\n  ) %&gt;%\n  pull(from_id)\n\nreferencing_works &lt;- unique(c(referencing_works_sailor, referencing_works_ivy))\n\nmc1_nodes_clean %&gt;%\n  filter(id %in% referencing_works) %&gt;%\n  select(id, name, `Node Type`, release_date)\n\n# A tibble: 1 × 4\n  id    name            `Node Type` release_date\n  &lt;chr&gt; &lt;chr&gt;           &lt;chr&gt;              &lt;int&gt;\n1 17112 Embers & Echoes Album               2031\n\n\nThere was one album “Embers & Echoes” which was influenced by Ivy Echos’ work."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#musicians-whom-were-directly-influenced-by-sailor-ivy-echos",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#musicians-whom-were-directly-influenced-by-sailor-ivy-echos",
    "title": "Take-Home Exercise 2",
    "section": "7.5 Musicians whom were directly influenced by Sailor/ Ivy Echos",
    "text": "7.5 Musicians whom were directly influenced by Sailor/ Ivy Echos\n\nmc1_edges_clean %&gt;%\n  filter(\n    to_id == \"17112\",  # ID of Embers & Echoes\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")\n  ) %&gt;%\n  left_join(\n    mc1_nodes_clean %&gt;% select(id, name, node_type = `Node Type`),\n    by = c(\"from_id\" = \"id\")\n  ) %&gt;%\n  filter(node_type %in% c(\"Person\", \"MusicalGroup\")) %&gt;%\n  select(from_id, name, node_type) %&gt;%\n  distinct()\n\n# A tibble: 5 × 3\n  from_id name                node_type   \n  &lt;chr&gt;   &lt;chr&gt;               &lt;chr&gt;       \n1 17110   The Hollow Monarchs MusicalGroup\n2 17402   N.V. Blake          Person      \n3 17406   Ivy Steele          Person      \n4 17407   Nate Wild           Person      \n5 17408   Scarlett Moon       Person      \n\n\nCheck membership of The Hollow Monarchs musical group.\n\n# Get the ID of The Hollow Monarchs\nhollow_monarchs_id &lt;- mc1_nodes_clean %&gt;%\n  filter(str_trim(name) == \"The Hollow Monarchs\") %&gt;%\n  pull(id)\n\n# Find people who have a MemberOf edge pointing to the group\nhollow_monarchs_members &lt;- mc1_edges_clean %&gt;%\n  filter(\n    `Edge Type` == \"MemberOf\",\n    to_id == hollow_monarchs_id\n  ) %&gt;%\n  left_join(mc1_nodes_clean %&gt;% select(id, member_name = name, member_type = `Node Type`),\n            by = c(\"from_id\" = \"id\")) %&gt;%\n  filter(member_type == \"Person\") %&gt;%\n  select(from_id, member_name)\n\nhollow_monarchs_members\n\n# A tibble: 3 × 2\n  from_id member_name     \n  &lt;chr&gt;   &lt;chr&gt;           \n1 17107   Chloe Montgomery\n2 17108   Nathaniel Brooks\n3 17109   Clara Davis"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#musicians-whom-were-directly-influenced-by-sailor-ivy-echos-1",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#musicians-whom-were-directly-influenced-by-sailor-ivy-echos-1",
    "title": "Take-Home Exercise 2",
    "section": "7.6 Musicians whom were directly influenced by Sailor/ Ivy Echos",
    "text": "7.6 Musicians whom were directly influenced by Sailor/ Ivy Echos\nFinding works and people which were indirectly influenced by Sailor and Ivy Echos.\nThis means finding the works that were influenced by Embers & Echoes album first.\n\n# Get the ID of \"Embers & Echoes\"\nembers_id &lt;- mc1_nodes_clean %&gt;%\n  filter(str_trim(name) == \"Embers & Echoes\") %&gt;%\n  pull(id) %&gt;%\n  as.character()\n\n# Check if any works cited Embers & Echoes using influence-type edges\nworks_citing_embers &lt;- mc1_edges_clean %&gt;%\n  filter(\n    to_id == embers_id,\n    `Edge Type` %in% c(\"InStyleOf\", \"CoverOf\", \"InterpolatesFrom\",\n                       \"DirectlySamples\", \"LyricalReferenceTo\")\n  ) %&gt;%\n  pull(from_id) %&gt;%\n  unique()\n\n# Show the works that cited it\nmc1_nodes_clean %&gt;%\n  filter(id %in% works_citing_embers) %&gt;%\n  select(id, name, `Node Type`, release_date)\n\n# A tibble: 0 × 4\n# ℹ 4 variables: id &lt;chr&gt;, name &lt;chr&gt;, Node Type &lt;chr&gt;, release_date &lt;int&gt;\n\n\nNo other works cited Ember & Echoes.Hence, no one had been indirectly influenced by Sailor / Ivy Echos."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#plot-preparation",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#plot-preparation",
    "title": "Take-Home Exercise 2",
    "section": "7.7 Plot Preparation",
    "text": "7.7 Plot Preparation\nWe begin by filtering Sailor’s work that were cited by others and had collaboration:\n\n# Identify works of Sailor that were cited\nsailor_works_cited &lt;- mc1_edges_clean %&gt;%\n  filter(\n    `Edge Type` %in% c(\"InStyleOf\", \"CoverOf\", \"InterpolatesFrom\", \"DirectlySamples\", \"LyricalReferenceTo\"),\n    to_id %in% sailor_works\n  ) %&gt;%\n  pull(to_id) %&gt;%\n  unique()\n\n# Identify works Sailor collaborated on (other people involved)\nsailor_works_collab &lt;- mc1_edges_clean %&gt;%\n  filter(\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\"),\n    to_id %in% sailor_works,\n    from_id != sailor_id\n  ) %&gt;%\n  pull(to_id) %&gt;%\n  unique()\n\n# Filter only the Sailor works that are either cited or collaborations\nsailor_works_filtered &lt;- intersect(sailor_works, union(sailor_works_cited, sailor_works_collab))\n\nFilter away Ivy Echos’ work if it is not cited by others\n\n# Ivy Echos works cited by others\nivy_works_cited &lt;- mc1_edges_clean %&gt;%\n  filter(\n    `Edge Type` %in% c(\"InStyleOf\", \"CoverOf\", \"InterpolatesFrom\", \"DirectlySamples\", \"LyricalReferenceTo\"),\n    to_id %in% ivy_works\n  ) %&gt;%\n  pull(to_id) %&gt;%\n  unique()\n\n# Ivy Echos works with collaboration\nivy_works_collab &lt;- mc1_edges_clean %&gt;%\n  filter(\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\"),\n    to_id %in% ivy_works,\n    from_id != ivy_id\n  ) %&gt;%\n  pull(to_id) %&gt;%\n  unique()\n\n# Filter Ivy Echos works that are either cited or collaborative\nivy_works_filtered &lt;- intersect(ivy_works, union(ivy_works_cited, ivy_works_collab))\n\nAdd in Ember & Echoes’s contributors as they were directly influenced by Ivy Echos:\n\nembers_contributors &lt;- mc1_edges_clean %&gt;%\n  filter(\n    to_id == embers_id,\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")\n  ) %&gt;%\n  left_join(\n    mc1_nodes_clean %&gt;%\n      select(id, name, node_type = `Node Type`),\n    by = c(\"from_id\" = \"id\")\n  ) %&gt;%\n  filter(node_type %in% c(\"Person\", \"MusicalGroup\")) %&gt;%\n  distinct(from_id, name, node_type)\n\n\n# Combine node IDs\nall_ids &lt;- unique(c(\n  sailor_id,\n  ivy_id,  \n  sailor_works_filtered,\n  ivy_works_filtered,\n  sailor_collaborators$from_id,\n  referencing_works,\n  direct_influencees$from_id,\n  embers_contributors$from_id  \n))\n\n# Filter node table\nmini_nodes &lt;- mc1_nodes_clean %&gt;%\n  filter(id %in% all_ids) %&gt;%\n  mutate(\n    label = name,\n    is_sailor = id == sailor_id,\n    is_ivy = id == ivy_id,\n    is_work = id %in% sailor_works_filtered,\n    is_ivy_work = id %in% ivy_works_filtered,\n    is_collaborator = id %in% sailor_collaborators$from_id,\n    is_direct_influencee = id %in% direct_influencees$from_id,\n    is_embers_contributor = id %in% embers_contributors$from_id,  \n    category = case_when(\n      is_sailor ~ \"Sailor Shift\",\n      is_ivy ~ \"Ivy Echos\",\n      is_work ~ \"Sailor's Work\",\n      is_ivy_work ~ \"Ivy's Work\",\n      is_collaborator ~ \"Collaborator\",\n      is_direct_influencee ~ \"Direct Influencee\",\n      is_embers_contributor ~ \"Embers Contributor\",  \n      TRUE ~ \"Other\"\n    )\n  )\n\n# Filter edges between valid nodes\nmini_edges &lt;- mc1_edges_clean %&gt;%\n  filter(from_id %in% all_ids, to_id %in% all_ids) %&gt;%\n  select(from = from_id, to = to_id, `Edge Type`) %&gt;%\n  mutate(from = as.character(from), to = as.character(to))\n\n# Build tidygraph object\ngraph_tbl &lt;- tbl_graph(\n  nodes = mini_nodes %&gt;% mutate(name = as.character(id)),  \n  edges = mini_edges %&gt;% mutate(\n    from = as.character(from),\n    to = as.character(to)\n  ),\n  directed = TRUE\n)\n\n# Add tooltip\ngraph_tbl &lt;- graph_tbl %&gt;%\n  mutate(tooltip = paste0(label, \" (\", `Node Type`, \")\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#plot-interactive-graph",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02_final27May.html#plot-interactive-graph",
    "title": "Take-Home Exercise 2",
    "section": "7.8 Plot interactive graph",
    "text": "7.8 Plot interactive graph\nThe visualisation showing who has Sailor collaborated with and directly or indirectly influenced is shown below.\n\n# Add layout and tooltip\nset.seed(1111)\nlayout_tbl &lt;- create_layout(graph_tbl, layout = \"stress\")\n\ngraph_tbl &lt;- graph_tbl %&gt;%\n  mutate(across(where(is.character), ~ gsub(\"'\", \"\", .x))) %&gt;%\n  mutate(\n    tooltip = paste0(\n      label, \n      \" (\", `Node Type`, \")\", \n      ifelse(!is.na(release_date), paste0(\"\\nRelease Year: \", release_date), \"\"),\n      ifelse(!is.na(genre), paste0(\"\\nGenre: \", genre), \"\")\n    )\n  )\n\n# Define graph\ng &lt;- ggraph(layout_tbl) +\n  \n  # Edge rendering\n  geom_edge_fan(\n    aes(color = `Edge Type`),\n    alpha = 0.8,\n    arrow = arrow(length = unit(1.2, 'mm'), type = \"closed\"),\n    start_cap = circle(1, 'mm'),\n    end_cap = circle(1, 'mm'),\n    lineend = \"round\",\n    show.legend = TRUE\n  ) +\n  \n  # Nodes with interactivity\n  geom_point_interactive(\n    aes(\n      x = x,\n      y = y,\n      color = category,\n      shape = `Node Type`,\n      tooltip = tooltip,\n      data_id = label\n    ),\n    size = 2\n  ) +\n\n  # Labels for key nodes\n  geom_node_text(\n    aes(label = ifelse(category == \"Sailor Shift\", label, NA)),\n    size = 5,\n    fontface = \"bold\",\n    color = \"black\",\n    repel = TRUE\n  ) +\n  \n  geom_node_text(\n    aes(label = ifelse(category == \"Sailor's Work\", label, NA)),\n    size = 2,\n    fontface = \"italic\",\n    color = \"blue\",\n    repel = TRUE\n  ) +\n\n  geom_node_text(\n    aes(label = ifelse(category == \"Collaborator\", label, NA)),\n    size = 2,\n    color = \"black\",\n    repel = TRUE\n  ) +\n\n  geom_node_text(\n    aes(label = ifelse(category == \"Direct Influencee\", label, NA)),\n    size = 3,\n    color = \"black\",\n    repel = TRUE\n  ) +\n\n  geom_node_text(\n    aes(label = ifelse(label == \"Ivy Echos\", label, NA)),\n    size = 3,\n    fontface = \"bold.italic\",\n    color = \"darkgreen\",\n    repel = TRUE\n  ) +\n\n  geom_node_text(\n    aes(label = ifelse(category == \"Embers Contributor\", label, NA)),\n    size = 2.5,\n    fontface = \"italic\",\n    color = \"goldenrod4\",\n    repel = TRUE\n  ) +\n\n  # Color and shape scales\nscale_color_manual(\n  values = c(\n    \"Sailor Shift\" = \"red\",\n    \"Ivy Echos\" = \"darkgreen\",\n    \"Sailor's Work\" = \"blue\",\n    \"Ivy's Work\" = \"darkgreen\",\n    \"Collaborator\" = \"grey\",\n    \"Direct Influencee\" = \"orange\",\n    \"Embers Contributor\" = \"gold\",       \n    \"Other\" = \"black\"\n  ),\n  name = \"Node Category\"\n) +\n\n  scale_shape_manual(\n    values = c(\"Person\" = 15, \"MusicalGroup\" = 17, \"Album\" = 16, \"Song\" = 3),\n    name = \"Node Type\"\n  ) +\n\n  theme_void() +\n  theme(\n    plot.margin = margin(30, 30, 30, 30),\n    legend.title = element_text(size = 8),\n    legend.text = element_text(size = 8)\n  )\n\n# Wrap in interactive output\ngirafe(ggobj = g, width_svg = 10, height_svg = 6)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#summary-plot-of-sailors-work-over-years",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#summary-plot-of-sailors-work-over-years",
    "title": "Take-Home Exercise 2",
    "section": "4.2 Summary Plot of Sailor’s work over years",
    "text": "4.2 Summary Plot of Sailor’s work over years\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsailor_works_genre &lt;- mc1_edges_clean %&gt;%\n  filter(from_id == sailor_id,\n         `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")) %&gt;%\n  left_join(mc1_nodes_clean, by = c(\"to_id\" = \"id\")) %&gt;%\n  filter(`Node Type.y` %in% c(\"Song\", \"Album\"),\n         !is.na(release_date.y),\n         !is.na(genre.y)) %&gt;%\n  group_by(release_date.y, genre.y) %&gt;%\n  summarise(n = n(), .groups = \"drop\")\n\nggplot(sailor_works_genre, aes(x = release_date.y, y = n, fill = genre.y)) +\n  geom_col() +\n  scale_fill_brewer(palette = \"Pastel1\") +\n  labs(\n    title = \"Sailor's Works by Genre Across Years\",\n    x = \"Release Year\",\n    y = \"Number of Works\",\n    fill = \"Genre\"\n  ) +\n  scale_x_continuous(breaks = pretty(sailor_works_genre$release_date.y)) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#prepare-visualisation",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#prepare-visualisation",
    "title": "Take-Home Exercise 2",
    "section": "6.1 Prepare Visualisation",
    "text": "6.1 Prepare Visualisation\nWe prepare the visualisation using the codes below.\n\n\nShow code\n# Tag Sailor and Ivy Echos\nmini_nodes &lt;- mini_nodes %&gt;%\n  mutate(\n    is_sailor_node = label == \"Sailor Shift\",\n    is_ivy_echos = str_trim(label) == \"Ivy Echos\",\n    is_sailor_work = id %in% sailor_works,\n    \n# Define node category\n    node_category = case_when(\n      is_sailor_node ~ \"Sailor Shift\",\n      is_ivy_echos ~ \"Ivy Echos\",\n      is_sailor_work ~ \"Sailor's Work\",\n      TRUE ~ \"Influencer\"\n    ),\n    \n# Final node color grouping\n    node_color_group = node_category\n  )\n\n# Filter edges for plotting\nmini_edges_scored &lt;- mini_edges_clean %&gt;%\n  filter(`Edge Type` %in% c(\n    \"InStyleOf\", \"InterpolatesFrom\", \"CoverOf\", \n    \"LyricalReferenceTo\", \"DirectlySamples\",\n    \"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\",\n    \"MemberOf\"\n  ))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#prepare-interactive-plot",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#prepare-interactive-plot",
    "title": "Take-Home Exercise 2",
    "section": "6.5 Prepare Interactive Plot",
    "text": "6.5 Prepare Interactive Plot\n\n\nShow code\n# Identify Sailor node index\nsailor_index &lt;- graph_tbl %&gt;%\n  activate(nodes) %&gt;%\n  mutate(node_index = row_number()) %&gt;%\n  filter(is_sailor_node) %&gt;%\n  pull(node_index)\n\n# Pull all edges and check which nodes are only connected to Sailor\nedges_tbl &lt;- graph_tbl %&gt;%\n  activate(edges) %&gt;%\n  as_tibble()\n\n# Count how many unique nodes each target is connected to. We are only keen on degree = 1 and only connected to Sailor.\nsolo_sailor_targets &lt;- edges_tbl %&gt;%\n  filter(from == sailor_index) %&gt;%\n  pull(to)\n\n# Calculate degrees\nnode_degrees &lt;- graph_tbl %&gt;%\n  activate(nodes) %&gt;%\n  mutate(node_index = row_number(),\n         deg = centrality_degree(mode = \"all\")) %&gt;%\n  as_tibble()\n\n# Find target nodes with degree = 1 and only connected to Sailor\nsailor_solo_works &lt;- node_degrees %&gt;%\n  filter(node_index %in% solo_sailor_targets, deg == 1) %&gt;%\n  pull(node_index)\n\n# Drop them from the graph\ngraph_tbl &lt;- graph_tbl %&gt;%\n  activate(nodes) %&gt;%\n  mutate(node_index = row_number()) %&gt;%  # safe if not changed above\n  filter(!row_number() %in% sailor_solo_works)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#frequency-of-collaborations",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#frequency-of-collaborations",
    "title": "Take-Home Exercise 2",
    "section": "7.2 Frequency of Collaborations",
    "text": "7.2 Frequency of Collaborations\n\n\nShow code\nsailor_collaborator_role_frequency &lt;- mc1_edges_clean %&gt;%\n  filter(\n    to_id %in% sailor_works,\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\"),\n    from_id != sailor_id\n  ) %&gt;%\n  left_join(\n    mc1_nodes_clean %&gt;% select(id, name),\n    by = c(\"from_id\" = \"id\")\n  ) %&gt;%\n  count(name, `Edge Type`, sort = TRUE)  \n\nsailor_collaborator_role_frequency\n\n\n# A tibble: 51 × 3\n   name                     `Edge Type`     n\n   &lt;chr&gt;                    &lt;chr&gt;       &lt;int&gt;\n 1 \"Maya Jensen\"            ComposerOf      4\n 2 \"Arlo Sterling\"          LyricistOf      3\n 3 \"Cassian Rae\"            ComposerOf      3\n 4 \"Elara May\"              ComposerOf      3\n 5 \"Ivy Echos\"              PerformerOf     3\n 6 \"Jade Thompson\"          ComposerOf      3\n 7 \"Lila \\\"Lilly\\\" Hartman\" ComposerOf      3\n 8 \"Lyra Blaze\"             ComposerOf      3\n 9 \"Orion Cruz\"             ComposerOf      3\n10 \"Sophie Ramirez\"         LyricistOf      3\n# ℹ 41 more rows\n\n\nUsing the code chunk below, it is confirmed that there were 77 collaborations.\n\n\nShow code\ntotal_collaborations &lt;- mc1_edges_clean %&gt;%\n  filter(\n    to_id %in% sailor_works,\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\"),\n    from_id != sailor_id  # exclude Sailor herself\n  ) %&gt;%\n  nrow()\n\ntotal_collaborations\n\n\n[1] 77"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#musicians-whom-were-directly-influenced-by-ivy-echos",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#musicians-whom-were-directly-influenced-by-ivy-echos",
    "title": "Take-Home Exercise 2",
    "section": "7.5 Musicians whom were directly influenced by Ivy Echos",
    "text": "7.5 Musicians whom were directly influenced by Ivy Echos\n\n\nShow code\nmc1_edges_clean %&gt;%\n  filter(\n    to_id == \"17112\",  # ID of Embers & Echoes\n    `Edge Type` %in% c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")\n  ) %&gt;%\n  left_join(\n    mc1_nodes_clean %&gt;% select(id, name, node_type = `Node Type`),\n    by = c(\"from_id\" = \"id\")\n  ) %&gt;%\n  filter(node_type %in% c(\"Person\", \"MusicalGroup\")) %&gt;%\n  select(from_id, name, node_type) %&gt;%\n  distinct()\n\n\n# A tibble: 5 × 3\n  from_id name                node_type   \n  &lt;chr&gt;   &lt;chr&gt;               &lt;chr&gt;       \n1 17110   The Hollow Monarchs MusicalGroup\n2 17402   N.V. Blake          Person      \n3 17406   Ivy Steele          Person      \n4 17407   Nate Wild           Person      \n5 17408   Scarlett Moon       Person      \n\n\nMembership of The Hollow Monarchs musical group was checked to include in the plot.\n\n\nShow code\n# Get the ID of The Hollow Monarchs\nhollow_monarchs_id &lt;- mc1_nodes_clean %&gt;%\n  filter(str_trim(name) == \"The Hollow Monarchs\") %&gt;%\n  pull(id)\n\n# Find people who have a MemberOf edge pointing to the group\nhollow_monarchs_members &lt;- mc1_edges_clean %&gt;%\n  filter(\n    `Edge Type` == \"MemberOf\",\n    to_id == hollow_monarchs_id\n  ) %&gt;%\n  left_join(mc1_nodes_clean %&gt;% select(id, member_name = name, member_type = `Node Type`),\n            by = c(\"from_id\" = \"id\")) %&gt;%\n  filter(member_type == \"Person\") %&gt;%\n  select(from_id, member_name)\n\nhollow_monarchs_members\n\n\n# A tibble: 3 × 2\n  from_id member_name     \n  &lt;chr&gt;   &lt;chr&gt;           \n1 17107   Chloe Montgomery\n2 17108   Nathaniel Brooks\n3 17109   Clara Davis"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#musicians-whom-were-indirectly-influenced-by-sailor-ivy-echos",
    "href": "Take-home_Ex/Take-home_Ex02/Take-Home_Ex02.html#musicians-whom-were-indirectly-influenced-by-sailor-ivy-echos",
    "title": "Take-Home Exercise 2",
    "section": "7.6 Musicians whom were indirectly influenced by Sailor/ Ivy Echos",
    "text": "7.6 Musicians whom were indirectly influenced by Sailor/ Ivy Echos\nFirst, we found the works that were influenced by Embers & Echoes album to trace if anyone had cited this work.\n\n\nShow code\n# Get the ID of \"Embers & Echoes\"\nembers_id &lt;- mc1_nodes_clean %&gt;%\n  filter(str_trim(name) == \"Embers & Echoes\") %&gt;%\n  pull(id) %&gt;%\n  as.character()\n\n# Check if any works cited Embers & Echoes using influence-type edges\nworks_citing_embers &lt;- mc1_edges_clean %&gt;%\n  filter(\n    to_id == embers_id,\n    `Edge Type` %in% c(\"InStyleOf\", \"CoverOf\", \"InterpolatesFrom\",\n                       \"DirectlySamples\", \"LyricalReferenceTo\")\n  ) %&gt;%\n  pull(from_id) %&gt;%\n  unique()\n\n# Show the works that cited it\nmc1_nodes_clean %&gt;%\n  filter(id %in% works_citing_embers) %&gt;%\n  select(id, name, `Node Type`, release_date)\n\n\n# A tibble: 0 × 4\n# ℹ 4 variables: id &lt;chr&gt;, name &lt;chr&gt;, Node Type &lt;chr&gt;, release_date &lt;int&gt;\n\n\nWe confirmed that no other works cited Ember & Echoes.Hence, no one had been indirectly influenced by Sailor / Ivy Echos."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html",
    "title": "Hands-on Exercise 8A",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, you will learn how to plot functional and truthful choropleth maps by using an R package called tmap package.\n\n\n\n\n\n\nTip\n\n\n\nIt is advisable for you to read the functional description of each function before using them.\n\n\n\n\n\nIn this hands-on exercise, the key R package use is tmap package in R. Beside tmap package, four other R packages will be used. They are:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\nAmong the four packages, readr, tidyr and dplyr are part of tidyverse package.\nThe code chunk below will be used to install and load these packages in RStudio.\n\npacman::p_load(sf, tmap, tidyverse)\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that, we only need to install tidyverse instead of readr, tidyr and dplyr individually.\n\n\n\n\n\n\n\nTwo data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data fie. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\n\n\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\Belinda\\OneDrive - Singapore Management University\\Desktop\\Visual Analytics\\belindalim\\ISSS608-VAA\\Hands-on_Ex\\Hands-on_Ex08\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nYou can examine the content of mpsz by using the code chunk below.\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that only the first ten records will be displayed. This is because mpsz belongs to a sf object under the sf package which defaults the first 10 records to be printed.\n\n\n\n\n\nNext, we will import respopagsex2011to2020.csv file into RStudio and save the file into an R dataframe called popagsex.\nThe task will be performed by using read_csv() function of readr package as shown in the code chunk below.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\n\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age group 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate(across(c(PA, SZ), toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nCheck the data table after processing\n\nglimpse(popdata2020)\n\nRows: 234\nColumns: 7\n$ PA               &lt;chr&gt; \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO…\n$ SZ               &lt;chr&gt; \"ANG MO KIO TOWN CENTRE\", \"CHENG SAN\", \"CHONG BOON\", …\n$ YOUNG            &lt;dbl&gt; 1440, 6640, 6150, 5540, 2100, 3960, 2220, 4690, 1220,…\n$ `ECONOMY ACTIVE` &lt;dbl&gt; 2610, 15460, 13950, 12090, 3410, 8420, 4200, 11450, 2…\n$ AGED             &lt;dbl&gt; 760, 6050, 6470, 5120, 1310, 3610, 1530, 5100, 750, 4…\n$ TOTAL            &lt;dbl&gt; 4810, 28150, 26570, 22750, 6820, 15990, 7950, 21240, …\n$ DEPENDENCY       &lt;dbl&gt; 0.8429119, 0.8208279, 0.9046595, 0.8817204, 1.0000000…\n\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nThing to learn from the code chunk above:\n\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n\n\n\n\n\n\nTwo approaches can be used to prepare thematic map using tmap, they are:\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\n\nThe easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases.\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)\n\n\n\n\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\", \n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\") +\n  tm_layout(frame = TRUE) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nIn the following sub-section, we will share with you tmap functions that used to plot these elements.\n\n\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nThings to learn from tm_polygons():\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\n\n\nActually, tm_polygons() is a wraper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\nThe code chunk below draws a choropleth map by using tm_fill() alone.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\") +\n  tm_borders(lwd = 0.01,  \n             fill_alpha = 0.1)\n\n\n\n\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”.\n\n\n\n\n\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n\nThe code chunk below shows a quantile data classification that used 5 classes.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nIn the code chunk below, equal data classification method is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"equal\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\nWarning: Maps Lie!\n\n\nDIY: Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.\n\nA. K-Means clustering Classification\nEach subzone is classified into a cluster where the DEPENDENCY value is most similar to others within that cluster, and most dissimilar to other clusters. There are 5 clusters created since n = 5. Each cluster/ class may contain different number of observations.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"kmeans\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nB. Quantile Classification\nEach class contains approximately the same number of observations based on the following:\n\nClass 1 = lowest 20% of DEPENDENCY values\nClass 2 = 20–40%\nClass 3 = 40–60%\nClass 4 = 60–80%\nClass 5 = highest 20%\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"quantile\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\nDIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?\n\n\nmap2 &lt;- tm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\", \n              style = \"quantile\", \n              n = 2, \n              title = \"n = 2\") +\n  tm_borders()\n\nmap6 &lt;- tm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\", \n              style = \"quantile\", \n              n = 6, \n              title = \"n = 6\") +\n  tm_borders()\n\nmap10 &lt;- tm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\", \n              style = \"quantile\", \n              n = 10, \n              title = \"n = 10\") +\n  tm_borders()\n\nmap20 &lt;- tm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\", \n              style = \"quantile\", \n              n = 20, \n              title = \"n = 20\") +\n  tm_borders()\n\ntmap_arrange(map2, map6, map10, map20, nrow = 2)\n\n\n\n\n\n\n\n\nWhen n = 2, we can only identify low and high dependency, which is not very useful in drawing comparison.\nWhen n = 6, we can now differentiate varying levels of dependency by subzones.\nWhen n = 10, it provides more resolution as compared to n = 6, but it is hard to compare based on the colour gradient.\nWhen n = 20, there are too many classes and we are unable to differentiate the difference in dependency values based on the gradient, which is not optimal for a visualisation.\n\n\n\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7867  0.8585  0.8763 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow, we will plot the choropleth map by using the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\n\n\nTo change the colour, we assign the preferred colour to values argument of tm_scale_intervals() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"quantile\",\n        n = 5,\n        values = \"brewer.greens\")) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the choropleth map is shaded in green.\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"quantile\",\n        n = 5,\n        values = \"-brewer.greens\")) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the colour scheme has been reversed.\n\n\n\n\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\n\nIn tmap, several tm_legend() options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 5,\n        values = \"brewer.greens\"),\n      fill.legend = tm_legend(\n        title = \"Dependency ratio\")) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\")\n\n\n\n\n\n\n\n\n\n\n\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n\n\n\n\n\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\", \n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\") +\n  tm_layout(frame = TRUE) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nTo reset the default style, refer to the code chunk below.\n\ntmap_style(\"white\")\n\n\n\n\n\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill().\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments.\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by using tm_facets().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nAdjusted the legend for the above chart to bottom right for visibility.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N == \"CENTRAL REGION\", ]) +\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.02) +\n  tm_layout(\n    legend.outside = FALSE,                    # move legend inside map\n    legend.position = c(\"right\", \"bottom\"),       # reposition inside\n    legend.hist.size = 0.5,\n    legend.text.size = 0.5,\n    legend.title.size = 0.5,\n    frame = FALSE\n  ) +\n  tm_borders(alpha = 0.2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)\n\n\n\n\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features\n\n\n\n\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#overview",
    "title": "Hands-on Exercise 8A",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, you will learn how to plot functional and truthful choropleth maps by using an R package called tmap package.\n\n\n\n\n\n\nTip\n\n\n\nIt is advisable for you to read the functional description of each function before using them."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#getting-started",
    "title": "Hands-on Exercise 8A",
    "section": "",
    "text": "In this hands-on exercise, the key R package use is tmap package in R. Beside tmap package, four other R packages will be used. They are:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\nAmong the four packages, readr, tidyr and dplyr are part of tidyverse package.\nThe code chunk below will be used to install and load these packages in RStudio.\n\npacman::p_load(sf, tmap, tidyverse)\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that, we only need to install tidyverse instead of readr, tidyr and dplyr individually."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#importing-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#importing-data-into-r",
    "title": "Hands-on Exercise 8A",
    "section": "",
    "text": "Two data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data fie. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\n\n\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\Belinda\\OneDrive - Singapore Management University\\Desktop\\Visual Analytics\\belindalim\\ISSS608-VAA\\Hands-on_Ex\\Hands-on_Ex08\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nYou can examine the content of mpsz by using the code chunk below.\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that only the first ten records will be displayed. This is because mpsz belongs to a sf object under the sf package which defaults the first 10 records to be printed.\n\n\n\n\n\nNext, we will import respopagsex2011to2020.csv file into RStudio and save the file into an R dataframe called popagsex.\nThe task will be performed by using read_csv() function of readr package as shown in the code chunk below.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\n\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age group 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate(across(c(PA, SZ), toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nCheck the data table after processing\n\nglimpse(popdata2020)\n\nRows: 234\nColumns: 7\n$ PA               &lt;chr&gt; \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO…\n$ SZ               &lt;chr&gt; \"ANG MO KIO TOWN CENTRE\", \"CHENG SAN\", \"CHONG BOON\", …\n$ YOUNG            &lt;dbl&gt; 1440, 6640, 6150, 5540, 2100, 3960, 2220, 4690, 1220,…\n$ `ECONOMY ACTIVE` &lt;dbl&gt; 2610, 15460, 13950, 12090, 3410, 8420, 4200, 11450, 2…\n$ AGED             &lt;dbl&gt; 760, 6050, 6470, 5120, 1310, 3610, 1530, 5100, 750, 4…\n$ TOTAL            &lt;dbl&gt; 4810, 28150, 26570, 22750, 6820, 15990, 7950, 21240, …\n$ DEPENDENCY       &lt;dbl&gt; 0.8429119, 0.8208279, 0.9046595, 0.8817204, 1.0000000…\n\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nThing to learn from the code chunk above:\n\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on Exercise 8A",
    "section": "",
    "text": "Two approaches can be used to prepare thematic map using tmap, they are:\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\n\nThe easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases.\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)\n\n\n\n\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\", \n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\") +\n  tm_layout(frame = TRUE) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nIn the following sub-section, we will share with you tmap functions that used to plot these elements.\n\n\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nThings to learn from tm_polygons():\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\n\n\nActually, tm_polygons() is a wraper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\nThe code chunk below draws a choropleth map by using tm_fill() alone.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\") +\n  tm_borders(lwd = 0.01,  \n             fill_alpha = 0.1)\n\n\n\n\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”.\n\n\n\n\n\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n\nThe code chunk below shows a quantile data classification that used 5 classes.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nIn the code chunk below, equal data classification method is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"equal\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\nWarning: Maps Lie!\n\n\nDIY: Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.\n\nA. K-Means clustering Classification\nEach subzone is classified into a cluster where the DEPENDENCY value is most similar to others within that cluster, and most dissimilar to other clusters. There are 5 clusters created since n = 5. Each cluster/ class may contain different number of observations.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"kmeans\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nB. Quantile Classification\nEach class contains approximately the same number of observations based on the following:\n\nClass 1 = lowest 20% of DEPENDENCY values\nClass 2 = 20–40%\nClass 3 = 40–60%\nClass 4 = 60–80%\nClass 5 = highest 20%\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"quantile\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\nDIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?\n\n\nmap2 &lt;- tm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\", \n              style = \"quantile\", \n              n = 2, \n              title = \"n = 2\") +\n  tm_borders()\n\nmap6 &lt;- tm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\", \n              style = \"quantile\", \n              n = 6, \n              title = \"n = 6\") +\n  tm_borders()\n\nmap10 &lt;- tm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\", \n              style = \"quantile\", \n              n = 10, \n              title = \"n = 10\") +\n  tm_borders()\n\nmap20 &lt;- tm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\", \n              style = \"quantile\", \n              n = 20, \n              title = \"n = 20\") +\n  tm_borders()\n\ntmap_arrange(map2, map6, map10, map20, nrow = 2)\n\n\n\n\n\n\n\n\nWhen n = 2, we can only identify low and high dependency, which is not very useful in drawing comparison.\nWhen n = 6, we can now differentiate varying levels of dependency by subzones.\nWhen n = 10, it provides more resolution as compared to n = 6, but it is hard to compare based on the colour gradient.\nWhen n = 20, there are too many classes and we are unable to differentiate the difference in dependency values based on the gradient, which is not optimal for a visualisation.\n\n\n\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7867  0.8585  0.8763 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow, we will plot the choropleth map by using the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\n\n\nTo change the colour, we assign the preferred colour to values argument of tm_scale_intervals() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"quantile\",\n        n = 5,\n        values = \"brewer.greens\")) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the choropleth map is shaded in green.\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"quantile\",\n        n = 5,\n        values = \"-brewer.greens\")) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the colour scheme has been reversed.\n\n\n\n\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\n\nIn tmap, several tm_legend() options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 5,\n        values = \"brewer.greens\"),\n      fill.legend = tm_legend(\n        title = \"Dependency ratio\")) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\")\n\n\n\n\n\n\n\n\n\n\n\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n\n\n\n\n\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\", \n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\") +\n  tm_layout(frame = TRUE) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nTo reset the default style, refer to the code chunk below.\n\ntmap_style(\"white\")\n\n\n\n\n\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill().\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments.\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by using tm_facets().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nAdjusted the legend for the above chart to bottom right for visibility.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N == \"CENTRAL REGION\", ]) +\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.02) +\n  tm_layout(\n    legend.outside = FALSE,                    # move legend inside map\n    legend.position = c(\"right\", \"bottom\"),       # reposition inside\n    legend.hist.size = 0.5,\n    legend.text.size = 0.5,\n    legend.title.size = 0.5,\n    frame = FALSE\n  ) +\n  tm_borders(alpha = 0.2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#reference",
    "title": "Hands-on Exercise 8A",
    "section": "",
    "text": "tmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)\n\n\n\n\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features\n\n\n\n\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08B.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08B.html#learning-outcome",
    "title": "Hands-on Exercise 8B",
    "section": "12.1.1 Learning outcome",
    "text": "12.1.1 Learning outcome\nBy the end of this hands-on exercise, you will acquire the following skills by using appropriate R packages:\n\nTo import an aspatial data file into R.\nTo convert it into simple point feature data frame and at the same time, to assign an appropriate projection reference to the newly create simple point feature data frame.\nTo plot interactive proportional symbol maps."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08B.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08B.html#the-data",
    "title": "Hands-on Exercise 8B",
    "section": "12.3.1 The data",
    "text": "12.3.1 The data\nThe data set use for this hands-on exercise is called SGPools_svy21. The data is in csv file format.\nFigure below shows the first 15 records of SGPools_svy21.csv. It consists of seven columns. The XCOORD and YCOORD columns are the x-coordinates and y-coordinates of SingPools outlets and branches. They are in Singapore SVY21 Projected Coordinates System."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08B.html#data-import-and-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08B.html#data-import-and-preparation",
    "title": "Hands-on Exercise 8B",
    "section": "12.3.2 Data Import and Preparation",
    "text": "12.3.2 Data Import and Preparation\nThe code chunk below uses read_csv() function of readr package to import SGPools_svy21.csv into R as a tibble data frame called sgpools.\n\nsgpools &lt;- read_csv(\"data/aspatial/SGPools_svy21.csv\")\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe code chunk below shows list() is used to do the job.\n\nlist(sgpools) \n\n[[1]]\n# A tibble: 306 × 7\n   NAME           ADDRESS POSTCODE XCOORD YCOORD `OUTLET TYPE` `Gp1Gp2 Winnings`\n   &lt;chr&gt;          &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Mar… 2 Bayf…    18972 30842. 29599. Branch                        5\n 2 Livewire (Res… 26 Sen…    98138 26704. 26526. Branch                       11\n 3 SportsBuzz (K… Lotus …   738078 20118. 44888. Branch                        0\n 4 SportsBuzz (P… 1 Sele…   188306 29777. 31382. Branch                       44\n 5 Prime Serango… Blk 54…   552542 32239. 39519. Branch                        0\n 6 Singapore Poo… 1A Woo…   731001 21012. 46987. Branch                        3\n 7 Singapore Poo… Blk 64…   370064 33990. 34356. Branch                       17\n 8 Singapore Poo… Blk 88…   370088 33847. 33976. Branch                       16\n 9 Singapore Poo… Blk 30…   540308 33910. 41275. Branch                       21\n10 Singapore Poo… Blk 20…   560202 29246. 38943. Branch                       25\n# ℹ 296 more rows\n\n\n[[1]] # A tibble: 306 × 7    NAME           ADDRESS POSTCODE XCOORD YCOORD `OUTLET TYPE` `Gp1Gp2 Winnings`    &lt;chr&gt;          &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;  1 Livewire (Mar… 2 Bayf…    18972 30842. 29599. Branch                        5  2 Livewire (Res… 26 Sen…    98138 26704. 26526. Branch                       11  3 SportsBuzz (K… Lotus …   738078 20118. 44888. Branch                        0  4 SportsBuzz (P… 1 Sele…   188306 29777. 31382. Branch                       44  5 Prime Serango… Blk 54…   552542 32239. 39519. Branch                        0  6 Singapore Poo… 1A Woo…   731001 21012. 46987. Branch                        3  7 Singapore Poo… Blk 64…   370064 33990. 34356. Branch                       17  8 Singapore Poo… Blk 88…   370088 33847. 33976. Branch                       16  9 Singapore Poo… Blk 30…   540308 33910. 41275. Branch                       21 10 Singapore Poo… Blk 20…   560202 29246. 38943. Branch                       25 # ℹ 296 more rows\nNotice that the sgpools data in tibble data frame and not the common R data frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08B.html#creating-a-sf-data-frame-from-an-aspatial-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08B.html#creating-a-sf-data-frame-from-an-aspatial-data-frame",
    "title": "Hands-on Exercise 8B",
    "section": "12.3.3 Creating a sf data frame from an aspatial data frame",
    "text": "12.3.3 Creating a sf data frame from an aspatial data frame\nThe code chunk below converts sgpools data frame into a simple feature data frame by using st_as_sf() of sf packages\n\nsgpools_sf &lt;- st_as_sf(sgpools,                         coords = c(\"XCOORD\", \"YCOORD\"),                        crs= 3414)\n\nThings to learn from the arguments above:\n\nThe coords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\nThe crs argument required you to provide the coordinates system in epsg format. EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by refering to epsg.io.\n\nFigure below shows the data table of sgpools_sf. Notice that a new column called geometry has been added into the data frame.\nYou can display the basic information of the newly created sgpools_sf by using the code chunk below.\n\nlist(sgpools_sf)\n\n[[1]]\nSimple feature collection with 306 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 7844.194 ymin: 26525.7 xmax: 45176.57 ymax: 47987.13\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 306 × 6\n   NAME                         ADDRESS POSTCODE `OUTLET TYPE` `Gp1Gp2 Winnings`\n * &lt;chr&gt;                        &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Marina Bay Sands)  2 Bayf…    18972 Branch                        5\n 2 Livewire (Resorts World Sen… 26 Sen…    98138 Branch                       11\n 3 SportsBuzz (Kranji)          Lotus …   738078 Branch                        0\n 4 SportsBuzz (PoMo)            1 Sele…   188306 Branch                       44\n 5 Prime Serangoon North        Blk 54…   552542 Branch                        0\n 6 Singapore Pools Woodlands C… 1A Woo…   731001 Branch                        3\n 7 Singapore Pools 64 Circuit … Blk 64…   370064 Branch                       17\n 8 Singapore Pools 88 Circuit … Blk 88…   370088 Branch                       16\n 9 Singapore Pools Anchorvale … Blk 30…   540308 Branch                       21\n10 Singapore Pools Ang Mo Kio … Blk 20…   560202 Branch                       25\n# ℹ 296 more rows\n# ℹ 1 more variable: geometry &lt;POINT [m]&gt;\n\n\n[[1]] Simple feature collection with 306 features and 5 fields Geometry type: POINT Dimension:     XY Bounding box:  xmin: 7844.194 ymin: 26525.7 xmax: 45176.57 ymax: 47987.13 Projected CRS: SVY21 / Singapore TM # A tibble: 306 × 6    NAME                         ADDRESS POSTCODE `OUTLET TYPE` `Gp1Gp2 Winnings`  * &lt;chr&gt;                        &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;  1 Livewire (Marina Bay Sands)  2 Bayf…    18972 Branch                        5  2 Livewire (Resorts World Sen… 26 Sen…    98138 Branch                       11  3 SportsBuzz (Kranji)          Lotus …   738078 Branch                        0  4 SportsBuzz (PoMo)            1 Sele…   188306 Branch                       44  5 Prime Serangoon North        Blk 54…   552542 Branch                        0  6 Singapore Pools Woodlands C… 1A Woo…   731001 Branch                        3  7 Singapore Pools 64 Circuit … Blk 64…   370064 Branch                       17  8 Singapore Pools 88 Circuit … Blk 88…   370088 Branch                       16  9 Singapore Pools Anchorvale … Blk 30…   540308 Branch                       21 10 Singapore Pools Ang Mo Kio … Blk 20…   560202 Branch                       25 # ℹ 296 more rows # ℹ 1 more variable: geometry &lt;POINT [m]&gt;\nThe output shows that sgppols_sf is in point feature class. It’s epsg ID is 3414. The bbox provides information of the extend of the geospatial data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08B.html#it-all-started-with-an-interactive-point-symbol-map",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08B.html#it-all-started-with-an-interactive-point-symbol-map",
    "title": "Hands-on Exercise 8B",
    "section": "12.4.1 It all started with an interactive point symbol map",
    "text": "12.4.1 It all started with an interactive point symbol map\nThe code chunks below are used to create an interactive point symbol map.\n\ntm_shape(sgpools_sf) +    tm_bubbles(fill = \"red\",            size = 1,            col = \"black\",            lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08B.html#lets-make-it-proportional",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08B.html#lets-make-it-proportional",
    "title": "Hands-on Exercise 8B",
    "section": "12.4.2 Lets make it proportional",
    "text": "12.4.2 Lets make it proportional\nTo draw a proportional symbol map, we need to assign a numerical variable to the size visual attribute. The code chunks below show that the variable Gp1Gp2Winnings is assigned to size visual attribute.\n\ntm_shape(sgpools_sf) +    tm_bubbles(fill = \"red\",              size = \"Gp1Gp2 Winnings\",              col = \"black\",              lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08B.html#lets-give-it-a-different-colour",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08B.html#lets-give-it-a-different-colour",
    "title": "Hands-on Exercise 8B",
    "section": "12.4.3 Lets give it a different colour",
    "text": "12.4.3 Lets give it a different colour\nThe proportional symbol map can be further improved by using the colour visual attribute. In the code chunks below, OUTLET_TYPE variable is used as the colour attribute variable.\n\ntm_shape(sgpools_sf) +    tm_bubbles(fill = \"OUTLET TYPE\",               size = \"Gp1Gp2 Winnings\",              col = \"black\",              lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08B.html#i-have-a-twin-brothers",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08B.html#i-have-a-twin-brothers",
    "title": "Hands-on Exercise 8B",
    "section": "12.4.4 I have a twin brothers :)",
    "text": "12.4.4 I have a twin brothers :)\nAn impressive and little-know feature of tmap’s view mode is that it also works with faceted plots. The argument sync in tm_facets() can be used in this case to produce multiple maps with synchronised zoom and pan settings.\n\ntm_shape(sgpools_sf) + \n  tm_bubbles(fill = \"OUTLET TYPE\", \n             size = \"Gp1Gp2 Winnings\",\n             col = \"black\",\n             lwd = 1) + \n  tm_facets(by= \"OUTLET TYPE\",\n            nrow = 1,\n            sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBefore you end the session, it is wiser to switch tmap’s Viewer back to plot mode by using the code chunk below.\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08B.html#all-about-tmap-package",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08B.html#all-about-tmap-package",
    "title": "Hands-on Exercise 8B",
    "section": "12.5.1 All about tmap package",
    "text": "12.5.1 All about tmap package\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08B.html#geospatial-data-wrangling-1",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08B.html#geospatial-data-wrangling-1",
    "title": "Hands-on Exercise 8B",
    "section": "12.5.2 Geospatial data wrangling",
    "text": "12.5.2 Geospatial data wrangling\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08B.html#data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08B.html#data-wrangling",
    "title": "Hands-on Exercise 8B",
    "section": "12.5.3 Data wrangling",
    "text": "12.5.3 Data wrangling\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08C.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08C.html",
    "title": "Hands-on Exercise 8C",
    "section": "",
    "text": "In this in-class exercise, you will gain hands-on experience on using appropriate R methods to plot analytical maps.\n\n\n\nBy the end of this in-class exercise, you will be able to use appropriate functions of tmap and tidyverse to perform the following tasks:\n\nImporting geospatial data in rds format into R environment.\nCreating cartographic quality choropleth maps by using appropriate tmap functions.\nCreating rate map\nCreating percentile map\nCreating boxmap"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08C.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08C.html#overview",
    "title": "Hands-on Exercise 8C",
    "section": "",
    "text": "In this in-class exercise, you will gain hands-on experience on using appropriate R methods to plot analytical maps.\n\n\n\nBy the end of this in-class exercise, you will be able to use appropriate functions of tmap and tidyverse to perform the following tasks:\n\nImporting geospatial data in rds format into R environment.\nCreating cartographic quality choropleth maps by using appropriate tmap functions.\nCreating rate map\nCreating percentile map\nCreating boxmap"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08C.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08C.html#getting-started",
    "title": "Hands-on Exercise 8C",
    "section": "13.2 Getting Started",
    "text": "13.2 Getting Started\n\n13.2.1 Installing and loading packages\n:::callout-Your Turn\nUsing the steps you learned in previous lesson, install and load sf, tmap and tidyverse packages into R environment. :::\n\npacman::p_load(tmap, tidyverse, sf)\n\n\n\n13.2.2 Importing data\nFor the purpose of this hands-on exercise, a prepared data set called NGA_wp.rds will be used. The data set is a polygon feature data.frame providing information on water point of Nigeria at the LGA level. You can find the data set in the rds sub-direct of the hands-on data folder.\n:::callout-Do it Yourself\nUsing appropriate sf function import NGA_wp.rds into R environment. :::\n\nNGA_wp &lt;- read_rds(\"data/rds/NGA_wp.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08C.html#basic-choropleth-mapping",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08C.html#basic-choropleth-mapping",
    "title": "Hands-on Exercise 8C",
    "section": "13.3 Basic Choropleth Mapping",
    "text": "13.3 Basic Choropleth Mapping\n\n13.3.1 Visualising distribution of non-functional water point\n:::callout-Your Turn\nPlot a choropleth map showing the distribution of non-function water point by LGA. :::\n\n\nShow Code\np1 &lt;- tm_shape(NGA_wp) +\n  tm_polygons(fill = \"wp_functional\",\n             fill.scale = tm_scale_intervals(\n               style = \"equal\",\n               n = 10,\n               values = \"brewer.blues\"),\n             fill.legend = tm_legend(\n               position = c(\"right\", \"bottom\"))) +\n  tm_borders(lwd = 0.1,\n             fill_alpha = 1) +\n  tm_title(\"Distribution of functional water point by LGAs\")\n\n\n\n\nShow Code\np2 &lt;- tm_shape(NGA_wp) + \n  tm_polygons(fill = \"total_wp\", \n              fill.scale = tm_scale_intervals(\n                style = \"equal\",\n                n = 10,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                position = c(\"right\", \"bottom\"))) +\n  tm_borders(lwd = 0.1, \n             fill_alpha = 1) + \n  tm_title(\"Distribution of total  water point by LGAs\")\n\n\n\ntmap_arrange(p2, p1, nrow = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08C.html#choropleth-map-for-rates",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08C.html#choropleth-map-for-rates",
    "title": "Hands-on Exercise 8C",
    "section": "13.4 Choropleth Map for Rates",
    "text": "13.4 Choropleth Map for Rates\nIn much of our readings we have now seen the importance to map rates rather than counts of things, and that is for the simple reason that water points are not equally distributed in space. That means that if we do not account for how many water points are somewhere, we end up mapping total water point size rather than our topic of interest.\n\n13.4.1 Deriving Proportion of Functional Water Points and Non-Functional Water Points\nWe will tabulate the proportion of functional water points and the proportion of non-functional water points in each LGA. In the following code chunk, mutate() from dplyr package is used to derive two fields, namely pct_functional and pct_nonfunctional.\n\nNGA_wp &lt;- NGA_wp %&gt;%\n  mutate(pct_functional = wp_functional/total_wp) %&gt;%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n\n\n\n13.4.2 Plotting map of rate\n:::callout-Your Turn\nPlot a choropleth map showing the distribution of percentage functional water point by LGA :::\n\n\nShow Code\ntm_shape(NGA_wp) +\n  tm_polygons(\"pct_functional\",\n              fill.scale = tm_scale_intervals(\n                style = \"equal\",\n                n = 10,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                position = c(\"right\", \"bottom\"))) + \n  tm_borders(lwd = 0.1,\n             fill_alpha = 1) +\n  tm_title(\"Rate map of functional water point by LGAs\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08C.html#extreme-value-maps",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08C.html#extreme-value-maps",
    "title": "Hands-on Exercise 8C",
    "section": "13.5 Extreme Value Maps",
    "text": "13.5 Extreme Value Maps\nExtreme value maps are variations of common choropleth maps where the classification is designed to highlight extreme values at the lower and upper end of the scale, with the goal of identifying outliers. These maps were developed in the spirit of spatializing EDA, i.e., adding spatial features to commonly used approaches in non-spatial EDA (Anselin 1994).\n\n13.5.1 Percentile Map\nThe percentile map is a special type of quantile map with six specific categories: 0-1%,1-10%, 10-50%,50-90%,90-99%, and 99-100%. The corresponding breakpoints can be derived by means of the base R quantile command, passing an explicit vector of cumulative probabilities as c(0,.01,.1,.5,.9,.99,1). Note that the begin and endpoint need to be included.\n\n13.5.1.1 Data Preparation\nStep 1: Exclude records with NA by using the code chunk below.\n\nNGA_wp &lt;- NGA_wp %&gt;%\n  drop_na()\n\nStep 2: Creating customised classification and extracting values\n\npercent &lt;- c(0,.01,.1,.5,.9,.99,1)\nvar &lt;- NGA_wp[\"pct_functional\"] %&gt;%\n  st_set_geometry(NULL)\nquantile(var[,1], percent)\n\n       0%        1%       10%       50%       90%       99%      100% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n\n\n:::callout -Important\nWhen variables are extracted from an sf data.frame, the geometry is extracted as well. For mapping and spatial manipulation, this is the expected behavior, but many base R functions cannot deal with the geometry. Specifically, the quantile() gives an error. As a result st_set_geomtry(NULL) is used to drop geomtry field. :::\n\n\n13.5.1.2 Why writing functions?\nWriting a function has three big advantages over using copy-and-paste:\n\nYou can give a function an evocative name that makes your code easier to understand.\nAs requirements change, you only need to update code in one place, instead of many.\nYou eliminate the chance of making incidental mistakes when you copy and paste (i.e. updating a variable name in one place, but not in another).\n\nSource: Chapter 19: Functions of R for Data Science.\n\n\n13.5.1.3 Creating the get.var function\nFirstly, we will write an R function as shown below to extract a variable (i.e. wp_nonfunctional) as a vector out of an sf data.frame.\n\narguments:\n\nvname: variable name (as character, in quotes)\ndf: name of sf data frame\n\nreturns:\n\nv: vector with values (without a column name)\n\n\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% \n    st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\n\n\n13.5.1.4 A percentile mapping function\nNext, we will write a percentile mapping function by using the code chunk below.\n\npercentmap &lt;- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent &lt;- c(0,.01,.1,.5,.9,.99,1)\n  var &lt;- get.var(vnam, df)\n  bperc &lt;- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_polygons(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"&lt; 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"&gt; 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"))\n}\n\n\n\n13.5.1.5 Test drive the percentile mapping function\nTo run the function, type the code chunk as shown below.\n\npercentmap(\"total_wp\", NGA_wp)\n\n\n\n\n\n\n\n\nNote that this is just a bare bones implementation. Additional arguments such as the title, legend positioning just to name a few of them, could be passed to customise various features of the map.\n\n\n\n13.5.2 Box map\nIn essence, a box map is an augmented quartile map, with an additional lower and upper category. When there are lower outliers, then the starting point for the breaks is the minimum value, and the second break is the lower fence. In contrast, when there are no lower outliers, then the starting point for the breaks will be the lower fence, and the second break is the minimum value (there will be no observations that fall in the interval between the lower fence and the minimum value).\n\nggplot(data = NGA_wp,\n       aes(x = \"\",\n           y = wp_nonfunctional)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nDisplaying summary statistics on a choropleth map by using the basic principles of boxplot.\nTo create a box map, a custom breaks specification will be used. However, there is a complication. The break points for the box map vary depending on whether lower or upper outliers are present.\n\n\n13.5.2.1 Creating the boxbreaks function\nThe code chunk below is an R function that creating break points for a box map.\n\narguments:\n\nv: vector with observations\nmult: multiplier for IQR (default 1.5)\n\nreturns:\n\nbb: vector with 7 break points compute quartile and fences\n\n\n\nboxbreaks &lt;- function(v,mult=1.5) {\n  qv &lt;- unname(quantile(v))\n  iqr &lt;- qv[4] - qv[2]\n  upfence &lt;- qv[4] + mult * iqr\n  lofence &lt;- qv[2] - mult * iqr\n  # initialize break points vector\n  bb &lt;- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence &lt; qv[1]) {  # no lower outliers\n    bb[1] &lt;- lofence\n    bb[2] &lt;- floor(qv[1])\n  } else {\n    bb[2] &lt;- lofence\n    bb[1] &lt;- qv[1]\n  }\n  if (upfence &gt; qv[5]) { # no upper outliers\n    bb[7] &lt;- upfence\n    bb[6] &lt;- ceiling(qv[5])\n  } else {\n    bb[6] &lt;- upfence\n    bb[7] &lt;- qv[5]\n  }\n  bb[3:5] &lt;- qv[2:4]\n  return(bb)\n}\n\n\n\n13.5.2.2 Creating the get.var function\nThe code chunk below is an R function to extract a variable as a vector out of an sf data frame.\n\narguments:\n\nvname: variable name (as character, in quotes)\ndf: name of sf data frame\n\nreturns:\n\nv: vector with values (without a column name)\n\n\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\n\n\n13.5.2.3 Test drive the newly created function\nLet’s test the newly created function\n\nvar &lt;- get.var(\"wp_nonfunctional\", NGA_wp) \nboxbreaks(var)\n\n[1] -56.5   0.0  14.0  34.0  61.0 131.5 278.0\n\n\n[1] -56.5   0.0  14.0  34.0  61.0 131.5 278.0\n\n\n13.5.2.4 Boxmap function\nThe code chunk below is an R function to create a box map. - arguments: - vnam: variable name (as character, in quotes) - df: simple features polygon layer - legtitle: legend title - mtitle: map title - mult: multiplier for IQR - returns: - a tmap-element (plots a map)\n\nboxmap &lt;- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var &lt;- get.var(vnam,df)\n  bb &lt;- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"&lt; 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"&gt; 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n\n\ntmap_mode(\"plot\") \nboxmap(\"wp_nonfunctional\", NGA_wp)"
  }
]